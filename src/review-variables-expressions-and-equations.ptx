<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="review-variables-expressions-and-equations" permid="CAy">
  <title>Variables, Expressions, and Equations Chapter Review</title>
  <subsection permid="iHH">
    <title>Variables and Evaluating Expressions</title>
    <p permid="FQQ">
      In <xref ref="section-variables-and-evaluating-expressions">Section</xref>
      we covered the definitions of variables and expressions,
      and how to evaluate an expression with a particular number.
    </p>

    <paragraphs permid="pgN">
      <title>Evaluating Expressions</title>
      <p permid="lXZ">
        When we evaluate an expression's value,
        we substitute each variable with its given value.
      </p>
    </paragraphs>

    <example permid="GeY">
      <p permid="xCx">
        Evaluate the value of <m>\frac{5}{9}(F - 32)</m> if <m>F=212</m>.
        <md permid="giN">
          <mrow>\frac{5}{9}(F - 32)\amp=\frac{5}{9}(212 - 32)</mrow>
          <mrow>\amp=\frac{5}{9}(180)</mrow>
          <mrow>\amp=100</mrow>
        </md>
      </p>
    </example>

    <paragraphs permid="VnW">
      <title>Substituting a Negative Number</title>
      <p permid="Sfi">
        When we substitute a variable with a negative number,
        it's important to use parentheses around the number.
      </p>
    </paragraphs>

    <example permid="mmh">
      <p permid="dJG">
        Evaluate the following expressions if <m>x=-3</m>.

        <ol label="a." cols="4" permid="cbx">
          <li permid="RCs">
            <p permid="YLs">
              <m>\begin{aligned}[t]
              x^2\amp=(-3)^2\\
              \amp=9
              \end{aligned}</m>
            </p>
          </li>

          <li permid="xJB">
            <p permid="ESB">
              <m>\begin{aligned}[t]
              x^3\amp=(-3)^3\\
              \amp=(-3)(-3)(-3)\\
              \amp=-27
              \end{aligned}</m>
            </p>
          </li>

          <li permid="dQK">
            <p permid="kZK">
              <m>\begin{aligned}[t]
              -x^2\amp=-(-3)^2\\
              \amp=-9
              \end{aligned}</m>
            </p>
          </li>

          <li permid="JXT">
            <p permid="RgT">
              <m>\begin{aligned}[t]
              -x^3\amp=-(-3)^3\\
              \amp=-(-27)\\
              \amp=27
              \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
  </subsection>

  <subsection permid="uVZ">
    <title>Combining Like Terms</title>
    <p permid="etA">
      In <xref ref="section-combining-like-terms">Section</xref>
      we covered the definitions of a term and how to combine like terms.
    </p>

    <example permid="Stq">
      <statement>
        <p permid="JQP">
          List the terms in the expression <m>5x-3y+\frac{2w}{3}</m>.
        </p>
      </statement>
      <solution permid="VCr">
        <p permid="jyS">
          The expression has three terms that are being added, <m>5x</m>,
          <m>-3y</m> and <m>\frac{2w}{3}</m>.
        </p>
      </solution>
    </example>

    <example permid="yAz">
      <statement>
        <p permid="pXY">
          Simplify the expression <m>5x-3x^2+2x+5x^2</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="BJA">
        <p permid="PGb">
          This expression has four terms:
          <m>5x</m>, <m>-3x^2</m>, <m>2x</m>, and <m>5x^2</m>.
          Both <m>5x</m> and <m>2x</m> are like terms;
          also <m>-3x^2</m> and <m>5x^2</m> are like terms.
          When we combine like terms, we get:
          <me permid="MpW">
            5x-3x^2+2x+5x^2=7x+2x^2
          </me>
          Note that we cannot combine <m>7x</m> and <m>2x^2</m> because <m>x</m> and <m>x^2</m> represent different quantities.
        </p>
      </solution>
    </example>
  </subsection>

<subsection permid="uMv">
    <title>Comparison Symbols and Notation for Intervals</title>
    <p permid="Tww">
      The following are symbols used to compare numbers.
    </p>

    <table permid="IXr">
      <title>Comparison Symbols</title>
      <tabular valign="top" permid="peA">
        <row bottom="medium">
          <cell>Symbol</cell>
          <cell>Means</cell>
          <cell>True</cell>
          <cell>True</cell>
          <cell>False</cell>
        </row>
        <row>
          <cell><m>=</m></cell>
          <cell>equals</cell>
          <cell><m>13=13</m></cell>
          <cell><m>\frac{5}{4}=1.25</m></cell>
          <cell><m>5\reject{=}6</m></cell>
        </row>
        <row>
          <cell><m>\gt</m></cell>
          <cell>is greater than</cell>
          <cell><m>13\gt11</m></cell>
          <cell><m>\pi\gt3</m></cell>
          <cell><m>9\reject{\gt}9</m></cell>
        </row>
        <row>
          <cell><m>\geq</m></cell>
          <cell>is greater than or equal to</cell>
          <cell><m>13\geq11</m></cell>
          <cell><m>3\geq3</m></cell>
          <cell><m>11.2\reject{\geq}10.2</m></cell>
        </row>
        <row>
          <cell><m>\lt</m></cell>
          <cell>is less than</cell>
          <cell><m>-3\lt8</m></cell>
          <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
          <cell><m>2\reject{\lt}-2</m></cell>
        </row>
        <row>
          <cell><m>\leq</m></cell>
          <cell>is less than or equal to</cell>
          <cell><m>-3\leq8</m></cell>
          <cell><m>3\leq3</m></cell>
          <cell><m>\frac{4}{5}\reject{\leq}\frac{3}{5}</m></cell>
        </row>
        <row>
          <cell><m>\neq</m></cell>
          <cell>is not equal to</cell>
          <cell><m>10\neq20</m></cell>
          <cell><m>\frac{1}{2}\neq1.2</m></cell>
          <cell><m>\frac{3}{8}\reject{\neq}0.375</m></cell>
        </row>
      </tabular>

    </table>

    <p permid="zDF">
      The following are some examples of set-builder notation and interval notation.
    </p>

    <sbsgroup permid="bDy">
      <sidebyside widths="40% 27% 27%" margins="0%">
        <p>Graph</p>
        <p>Set-builder Notation</p>
        <p>Interval Notation</p>
        <!-- titles of some form would be nicer, but stack does not permit titles -->
        <!-- <stack>
          <title>Graph</title>
          <title>Set-builder Notation</title>
          <title>Interval Notation</title>
        </stack> -->
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="Eny">
          <description>a number line graph with a bracket at 1 opening to the right; a thick arrow points to the right</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                \addplot+[closedinfiniteinterval] coordinates {(1,0) (3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\ge1\right\}</m></p>
        <p><m>[1,\infty)</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="kuH">
          <description>a number line with a parenthesis opening to the right; a thick arrow points to the right</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[openinfiniteinterval] coordinates {(1,0) (3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\gt1\right\}</m></p>
        <p><m>(1,\infty)</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="QBQ">
          <description>a number line with a bracket at 1 opening to the left; a thick arrow points to the left</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[closedinfiniteinterval] coordinates {(1,0) (-3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\le1\right\}</m></p>
        <p><m>(-\infty,1]</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="wIZ">
          <description>a number line with a parenthesis at 1 opening to the left; a thick arrow points to the left</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[openinfiniteinterval] coordinates {(1,0) (-3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\lt1\right\}</m></p>
        <p><m>(-\infty,1)</m></p>
      </sidebyside>
    </sbsgroup>
  </subsection>

  <subsection permid="bdi">
    <title>Equations and Inequalities as True/False Statements</title>
    <p permid="KAJ">
      In <xref ref="section-equations-and-inequalities-as-true-false-statements">Section</xref>
      we covered the definitions of an equation and an inequality,
      as well as how to verify if a particular number is a solution to them.
    </p>

    <paragraphs permid="Bvf">
      <title>Checking Possible Solutions</title>
      <p permid="qHS">
        Given an equation or an inequality
        (with one variable),
        checking if some particular number is a solution is just a matter of replacing the value of the variable with the specified number and determining if the resulting equation/inequality is true or false.
        This may involve some amount of arithmetic simplification.
      </p>
    </paragraphs>

    <example permid="eHI">
      <statement>
        <p permid="Wfh">
          Is <m>-5</m> a solution to <m>2(x+3)-2=4-x</m>?
        </p>
      </statement>
      <solution permid="hQJ">
        <p permid="vNk">
          To find out,
          substitute in <m>-5</m> for <m>x</m> and see what happens.
          <md permid="sxf">
            <mrow>2(x+3)-2\amp=4-x</mrow>
            <mrow>2(\substitute{(-5)}+3)-2\amp\wonder{=}4-\substitute{(-5)}</mrow>
            <mrow>2(\highlight{-2})-2\amp\wonder{=}\highlight{9}</mrow>
            <mrow>\highlight{-4}-2\amp\wonder{=}9</mrow>
            <mrow>\highlight{-6}\amp\reject{=}9</mrow>
          </md>
          So no, <m>-5</m> is not a solution to <m>2(x+3)-2=4-x</m>.
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="Hkr">
    <title>Solving One-Step Equations</title>
    <p permid="WPb">
      In <xref ref="section-solving-one-step-equations">Section</xref>
      we covered to to add, subtract, multiply,
      or divide on both sides of an equation to isolate the variable,
      summarized in <xref ref="fact-properties-of-equivalent-equations">Fact</xref>.
      We also learned how to state our answer,
      either as a solution or a solution set.
      Last, we discussed how to solve equations with fractions.
    </p>

    <paragraphs permid="hCo">
      <title>Solving One-Step Equations</title>
      <p permid="CWk">
        When we solve linear equations,
        we use <xref ref="fact-properties-of-equivalent-equations" text="title" /> and follow an algorithm to <xref ref="algorithm-steps-to-solve-one-step-linear-equation" text="custom">solve a linear equation</xref>.
      </p>
    </paragraphs>

    <example permid="KOR">
      <statement>
        <p permid="Cmq">
          Solve for <m>g</m> in <m>\frac{1}{2}=\frac{2}{3}+g</m>.
        </p>
      </statement>
      <solution permid="NXS">
        <sidebyside widths="47% 47%" margins="0%">
          <p permid="bUt">
            We will subtract <m>\frac{2}{3}</m> on both sides of the equation:
            <md permid="YEo">
              <mrow>\frac{1}{2}\amp=\frac{2}{3}+g</mrow>
              <mrow>\frac{1}{2}\subtractright{\frac{2}{3}}\amp=\frac{2}{3}+g\subtractright{\frac{2}{3}}</mrow>
              <mrow>\frac{3}{6}-\frac{4}{6}\amp=g</mrow>
              <mrow>-\frac{1}{6}\amp=g</mrow>
            </md>
          </p>

          <p permid="IbC">
            We will check the solution by substituting <m>g</m> in the original equation with <m>-\frac{1}{6}</m>:
            <md permid="ELx">
              <mrow>\frac{1}{2}\amp=\frac{2}{3}+g</mrow>
              <mrow>\frac{1}{2}\amp\wonder{=}\frac{2}{3}+\left(\substitute{-\frac{1}{6}}\right)</mrow>
              <mrow>\frac{1}{2}\amp\wonder{=}\frac{4}{6}+\left(-\frac{1}{6}\right)</mrow>
              <mrow>\frac{1}{2}\amp\confirm{=}\frac{3}{6}</mrow>
            </md>
          </p>
        </sidebyside>

        <p>
          The solution <m>-\frac{1}{6}</m> is checked and the solution set is <m>\left\{-\frac{1}{6}\right\}</m>.
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="nrA">
    <title>Solving One-Step Inequalities</title>
    <p permid="jdt">
      In <xref ref="section-solving-one-step-inequalities">Section</xref>
      we covered how solving inequalities is very much like how we solve equations,
      except that if we <xref ref="fact-changing-direction-of-inequality-sign" text="custom">multiply or divide by a negative</xref>
      we switch the inequality sign.
    </p>

    <paragraphs permid="NJx">
      <title>Solving One-Step Inequalities</title>
      <p permid="PkC">
        When we solve linear inequalities,
        we also use <xref ref="fact-properties-of-equivalent-equations" text="title" /> with one small complication: When we multiply or divide by the same <em>negative</em>
        number on both sides of an inequality, the direction reverses!
      </p>
    </paragraphs>

    <example permid="qWa">
      <statement>
        <p permid="itz">
          Solve the inequality <m>-2x\geq12</m>.
          State the solution set with both interval notation and set-builder notation.
        </p>
      </statement>
      <solution permid="ufb">
        <p permid="oiL">
          To solve this inequality, we will divide each side by <m>-2</m>:
          <md permid="kSG">
            <mrow>-2x\amp\geq12</mrow>
            <mrow>\divideunder{-2x}{-2}\amp\highlight{{}\leq{}}\divideunder{12}{-2}\amp\amp\text{Note the change in direction.}</mrow>
            <mrow>x\amp\leq-6</mrow>
          </md>
          <ul permid="DyN">
            <li permid="Foa">
              <p permid="utw">
                The inequality's solution set in interval notation is <m>(-\infty,-6]</m>.
              </p>
            </li>

            <li permid="lvj">
              <p permid="aAF">
                The inequality's solution set in set-builder notation is <m>\{x\mid x\leq-6\}</m>.
              </p>
            </li>
          </ul>
        </p>
      </solution>
      <!-- <p>
        Since there are infinitely many solutions, it's impossible to literally check them all.
        We found that all values of <m>x</m> for which <m>x\leq-6</m> are solutions.
        One approach is to check that <m>-6</m> satisfies the inequality,
        and also that one number less than <m>-6</m> (any number, your choice) is a solution.
        <md>
          <mrow>-2x\amp\geq12\amp -2x\amp\ge12</mrow>
          <mrow>-2(\substitute{-6})\amp\wonder{\geq}12\amp -2(\substitute{-7})\amp\wonder{\ge}12</mrow>
          <mrow>12\amp\confirm{\geq}12\amp 14\amp\confirm{\ge}12</mrow>
        </md>
      </p> -->
    </example>
  </subsection>

  <subsection permid="LUk">
    <title>Algebraic Properties and Simplifying Expressions</title>
    <p permid="AbE">
      In <xref ref="section-algebraic-properties-and-simplifying-expressions">Section</xref>
      we covered the definitions of the identities and inverses,
      and the various <xref ref="list-algebraic-properties" text="custom">algebraic properties</xref>.
      We then learned about the order of operations.
    </p>

    <example permid="PyK">
      <statement>
        <p permid="TkB">
          Use the associative, commutative,
          and distributive properties to simplify the expression <m>5x+9(-2x+3)</m> as much as possible.
        </p>
      </statement>
      <solution permid="mAC">
        <p permid="gEm">
          We will remove parentheses by the distributive property,
          and then combine like terms:
          <md permid="doh">
            <mrow>5x+9(-2x+3)\amp=5x+9(-2x+3)</mrow>
            <mrow>\amp=5x+9(-2x)+9(3)</mrow>
            <mrow>\amp=5x-18x+27</mrow>
            <mrow>\amp=-13x+27</mrow>
          </md>
        </p>
      </solution>
    </example>
  </subsection>


  <subsection permid="zFS">
    <title>Modeling with Equations and Inequalities</title>
    <p permid="HGd">
      In <xref ref="section-modeling-with-equations-and-inequalities">Section</xref>
      we covered how to translate phrases into mathematics,
      and how to set up equations and inequalities for application models.
    </p>

    <paragraphs permid="ZXP">
      <title>Modeling with Equations and Inequalities</title>
      <p permid="nNm">
        To set up an equation modeling a real world scenario,
        the first thing we need to do is to identify what variable we will use.
        The variable we use will be determined by whatever is unknown in our problem statement.
        Once we've identified and defined our variable,
        we'll use the numerical information provided in the equation to set up our equation.
      </p>
    </paragraphs>

    <example permid="Dks">
      <statement>
        <p permid="GWj">
          A bathtub contains
          <quantity>
            <mag>2.5</mag><unit base="foot" exp="3"/>
          </quantity>
          of water.
          More water is being poured in at a rate of
          <quantity>
            <mag>1.75</mag><unit base="foot" exp="3"/>
          </quantity>
          per minute.
          When will the amount of water in the bathtub reach
          <quantity>
            <mag>6.25</mag><unit base="foot" exp="3"/>
          </quantity>?
        </p>
      </statement>
      <solution permid="amk">
        <p permid="UpU">
          Since the question being asked in this problem starts with <q>when,</q>
          we immediately know that the unknown is time.
          As the volume of water in the tub is measured in
          <quantity>
            <unit base="foot" exp="3"/>
          </quantity>
          per minute, we know that time needs to be measured in minutes.
          We'll defined <m>t</m> to be the number of minutes that water is poured into the tub.
          Since each minute there are
          <quantity>
            <mag>1.75</mag><unit base="foot" exp="3"/>
          </quantity>
          of water added,
          we will add the expression <m>1.75t</m> to <m>2.5</m> to obtain the total amount of water.
          Thus the equation we set up is:
          <me permid="xgY">
            2.5+1.75t=6.25
          </me>
        </p>
      </solution>
    </example>
  </subsection>

  <exercises permid="sbt">
    <subexercises>
      <title>Variables and Evaluating Expressions</title>
      <exercisegroup cols="2">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate80.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate80.pg" />
        </exercise>
        <exercise>
          <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
        </exercise>
        <exercise>
          <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/FahrenheitCelsius10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/FahrenheitCelsius10.pg" />
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext20.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Combining Like Terms</title>
      <exercisegroup cols="2">
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$answer[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p permid="fOO">
                Count the number of terms in each expression.
                <ol label="a." permid="CnD">
                  <li permid="unF">
                    <p permid="MTZ">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="tbi">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>
                  <li permid="auO">
                    <p permid="Zir">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="FpA">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>
                  <li permid="GBX">
                    <p permid="lwJ">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="RDS">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>
                  <li permid="mJg">
                    <p permid="xLb">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="dSk">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="eQm">
              <p permid="cko">
                <ol label="a." permid="Ayq">
                  <li permid="SQp">
                    <p permid="JZt">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>
                  <li permid="yXy">
                    <p permid="qgC">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>
                  <li permid="feH">
                    <p permid="WnL">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>
                  <li permid="LlQ">
                    <p permid="CuU">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$answer[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p permid="LVX">
                Count the number of terms in each expression.
                <ol label="a." permid="iuM">
                  <li permid="rsZ">
                    <p permid="iCd">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="OJm">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>
                  <li permid="XAi">
                    <p permid="uQv">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="aXE">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>
                  <li permid="DHr">
                    <p permid="HeN">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="nlW">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>
                  <li permid="jOA">
                    <p permid="Ttf">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="zAo">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="KXv">
              <p permid="Irx">
                <ol label="a." permid="gFz">
                  <li permid="PVJ">
                    <p permid="fHx">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>
                  <li permid="wcS">
                    <p permid="LOG">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>
                  <li permid="ckb">
                    <p permid="rVP">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>
                  <li permid="Irk">
                    <p permid="YcY">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  $answers[$i] = List();
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                      $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p permid="QFQ">
                List the terms in each expression.
              </p>
              <instruction>
                Enter the terms separated by commas.
              </instruction>
              <p>
                <ol label="a." permid="neF">
                  <li permid="cTV">
                    <p permid="mQx">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="SXG">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>
                  <li permid="Jbe">
                    <p permid="zeP">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="flY">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>
                  <li permid="pin">
                    <p permid="Lth">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="rAq">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>
                  <li permid="Vpw">
                    <p permid="XHz">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="DOI">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="PHo">
              <p permid="Nbq">
                <ol label="a." permid="lps">
                  <li permid="BwF">
                    <p permid="jVR">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>
                  <li permid="hDO">
                    <p permid="Qda">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>
                  <li permid="NKX">
                    <p permid="wkj">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>
                  <li permid="tSg">
                    <p permid="crs">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  $answers[$i] = List();
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                      $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p permid="wMZ">
                List the terms in each expression.
              </p>
              <instruction>
                Enter the terms separated by commas.
              </instruction>
              <p>
                <ol label="a." permid="TlO">
                  <li permid="ZZp">
                    <p permid="IyB">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="oFK">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>
                  <li permid="Ggy">
                    <p permid="UMT">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="AUc">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>
                  <li permid="mnH">
                    <p permid="hbl">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="Niu">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>
                  <li permid="SuQ">
                    <p permid="tpD">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="ZwM">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="vOx">
              <p permid="tiz">
                <ol label="a." permid="RwB">
                  <li permid="yBZ">
                    <p permid="FDV">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>
                  <li permid="eJi">
                    <p permid="lLe">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>
                  <li permid="KQr">
                    <p permid="RSn">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>
                  <li permid="qXA">
                    <p permid="xZw">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
      <!-- fraction coefficients -->
        <exercise>
          <webwork>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->flags->set(reduceConstants=>0);
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                          Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                          Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                          Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                          Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                          Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                          Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                          Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                          Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                          Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                          Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                  $answers[$i] = Formula("$answers[$i]")->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <p permid="jto">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="PAx">
                <ol label="a." permid="oTS">
                  <li permid="FKZ">
                    <p permid="ynR">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="eva">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li permid="lSi">
                    <p permid="KCj">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="qJs">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li permid="RZr">
                    <p permid="WQB">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="CXK">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li permid="ygA">
                    <p permid="jeT">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="Pmc">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->flags->set(reduceConstants=>0);
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                          Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                          Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                          Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                          Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                          Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                          Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                          Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                          Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                          Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                          Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                  $answers[$i] = Formula("$answers[$i]")->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <p permid="vHG">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="bOP">
                <ol label="a." permid="Vbb">
                  <li permid="enJ">
                    <p permid="vtl">
                      <m><var name="$exp0" /></m>
                    </p>
                    <p permid="bAu">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li permid="KuS">
                    <p permid="HHD">
                      <m><var name="$exp1" /></m>
                    </p>
                    <p permid="nOM">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li permid="qCb">
                    <p permid="TVV">
                      <m><var name="$exp2" /></m>
                    </p>
                    <p permid="Ade">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li permid="WJk">
                    <p permid="gkn">
                      <m><var name="$exp3" /></m>
                    </p>
                    <p permid="Mrw">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Comparison Symbols and Notation for Intervals</title>
      <exercisegroup cols="2">
        <exercise>
          <webwork>
            <pg-code>
              #randomizes from 12, only presents 6
              ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
              Context("Fraction");
              Context()->flags->set(reduceFractions=>0);
              for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                  $ld[$i]=random(2,9,1);
                  $left[$i]=Fraction($ln[$i],$ld[$i]);
                  $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
              for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                  $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                  $rd[$i]=random(2,9,1);
                  $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
              @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
              @j=NchooseK(12,12);
              @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
              $True=PopUp(["?","True","False"],"True");
              $False=PopUp(["?","True","False"],"False");
              for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
              for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
              for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
              for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
              for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
              for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
              for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
            <statement>
              <p permid="yoe">
                Decide if each comparison is true or false.
                <ol permid="hwX">
                  <li permid="RiG">
                    <p permid="Htv">
                      <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                    </p>
                  </li>
                  <li permid="xpP">
                    <p permid="nAE">
                      <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                    </p>
                  </li>
                  <li permid="dwY">
                    <p permid="THN">
                      <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                    </p>
                  </li>
                  <li permid="JEh">
                    <p permid="zOW">
                      <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                    </p>
                  </li>
                  <li permid="pLq">
                    <p permid="fWf">
                      <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                    </p>
                  </li>
                  <li permid="VSz">
                    <p permid="Mdo">
                      <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork >
            <pg-code>
              #randomizes from 12, only presents 6
              ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
              Context("Fraction");
              Context()->flags->set(reduceFractions=>0);
              for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                  $ld[$i]=random(2,9,1);
                  $left[$i]=Fraction($ln[$i],$ld[$i]);
                  $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
              for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                  $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                  $rd[$i]=random(2,9,1);
                  $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
              @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
              @j=NchooseK(12,12);
              @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
              $True=PopUp(["?","True","False"],"True");
              $False=PopUp(["?","True","False"],"False");
              for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
              for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
              for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
              for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
              for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
              for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
              for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
            <statement>
              <p permid="evn">
                Decide if each comparison is true or false.
                <ol permid="NEg">
                  <li permid="BZI">
                    <p permid="skx">
                      <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                    </p>
                  </li>
                  <li permid="igR">
                    <p permid="YrG">
                      <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                    </p>
                  </li>
                  <li permid="Ooa">
                    <p permid="EyP">
                      <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                    </p>
                  </li>
                  <li permid="uvj">
                    <p permid="kFY">
                      <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                    </p>
                  </li>
                  <li permid="aCs">
                    <p permid="QNh">
                      <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                    </p>
                  </li>
                  <li permid="GJB">
                    <p permid="wUq">
                      <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
      </exercisegroup>

      <exercisegroup>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
              %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
              %right=(oi=>')',ci=>')',io=>')',ic=>']');
              @type=('oi','ci','io','ic')[NchooseK(4,3)];
              @ticks = ();
              for my $j (-5..5) {push(@ticks,$j);};
              for my$i(0,1,2){
              $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(5.5,0,'black',1);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(-5.5,0,'black',1);
              $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
              for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
              $nl[$i]->h_ticks(0,'black',@ticks);
              };
              $shadingoffset = 0.5;
              for my$i(0..2){
              if($type[$i]eq'oi' or $type[$i]eq'ci'){
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
              }else{
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
              };
              if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
              };
              InequalitySetBuilder::UseVerticalSuchThat();
              Context("InequalitySetBuilder-Only");
              for my$i(0..2){
              if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
              elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
              elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
              else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
              };
              Context("Interval");
              Context()->flags->set("formatStudentAnswer"=>'parsed');
              for my$i(0..2){
              if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
              elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
              elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
              else{$in[$i]=Compute("(-inf,$b[$i]]");}
              };
            </pg-code>
            <statement>
              <p permid="KCw">
                For each interval expressed in the number lines,
                give the interval notation and set-builder notation.
              </p>
              <instruction>
                Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
              </instruction>
              <p permid="qJF">
                <ol label="a." cols="3" permid="tLp">
                  <li permid="mQK">
                    <sidebyside margins="0%" widths="40%" permid="FLm">
                      <image pg-name="$nl[0]"/>
                    </sidebyside>
                    <p permid="dbz">
                      In set-builder notation: <var name="$sb[0]" width="20" />
                    </p>
                    <p permid="JiI">
                      In interval notation: <var name="$in[0]" width="20" />
                    </p>
                  </li>
                  <li permid="SXT">
                    <sidebyside margins="0%" widths="40%" permid="lSv">
                      <image pg-name="$nl[1]"/>
                    </sidebyside>
                    <p permid="ppR">
                      In set-builder notation: <var name="$sb[1]" width="20" />
                    </p>
                    <p permid="Vxa">
                      In interval notation: <var name="$in[1]" width="20" />
                    </p>
                  </li>
                  <li permid="zfc">
                    <sidebyside margins="0%" widths="40%" permid="RZE">
                      <image pg-name="$nl[2]"/>
                    </sidebyside>
                    <p permid="BEj">
                      In set-builder notation: <var name="$sb[2]" width="20" />
                    </p>
                    <p permid="hLs">
                      In interval notation: <var name="$in[2]" width="20" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
              %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
              %right=(oi=>')',ci=>')',io=>')',ic=>']');
              @type=('oi','ci','io','ic')[NchooseK(4,3)];
              @ticks = ();
              for my $j (-5..5) {push(@ticks,$j);};
              for my$i(0,1,2){
              $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(5.5,0,'black',1);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(-5.5,0,'black',1);
              $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
              for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
              $nl[$i]->h_ticks(0,'black',@ticks);
              };
              $shadingoffset = 0.5;
              for my$i(0..2){
              if($type[$i]eq'oi' or $type[$i]eq'ci'){
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
              }else{
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
              };
              if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
              };
              InequalitySetBuilder::UseVerticalSuchThat();
              Context("InequalitySetBuilder-Only");
              for my$i(0..2){
              if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
              elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
              elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
              else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
              };
              Context("Interval");
              Context()->flags->set("formatStudentAnswer"=>'parsed');
              for my$i(0..2){
              if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
              elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
              elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
              else{$in[$i]=Compute("(-inf,$b[$i]]");}
              };
            </pg-code>
            <statement>
              <p permid="WQO">
                For each interval expressed in the number lines,
                give the interval notation and set-builder notation.
              </p>
              <instruction>
                Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
              </instruction>
              <p permid="CXX">
                <ol label="a." cols="3" permid="ZSy">
                  <li permid="fml">
                    <sidebyside margins="0%" widths="40%" permid="ygN">
                      <image pg-name="$nl[0]"/>
                    </sidebyside>
                    <p permid="NSB">
                      In set-builder notation: <var name="$sb[0]" width="20" />
                    </p>
                    <p permid="tZK">
                      In interval notation: <var name="$in[0]" width="20" />
                    </p>
                  </li>
                  <li permid="Ltu">
                    <sidebyside margins="0%" widths="40%" permid="enW">
                      <image pg-name="$nl[1]"/>
                    </sidebyside>
                    <p permid="agT">
                      In set-builder notation: <var name="$sb[1]" width="20" />
                    </p>
                    <p permid="Goc">
                      In interval notation: <var name="$in[1]" width="20" />
                    </p>
                  </li>
                  <li permid="rAD">
                    <sidebyside margins="0%" widths="40%" permid="Kvf">
                      <image pg-name="$nl[2]"/>
                    </sidebyside>
                    <p permid="mvl">
                      In set-builder notation: <var name="$sb[2]" width="20" />
                    </p>
                    <p permid="SCu">
                      In interval notation: <var name="$in[2]" width="20" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Equations and Inequalities as True/False Statements</title>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ40.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ40.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ80.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ80.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication40.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication40.pg" />
      </exercise>
    </subexercises>

    <subexercises>
      <title>Solving One-Step Equations</title>
      <exercisegroup cols="3">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract60.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract60.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract160.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract160.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion30.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion30.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv90.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv90.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Solving One-Step Inequalities</title>
      <exercisegroup cols="3">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality41.pg"/>
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality41.pg"/>
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality50.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality50.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality70.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality70.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality110.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality110.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality120.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality120.pg" />
        </exercise>
      </exercisegroup>

      <exercisegroup>
        <title>Algebraic Properties and Simplifying Expressions</title>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyMultiplication10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyMultiplication10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition20.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty10.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty50.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty50.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty51.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty51.pg" />
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->reduction->set('(-x)-y'=>0);
              Context()->reduction->set('(-x)+y'=>0);
              @a=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
              @b=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
              $left=Formula("$a[0]($a[1]x+$a[2])");
              $right=Formula("$b[0]($b[1]x+$b[2])");
              $unsimplified=$left+$right;
              $unsimplified=$unsimplified->reduce;
              $simplified=Formula("($a[0]*$a[1]+$b[0]*$b[1])*x+($a[0]*$a[2]+$b[0]*$b[2])")->reduce;
              $leftdist=Formula("$a[0]*$a[1]x+$a[0]*$a[2]")->reduce;
              $rightdist=Formula("$b[0]*$b[1]x+$b[0]*$b[2]")->reduce;
              $termsrearranged=Formula("$a[0]*$a[1]x+$b[0]*$b[1]x+$a[0]*$a[2]+$b[0]*$b[2]")->reduce;
              Context("LimitedPolynomial-Strict");
              Context()->reduction->set('(-x)-y'=>0);
              Context()->reduction->set('(-x)+y'=>0);
              $simplified=Formula("$simplified");
            </pg-code>
            <statement>
              <p permid="exJ">
                Fully simplify <m><var name="$unsimplified" /></m>.
              </p>
              <p permid="KES">
                <var name="$simplified" width="15" />
              </p>
            </statement>
            <solution permid="Poy">
              <p permid="JUY">
                <md permid="TDf">
                  <mrow><var name="$unsimplified" />\amp=<var name="$leftdist" />+<var name="$rightdist" /></mrow>
                  <mrow>\amp=<var name="$termsrearranged" /></mrow>
                  <mrow>\amp=<var name="$simplified" /></mrow>
                </md>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork>
            <pg-code>
              Context("Numeric");
              Context()->reduction->set('(-x)-y'=>0);
              Context()->reduction->set('(-x)+y'=>0);
              @a=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
              @b=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
              $left=Formula("$a[0]($a[1]x+$a[2])");
              $right=Formula("$b[0]($b[1]x+$b[2])");
              $unsimplified=$left+$right;
              $unsimplified=$unsimplified->reduce;
              $simplified=Formula("($a[0]*$a[1]+$b[0]*$b[1])*x+($a[0]*$a[2]+$b[0]*$b[2])")->reduce;
              $leftdist=Formula("$a[0]*$a[1]x+$a[0]*$a[2]")->reduce;
              $rightdist=Formula("$b[0]*$b[1]x+$b[0]*$b[2]")->reduce;
              $termsrearranged=Formula("$a[0]*$a[1]x+$b[0]*$b[1]x+$a[0]*$a[2]+$b[0]*$b[2]")->reduce;
              Context("LimitedPolynomial-Strict");
              Context()->reduction->set('(-x)-y'=>0);
              Context()->reduction->set('(-x)+y'=>0);
              $simplified=Formula("$simplified");
            </pg-code>
            <statement>
              <p permid="qMb">
                Fully simplify <m><var name="$unsimplified" /></m>.
              </p>
              <p permid="WTk">
                <var name="$simplified" width="15" />
              </p>
            </statement>
            <solution permid="vvH">
              <p permid="qch">
                <md permid="zKo">
                  <mrow><var name="$unsimplified" />\amp=<var name="$leftdist" />+<var name="$rightdist" /></mrow>
                  <mrow>\amp=<var name="$termsrearranged" /></mrow>
                  <mrow>\amp=<var name="$simplified" /></mrow>
                </md>
              </p>
            </solution>
          </webwork>
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Modeling with Equations and Inequalities</title>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation20.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation20.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation30.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation30.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation60.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation60.pg" />
      </exercise>

      <exercisegroup cols="2">
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath65.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath65.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath70.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath70.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath110.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath110.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath130.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath130.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath170.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath170.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>
  </exercises>
</section>

