<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="section-multiplying-polynomials" permid="yJm">
  <title>Multiplying Polynomials</title>
  <objectives permid="beR">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="qXJ">
      <li permid="sMW">
        <xref ref="mth65-add-subtract-multiply-square-polynomials" />
      </li>
    </ul>
  </objectives>

  <introduction permid="ntj">
    <p permid="lpO">
      Previously, we have learned to multiply monomials in <xref ref="section-exponent-rules">Section</xref> (such as
      <m>(4xy)\left(3x^2\right)</m>) and to add and subtract polynomials in <xref ref="section-adding-and-subtracting-polynomials">Section</xref>
      (such as <m>(4x^2-3x)+(5x^2+x-2)</m>).
      In this section, we will learn how to multiply polynomials.
    </p>

    <figure permid="RwX">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-f68uz_9tWNiLf9GRkurveh" />
    </figure>

    <example xml:id="example-revenue" permid="Hma">
      <title>Revenue</title>
            <!-- There was an initial intent to thread this example with the production/revenue/profit example from section-adding-and-subtracting-polynomials. The units didn't match though, and in the end that example was changed to ketchup instead of jam, as opposed to aligning the two.-->
      <p permid="rfa">
        Avery owns a local organic jam company that currently sells about <m>1500</m> jars a month at a price of <m>\$13</m> per jar.
        Avery has found that every time they raise the price by <m>25</m> cents a jar,
        they will sell <m>50</m> fewer jars of jam each month.
      </p>

      <p permid="Xmj">
        In general, this company's revenue can be calculated by multiplying the cost per jar by the total number of jars of jam sold.
      </p>

      <p permid="Dts">
        If we let <m>x</m> represent the number of <m>25</m>-cent increases in the price,
        then the price per jar will be the current price of thirteen dollars/jar plus <m>x</m> times <m>0.25</m> dollars/jar,
        or <m>13+0.25x</m>.
      </p>

      <p permid="jAB">
        Continuing with <m>x</m> representing the number of <m>25</m>-cent increases in the price,
        we know the company will sell <m>50</m> fewer jars each time the price increases by <m>25</m> cents.
        The number of jars the company will sell will be the <m>1500</m> they currently sell each month,
        minus <m>50</m> jars times <m>x</m>,
        the number of price increases.
        This gives us the expression
        <m>1500-50x</m> to represent how many jars the company will sell after <m>x</m> <m>25</m>-cent price increases.
      </p>

      <p permid="PHK">
        Combining this, we can now write a formula for our revenue model:
        <md permid="syO">
          <mrow>\text{revenue} \amp= \left(\text{price per item}\right)\left(\text{number of items sold}\right)</mrow>
          <mrow>R \amp= \left(13+0.25x\right)\left(1500-50x\right)</mrow>
        </md>
      </p>

      <p permid="vOT">
        To simplify the expression <m>\left(13+0.25x\right)\left(1500-50x\right)</m>,
        we'll need to multiply <m>13+0.25x</m> by <m>1500-50x</m>.
        In this section,
        we'll learn how to multiply these two expressions that each have multiple terms.
      </p>
    </example>
  </introduction>

  <subsection permid="eQv">
    <title>Review of the Distributive Property</title>
    <p permid="NwY">
      The first step in almost every polynomial multiplication exercise will be a step of distribution.
      Let's quickly review the distributive property from <xref ref="section-simplifying-expressions">Section</xref>,
      which states that <m>a(b+c)=ab+ac</m> where <m>a, b</m>,
      and <m>c</m> are real numbers or variable expressions.
    </p>

    <p permid="tEh">
      When we multiply a monomial with a binomial,
      we apply this property by distributing the monomial to each term in the binomial.
      For example,
      <md permid="YFX">
        <mrow>\highlight{-4x}(3x^2+5) \amp= \multiplyleft{(-4x)}\left(3x^2\right)+\multiplyleft{(-4x)}(5)</mrow>
        <mrow>\amp=-12x^3-20x</mrow>
      </md>
    </p>

    <p permid="ZLq">
      A visual approach to the distributive property is to treat the product as finding a rectangle's area.
      Such rectangles are referred to as
      <term>generic rectangles</term>
          <idx><h>generic rectangles</h></idx>
      and they can be used to model polynomial multiplication.
    </p>

    <figure permid="SgR">
      <caption>A Generic Rectangle Modeling <m>2x(3x+4)</m></caption>
      <image width="40%" permid="ckx">
        <description>a rectangle with two regions; the region on the left indicates 2x*3x=6x^2; the region on the right indicates that 2x*4=8x; together they add up to 6x^2+8x</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (1,0) rectangle (5,1);
                    \draw (3,0) -- (3,1);
                    \draw (0.7,0.5) node {$2x$};
                    \draw (2,1.35) node {$3x$};
                    \draw (4,1.35) node {$4$};
                    \draw (2,0.5) node {$2x\cdot3x$};
                    \draw (4,0.5) node {$2x\cdot4$};
                \end{tikzpicture}]]>
            </latex-image>
      </image>

    </figure>

    <p permid="FSz">
      The big rectangle consists of two smaller rectangles.
      The big rectangle's area is <m>2x(3x+4)</m>,
      and the sum of those two smaller rectangles is <m>2x\cdot3x+2x\cdot4</m>.
      Since the sum of the areas of those two smaller rectangles is the same as the bigger rectangle's area, we have:
      <md permid="ENg">
        <mrow>2x(3x+4) \amp= 2x\cdot3x+2x\cdot4</mrow>
        <mrow>\amp= 6x^2+8x</mrow>
      </md>
      Generic rectangles are frequently used to visualize the distributive property.
    </p>
<!--         <example>
            <statement>
                <p>Multiply the following.<ol>
                    <li><p><m> 2x ( 3x + 5y ) </m></p></li>
                    <li><p><m> -7x^2 ( 4x^4 - 5x^3 + 2x ) </m></p></li>
                    <li><p><m> -2xy ( 3x^2y - 5xy^2 -9xy ) </m></p></li>
                </ol></p>
            </statement>
            <solution>
                <p>Once we distribute the monomial through the polynomial, we finish by multiplying the monomial pairs together and combining any like terms.<ol>
                    <li><p><md>
                       <mrow>  2x ( 3x + 5y ) \amp= \highlight{2x\cdot{}}\left(3x\right) + \highlight{2x\cdot{}}\left(5y\right) </mrow>
                       <mrow>   \amp= 6x^2 + 10xy </mrow>
                    </md></p></li>
                    <li><p><md>
                       <mrow> \amp -7x^2 \left( 4x^4 - 5x^3 + 2x \right)</mrow>
                       <mrow> \amp= \highlight{ -7x^2 \cdot{}} \left(4x^4\right)  + \highlight{ \left(-7x^2\right) \cdot{}}\left(-5x^3\right)+ \highlight{ \left(-7x^2\right) \cdot{}}\left(2x\right) </mrow>
                       <mrow>   \amp= -28x^6 + 35x^5 - 14x^3 </mrow>
                    </md></p></li>
                    <li><p><md>
                       <mrow>\amp  -2xy \left( 3x^2y - 5xy^2 -9xy \right)</mrow>
                       <mrow> \amp= \highlight{ -2xy  \cdot{}} \left(3x^2y\right)   + \highlight{ \left(-2xy \right) \cdot{}}\left(- 5xy^2 \right)+ \highlight{ \left(-2xy \right) \cdot{}}\left(-9xy\right) </mrow>
                       <mrow>   \amp= -6x^3y^2 + 10x^2y^3 + 18x^2y^2 </mrow>
                    </md></p></li>
                </ol>In these examples, it turned out that there weren't any like terms to combine at the end of our work.</p>
            </solution>
        </example> -->
<!--TODO: move this to MTH 60 simplifying expressions section-->
<!--         <example>
            <statement>
                <p>A rectangle's length is <m>4</m> meters longer than its width. Assume its width is <m>w</m> meters. Use an expanded polynomial to model the rectangle's area.</p>
            </statement>
            <solution>
                <p>Since the rectangle's length is <m>4</m> meters longer than its width, we can model its length by <m>w+4</m> meters. The rectangle's area would be:<md>
                    <mrow>A\amp=lw</mrow>
                    <mrow>\amp=(w+4)(w)</mrow>
                    <mrow>\amp=w^2+4w</mrow>
                </md>The rectangle's area can be modeled by <m>w^2+4w</m> square meters.</p>
                <p>In the second line of work above, we should recognize that <m>(w+4)(w)</m> is equivalent to <m>w(w+4)</m>. Whether the <m>w</m> is written before or after the binomial, we still are able to use distribution to sipmlify the product.</p>
            </solution>
        </example> -->
    <p permid="lZI">
      Multiplying a monomial with a polynomial involves two steps:
      distribution and monomial multiplication.
      We also need to rely on the <xref ref="list-exponent-rules">rules of exponents</xref> when simplifying.
    </p>

    <exercise permid="Fis">
      <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar58.pg" />
    </exercise>

    <exercise permid="lpB">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication5.pg" />
    </exercise>

    <exercise permid="RwK">
      <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar75.pg" />
    </exercise>
<!--TODO: move this to MTH 60 distribution section-->
<!--         <exercise>
            <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication10.pg" />
        </exercise>
 -->
    <remark permid="Zbj">
      <p permid="FiF">
        We can use the distributive property when multiplying on either the left or the right.
        This means that we can state <m>a(b+c)=ab+ac</m>,
        or that <m>(b+c)a=ba+ca</m>, which is equivalent to <m>ab+ac</m>.
        As an example,
        <md permid="kUp">
          <mrow>(3x^2+5)\highlight{(-4x)} \amp= (3x^2)\multiplyright{(-4x)}+(5)\multiplyright{(-4x)}</mrow>
          <mrow>\amp=-12x^3-20x</mrow>
        </md>
      </p>
    </remark>
  </subsection>

  <subsection xml:id="subsection-approaches-to-multiplying-binomials" permid="KXE">
    <title>Approaches to Multiplying Binomials</title>
    <paragraphs permid="gFI">
      <title>Multiplying Binomials Using Distribution</title>
      <p permid="yoa">
        Whether we're multiplying a monomial with a polynomial or two larger polynomials together,
        the first step to carrying out the multiplication is a step of distribution.
        We'll start with multiplying binomials and then move to working with larger polynomials.
      </p>

      <p permid="evj">
        We know we can distribute the <m>3</m> in <m>(x+2)3</m> to obtain <m>(x+2)\multiplyright{3}=x\multiplyright{3}+2\multiplyright{3}</m>.
        We can actually distribute anything across <m>(x+2)</m>.
        For example:
        <me permid="Rby">
          (x+2)\cat=x\cdot \cat + 2\cdot \cat
        </me>
      </p>

      <p permid="KCs">
        With this in mind, we can begin multiplying
        <m>(x+2)(x+3)</m> by distributing the <m>(x+3)</m> across <m>(x+2)</m>:
        <me permid="xiH">
          (x+2)\highlight{(x+3)} = x\highlight{(x+3)} + 2\highlight{(x+3)}
        </me>
        To finish multiplying, we'll continue by distributing again,
        but this time across <m>(x+3)</m>:
        <md permid="dpQ">
          <mrow>(x+2)\highlight{(x+3)} \amp= x\highlight{(x+3)} + 2\highlight{(x+3)}</mrow>
          <mrow>\amp= x \cdot x + x \cdot 3 + 2 \cdot x +  2 \cdot 3</mrow>
          <mrow>\amp=x^2+3x+2x+6</mrow>
          <mrow>\amp=x^2+5x+6</mrow>
        </md>
      </p>

      <p permid="qJB">
        To multiply a binomial by another binomial,
        we simply had to repeat the step of distribution and simplify the resulting terms.
        In fact, multiplying any two polynomials will rely upon these same steps.
      </p>
    </paragraphs>

    <paragraphs permid="MMR">
      <title>Multiplying Binomials Using <acro>FOIL</acro></title>
      <p permid="WQK">
        While multiplying two binomials requires two applications of the distributive property,
        people often remember this distribution process using the mnemonic
        <term><acro>FOIL</acro></term>.
            <idx><h><acro>FOIL</acro></h></idx>
        <acro>FOIL</acro> refers to the pairs of terms from each binomial that end up distributed to each other.
      </p>

      <p permid="CXT">
        If we take another look at the example we just completed,
        <m>(x+2)(x+3)</m>,
        we can highlight how the <acro>FOIL</acro> process works. <acro>FOIL</acro> is the acronym for "First, Outer, Inner, Last".
        <md permid="JwZ">
          <mrow>(x+2)(x+3)\amp= (\overbrace{{x} \stackrel{}{\cdot} {x}}^{\text{F}}) + (\overbrace{{3} \stackrel{}{\cdot} {x}}^{\text{O}}) + (\overbrace{{2} \stackrel{}{\cdot} {x}}^{\text{I}}) + (\overbrace{{2} \stackrel{}{\cdot} {3}}^{\text{L}})</mrow>
          <mrow>\amp=x^2+3x+2x+6</mrow>
          <mrow>\amp=x^2+5x+6</mrow>
        </md>
        <dl permid="MFN">
          <li permid="mCl">
            <title>F: <m>x^2</m></title>
            <p permid="LeV">
              The <m>x^2</m> term was the result of the product of <em>first</em>
              terms from each binomial.
            </p>
          </li>

          <li permid="SJu">
            <title>O: <m>3x</m></title>
            <p permid="rme">
              The <m>3x</m> was the result of the product of the <em>outer</em>
              terms from each binomial.
              This was from the <m>x</m> in the front of the first binomial and the <m>3</m> in the back of the second binomial.
            </p>
          </li>

          <li permid="yQD">
            <title>I: <m>2x</m></title>
            <p permid="Xtn">
              The <m>2x</m> was the result of the product of the <em>inner</em>
              terms from each binomial.
              This was from the <m>2</m> in the back of the first binomial and the <m>x</m> in the front of the second binomial.
            </p>
          </li>

          <li permid="eXM">
            <title>L: <m>6</m></title>
            <p permid="DAw">
              The constant term <m>6</m> was the result of the product of the
              <em>last</em> terms of each binomial.
            </p>
          </li>
        </dl>
      </p>

      <figure permid="HHM">
        <caption>Using <acro>FOIL</acro> Method to multiply <m>(x+2)(x+3)</m></caption>
        <image width="30%" permid="IrG">
          <description>a diagram that shows how to multiply using FOIL; x*x + x*3 + 2*x + 6</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (0,4) node {$($};
                    \draw (0.25,4) node {$x$};
                    \draw (0.5,4) node {$+$};
                    \draw (0.75,4) node {$2$};
                    \draw (1,4) node {$)$};
                    \draw (1.25,4) node {$($};
                    \draw (1.5,4) node {$x$};
                    \draw (1.75,4) node {$+$};
                    \draw (2,4) node {$3$};
                    \draw (2.25,4) node {$)$};
                    \draw [->] (0.25,4.25) .. controls (0.5625,4.75) and (1.1875,4.75) .. (1.5,4.25);
                    \draw (0.7,4.8) node {F};
                    \draw [->] (0.25,4.25) .. controls (0.8125,4.55) and (1.5625,4.5) .. (2,4.25);
                    \draw (1.6,4.65) node {O};
                    \draw [->] (0.75,3.75) .. controls (0.9375,3.25) and (1.3125,3.25) .. (1.5,3.75);
                    \draw (1.1,3.1) node {I};
                    \draw [->] (0.75,3.75) .. controls (1.0625,3.45) and (1.6875,3.45) .. (2,3.75);
                    \draw (1.65,3.3) node {L};
                \end{tikzpicture}]]>
            </latex-image>
        </image>

      </figure>
    </paragraphs>

    <paragraphs permid="sUa">
      <title>Multiplying Binomials Using Generic Rectangles</title>
      <p permid="jfc">
        We can also approach this same example using the generic rectangle method.
        To use generic rectangles,
        we treat <m>x+2</m> as the base of a rectangle,
        and <m>x+3</m> as the height.
        Their product, <m>(x+2)(x+3)</m>,
        represents the rectangle's area.
        The next diagram shows how to set up generic rectangles to multiply <m>(x+2)(x+3)</m>.
      </p>

      <figure permid="nOV">
        <caption>Setting up Generic Rectangles to Multiply <m>(x+2)(x+3)</m></caption>
        <image width="40%" permid="oyP">
          <description>a two by two rectangle with the terms x and 2 above the columns and the terms x and 3 on the left side of the rows</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (1,0) rectangle (5,2);
                    \draw (1,1) -- (5,1);
                    \draw (3,0) -- (3,2);
                    \draw (2,2.25) node {$x$};
                    \draw (4,2.25) node {$2$};
                    \draw (0.5,1.5) node {$x$};
                    \draw (0.5,0.5) node {$3$};
                \end{tikzpicture}]]>
            </latex-image>
        </image>

      </figure>

      <p permid="Pml">
        The big rectangle consists of four smaller rectangles.
        We will find each small rectangle's area in the next diagram by the formula <m>\text{area}=\text{base}\cdot\text{height}</m>.
      </p>

      <figure permid="TWe">
        <caption>Using Generic Rectangles to Multiply <m>(x+2)(x+3)</m></caption>
        <image width="40%" permid="UFY">
          <description>the previous generic rectangles with the areas computed; x*x=x^2, x*2=2x, 3*x=3x and 3*2=6</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (1,0) rectangle (5,2);
                    \draw (1,1) -- (5,1);
                    \draw (3,0) -- (3,2);
                    \draw (2,2.25) node {$x$};
                    \draw (4,2.25) node {$2$};
                    \draw (0.5,1.5) node {$x$};
                    \draw (0.5,0.5) node {$3$};
                    \draw (2,1.5) node {$x^2$};
                    \draw (4,1.5) node {$2x$};
                    \draw (2,0.5) node {$3x$};
                    \draw (4,0.5) node {$6$};
                \end{tikzpicture}]]>
            </latex-image>
        </image>

      </figure>

      <p permid="vtu">
        To finish finding this product,
        we need to add the areas of the four smaller rectangles:
        <md permid="pEi">
          <mrow>(x+2)(x+3)\amp=x^2+3x+2x+6</mrow>
          <mrow>\amp=x^2+5x+6</mrow>
        </md>
      </p>
    </paragraphs>

    <p permid="bAD">
      Notice that the areas of the four smaller rectangles are exactly the same as the four terms we obtained using distribution,
      which are also the same four terms that came from the <acro>FOIL</acro> method.
      Both the <acro>FOIL</acro> method and generic rectangles approach are different ways to represent the distribution that is occurring.
    </p>

    <example permid="xDT">
      <statement>
        <p permid="bWc">
          Multiply <m>(2x-3y)(4x-5y)</m> using distribution.
        </p>
      </statement>
      <solution permid="TAs">
        <p permid="OXQ">
          To use the distributive property to multiply those two binomials,
          we'll first distribute the second binomial across <m>(2x-3y)</m>.
          Then we'll distribute again, and simplify the terms that result.
          <md permid="VLr">
            <mrow>(2x-3y)\highlight{(4x-5y)}\amp=2x\highlight{(4x-5y)}-3y\highlight{(4x-5y)}</mrow>
            <mrow>\amp=8x^2-10xy-12xy+15y^2</mrow>
            <mrow>\amp=8x^2-22xy+15y^2</mrow>
          </md>
        </p>
      </solution>
    </example>

    <example permid="dLc">
      <statement>
        <p permid="Idl">
          Multiply <m>(2x-3y)(4x-5y)</m> using <acro>FOIL</acro>.
        </p>
      </statement>
      <solution permid="zHB">
        <p permid="veZ">
          First, Outer, Inner, Last: Either with arrows on paper or mentally in our heads,
          we'll pair up the four pairs of monomials and multiply those pairs together.
          <md permid="BSA">
            <mrow>(2x-3y)(4x-5y)\amp=
            (\overbrace{{\stackrel{}{2x}}\cdot{4x}}^{\large\text{F}})+
            (\overbrace{{\stackrel{}{2x}}\cdot{(-5y)}}^{\large\text{O}})+
            (\overbrace{{\stackrel{}{-3y}}\cdot{4x}}^{\large\text{I}})+
            (\overbrace{{\stackrel{}{-3y}}\cdot{(-5y}}^{\large\text{L}})</mrow>
            <mrow>\amp=8x^2-10xy-12xy+15y^2</mrow>
            <mrow>\amp=8x^2-22xy+15y^2</mrow>
          </md>
        </p>
      </solution>
    </example>

    <example permid="JSl">
      <statement>
        <p permid="oku">
          Multiply <m>(2x-3y)(4x-5y)</m> using generic rectangles.
        </p>
      </statement>
      <solution permid="fOK">
        <p permid="bmi">
          We begin by drawing four rectangles and marking their bases and heights with terms in the given binomials:
        </p>

        <figure permid="THJ">
          <caption>Setting up Generic Rectangles to Multiply <m>(2x-3y)(4x-5y)</m></caption>
          <image width="40%" permid="ANh">
            <description>a two by two rectangle with the terms 2x and -3y above the columns and the terms 4x and -5y on the left of the rows</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (1,0) rectangle (5,2);
                    \draw (1,1) -- (5,1);
                    \draw (3,0) -- (3,2);
                    \draw (2,2.25) node {$2x$};
                    \draw (4,2.25) node {$-3y$};
                    \draw (0.5,1.5) node {$4x$};
                    \draw (0.5,0.5) node {$-5y$};
                \end{tikzpicture}]]>
            </latex-image>
          </image>

        </figure>

        <p permid="Htr">
          Next, we calculate each rectangle's area by multiplying its base with its height:
        </p>

        <figure permid="zOS">
          <caption>Using Generic Rectangles to Multiply <m>(2x-3y)(4x-5y)</m></caption>
          <image width="40%" permid="gUq">
            <description>the previous generic rectangles with the areas multiplied; 2x*4x=8x^2, 2x*-5y=-10xy, -3y*4x=-12xy and -3y*-5y=15y^2</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \draw (1,0) rectangle (5,2);
                    \draw (1,1) -- (5,1);
                    \draw (3,0) -- (3,2);
                    \draw (2,2.25) node {$2x$};
                    \draw (4,2.25) node {$-3y$};
                    \draw (0.5,1.5) node {$4x$};
                    \draw (0.5,0.5) node {$-5y$};
                    \draw (2,1.5) node {$8x^2$};
                    \draw (4,1.5) node {$-12xy$};
                    \draw (2,0.5) node {$-10xy$};
                    \draw (4,0.5) node {$15y^2$};
                \end{tikzpicture}]]>
            </latex-image>
          </image>

        </figure>

        <p permid="nAA">
          Finally, we add up all rectangles' area to find the product:
          <md permid="hZJ">
            <mrow>(2x-3y)(4x-5y)\amp=8x^2-10xy-12xy+15y^2</mrow>
            <mrow>\amp=8x^2-22xy+15y^2</mrow>
          </md>
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="reN">
    <title>More Examples of Multiplying Binomials</title>
    <p permid="Adn">
      When multiplying binomials,
      all of the approaches shown in <xref ref="subsection-approaches-to-multiplying-binomials">Subsection</xref> will have the same result.
      The <acro>FOIL</acro> method is the most direct and will be used in the examples that follow.
    </p>

    <exercise permid="CnM">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication75.pg" seed="2"/>
    </exercise>

    <exercise permid="iuV">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication115.pg" seed="2"/>
    </exercise>

    <example xml:id="example-revenue-multiply" permid="pZu">
      <statement>
        <p permid="UrD">
          Multiply and simplify the formula for Avery's jam company's revenue, <m>R</m>
          (in dollars),
          from <xref ref="example-revenue">Example</xref>
          where <m>R= (13+0.25x)(1500-50x)</m> and <m>x</m> represents the number of 25-cent price increases to the selling price of a jar of jam.
        </p>
      </statement>
      <solution permid="LVT">
        <p permid="fWb">
          To multiply this, we'll use <acro>FOIL</acro>:
          <md permid="OgS">
            <mrow>R \amp= \left(13+0.25x\right)\left(1500-50x\right)</mrow>
            <mrow>\amp= \left(13\cdot1500\right) + \left(13 \cdot (-50x)  \right) + \left( 0.25x \cdot 1500 \right) + \left( 0.25x \cdot (-50x) \right)</mrow>
            <mrow>\amp= 19500  - 650x + 375x - 12.5x^2</mrow>
            <mrow>\amp= -12.5x^2 - 275x + 19500</mrow>
          </md>
        </p>
      </solution>
    </example>

    <example xml:id="example-multiplying-binomials-artist-income" permid="WgD">
      <statement>
        <p permid="AyM">
          Tyrone is an artist and he sells each of his paintings for <m>\$200</m>.
          Currently, he can sell <m>100</m> paintings per year.
          Thus, his annual income from paintings is <m>200\cdot100=20000</m> dollars.
          He plans to raise the price.
          However, for each <dollar /><m>20</m> price increase per painting,
          his customers would buy <m>5</m> fewer paintings annually.
        </p>

        <p permid="gFV">
          Assume Tyrone would raise the price of his paintings <m>x</m> times,
          each time by <dollar /><m>20</m>.
          Use an expanded polynomial to represent his new income per year.
        </p>
      </statement>
      <solution permid="sdc">
        <p permid="Mdk">
          Currently, each painting costs <dollar /><m>200</m>.
          After raising the price <m>x</m> times,
          each time by <dollar /><m>20</m>,
          each painting’s new price would be <m>200+20x</m> dollars.
        </p>

        <p permid="skt">
          Currently, Tyrone sells <m>100</m> paintings per year.
          After raising the price <m>x</m> times,
          each time selling <m>5</m> fewer paintings,
          he would sell <m>100-5x</m> paintings per year.
        </p>

        <p permid="YrC">
          His annual income can be calculated by multiplying each painting’s price by the number of paintings he would sell:
          <md permid="uob">
            <mrow>\text{annual income}\amp=(200+20x)(100-5x)</mrow>
            <mrow>\amp=200(100)+200(-5x)+20x(100)+20x(-5x)</mrow>
            <mrow>\amp=20000-1000x+2000x-100x^2</mrow>
            <mrow>\amp=-100x^2+1000x+20000</mrow>
          </md>
          After raising the price <m>x</m> times,
          each time by <dollar /><m>20</m>, Tyrone’s annual income from paintings would be <m>-100x^2+1000x+20000</m> dollars.
        </p>
      </solution>
    </example>
  </subsection>
<!--TODO: this section needs at least one example and some exercises with: constant x bi x bi, such as 3(x+4)(x-7)-->
  <subsection permid="XlW">
    <title>Multiplying Polynomials Larger Than Binomials</title>
    <p permid="gkw">
      The foundation for multiplying any pair of polynomials is distribution and monomial multiplication.
      Whether we are working with binomials, trinomials,
      or larger polynomials, the process is fundamentally the same.
    </p>

    <example permid="OCe">
      <p permid="MNe">
        Multiply <m>\left( x+5 \right)\left( x^2-4x+6 \right)</m>.
      </p>

      <p permid="sUn">
        We can approach this product using either distribution generic rectangles.
        We cannot directly use the <acro>FOIL</acro> method,
        although it can be helpful to draw arrows to the six pairs of products that will occur.
      </p>

      <p permid="Zbw">
        Using the distributive property,
        we begin by distributing across <m>\left( x^2-4x+6 \right)</m>,
        perform a second step of distribution,
        and then combine like terms.
        <md permid="avk">
          <mrow>\left(x+5\right)\highlight{\left( x^2-4x+6 \right)}
          \amp= x\highlight{\left( x^2-4x+6 \right)}+5\highlight{\left( x^2-4x+6 \right)}</mrow>
          <mrow>\amp= x\cdot x^2 - x\cdot 4x +x\cdot 6
          +5\cdot x^2 - 5\cdot 4x +5\cdot 6</mrow>
          <mrow>\amp= x^3 -4x^2 +6x +5x^2 -20x +30</mrow>
          <mrow>\amp= x^3+x^2-14x+30</mrow>
        </md>
<!--             <md>
                <mrow>\left( \highlight{x+3} \right)\left( x^2-4x+6 \right)
                    \amp= x^2\highlight{\left( x+3 \right)} -4x\highlight{\left( x+3 \right)}+6\highlight{\left( x+3 \right)}  </mrow>
                <mrow> \amp= x^2\cdot x + x^2\cdot 3
                            -4x\cdot x -4x\cdot3
                            +6\cdot x + 6\cdot3 </mrow>
                <mrow> \amp= x^3 +3x^2 -4x^2 -12x +6x + 18 </mrow>
                <mrow> \amp= x^3-x^2-6x+18 </mrow>
            </md>
 -->
      </p>
    </example>

    <p permid="MrF">
      With the foundation of monomial multiplication and understanding how distribution applies in this context,
      we are able to find the product of any two polynomials.
    </p>

    <exercise permid="uJn">
      <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar145.pg" seed="2"/>
    </exercise>
  </subsection>

  <exercises permid="Dtf">
    <exercisegroup cols="3" permid="jAo">
      <title>Review and Warmup</title>
      <exercise permid="aQw">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication0.pg" />
      </exercise>

      <exercise permid="GXF">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication0.pg" />
      </exercise>

      <exercise permid="neO">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication30.pg" />
      </exercise>

      <exercise permid="TlX">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication30.pg" />
      </exercise>

      <exercise permid="ztg">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication45.pg" />
      </exercise>

      <exercise permid="fAp">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication45.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="PHx">

      <exercise permid="LHy">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="xEg">
                Count the number of terms in each expression.

                <ol label="a." permid="XeS">
                  <li permid="YUf">
                    <p permid="jHF">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="vVX">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="Fbo">
                    <p permid="cdg">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Ikp">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="lix">
                    <p permid="ory">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="UyH">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="RpG">
                    <p permid="AFQ">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="gMZ">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Ykl">
              <p permid="EyL">
                <ol label="a." permid="ZZy">
                  <li permid="xwP">
                    <p permid="MUi">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="dDY">
                    <p permid="tbr">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="JLh">
                    <p permid="ZiA">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="pSq">
                    <p permid="FpJ">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="rOH">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="dLp">
                Count the number of terms in each expression.

                <ol label="a." permid="Dmb">
                  <li permid="VZz">
                    <p permid="lwS">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="REb">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="CgI">
                    <p permid="xLk">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="dSt">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="inR">
                    <p permid="JZC">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="qgL">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="Ova">
                    <p permid="WnU">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Cvd">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Eru">
              <p permid="kFU">
                <ol label="a." permid="GgH">
                  <li permid="uCj">
                    <p permid="iCm">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="aJs">
                    <p permid="OJv">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="GQB">
                    <p permid="uQE">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="mXK">
                    <p permid="aXN">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="XVQ">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="JSy">
                List the terms in each expression.

                <ol label="a." permid="jtk">
                  <li permid="TeT">
                    <p permid="HeW">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="nmf">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="zmc">
                    <p permid="Tto">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="zAx">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="ftl">
                    <p permid="fHG">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="LOP">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="LAu">
                    <p permid="rVY">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Ydh">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="kyD">
              <p permid="QNd">
                <ol label="a." permid="mnQ">
                  <li permid="rHD">
                    <p permid="Ekq">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="XOM">
                    <p permid="krz">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="DVV">
                    <p permid="QyI">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="kde">
                    <p permid="wFR">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="EcZ">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="pZH">
                List the terms in each expression.

                <ol label="a." permid="PAt">
                  <li permid="Qkn">
                    <p permid="cNa">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="IUj">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="wrw">
                    <p permid="pbs">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="ViB">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="cyF">
                    <p permid="BpK">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="hwT">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="IFO">
                    <p permid="NEc">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="tLl">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="QFM">
              <p permid="wUm">
                <ol label="a." permid="SuZ">
                  <li permid="oMX">
                    <p permid="ZSu">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="UUg">
                    <p permid="FZD">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="Bbp">
                    <p permid="mgM">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="hiy">
                    <p permid="SnV">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="kki">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="WgQ">
                List the terms in each expression.

                <ol label="a." permid="vHC">
                  <li permid="NpH">
                    <p permid="yve">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="eCn">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="twQ">
                    <p permid="KJw">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="qQF">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="ZDZ">
                    <p permid="WXO">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="DeX">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="FLi">
                    <p permid="jmg">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Ptp">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="wMV">
              <p permid="dbv">
                <ol label="a." permid="yCi">
                  <li permid="lSr">
                    <p permid="vAy">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="RZA">
                    <p permid="bHH">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="ygJ">
                    <p permid="HOQ">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="enS">
                    <p permid="nVZ">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="Qrr">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="CnZ">
                List the terms in each expression.

                <ol label="a." permid="bOL">
                  <li permid="Kvb">
                    <p permid="Udi">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="Akr">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="qCk">
                    <p permid="grA">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="MyJ">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="WJt">
                    <p permid="sFS">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="YNb">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="CQC">
                    <p permid="EUk">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="lbt">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="cUe">
              <p permid="JiE">
                <ol label="a." permid="eJr">
                  <li permid="iXL">
                    <p permid="RiC">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="PeU">
                    <p permid="xpL">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="vmd">
                    <p permid="dwU">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="btm">
                    <p permid="JEd">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="wyA">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="ivi">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="OCr">
                <ol label="a." permid="HVU">
                  <li permid="HAv">
                    <p permid="pLm">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="VSv">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="nHE">
                    <p permid="BZE">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="igN">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="TON">
                    <p permid="OnW">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="uvf">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="zVW">
                    <p permid="aCo">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="GJx">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="cFJ">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="uJA">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="aQJ">
                <ol label="a." permid="odd">
                  <li permid="gdf">
                    <p permid="mQG">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="SXP">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Mko">
                    <p permid="zeY">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="fmh">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="srx">
                    <p permid="Ltq">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="rAz">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="YyG">
                    <p permid="XHI">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="DOR">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="IMS">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="GXS">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="nfb">
                <ol label="a." permid="Ukm">
                  <li permid="EFP">
                    <p permid="jWa">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="Qdj">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="kMY">
                    <p permid="wks">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="crB">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="QUh">
                    <p permid="IyK">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="oFT">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="xbq">
                    <p permid="UNc">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="AUl">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="oUb">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Tmk">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="ztt">
                <ol label="a." permid="Arv">
                  <li permid="diz">
                    <p permid="hbu">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="NiD">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="JpI">
                    <p permid="tpM">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="ZwV">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="pwR">
                    <p permid="FEe">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="lLn">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="VEa">
                    <p permid="RSw">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="xZF">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="vOG">
      <title>Multiplying Monomials with Binomials</title>
      <exercise permid="Vbk">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication0.pg" />
      </exercise>

      <exercise permid="Bit">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication0.pg" />
      </exercise>

      <exercise permid="hpC">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication5.pg" />
      </exercise>

      <exercise permid="NwL">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication5.pg" />
      </exercise>

      <exercise permid="tDU">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication10.pg" />
      </exercise>

      <exercise permid="ZLd">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication10.pg" />
      </exercise>

      <exercise permid="FSm">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication15.pg" />
      </exercise>

      <exercise permid="lZv">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication15.pg" />
      </exercise>

      <exercise width="wide" permid="SgE">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication20.pg" />
      </exercise>

      <exercise width="wide" permid="ynN">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication20.pg" />
      </exercise>

      <exercise permid="euW">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar65.pg" />
      </exercise>

      <exercise permid="KCf">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar65.pg" />
      </exercise>

      <exercise permid="qJo">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar70.pg" />
      </exercise>

      <exercise permid="WQx">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar70.pg" />
      </exercise>

      <exercise permid="CXG">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar75.pg" />
      </exercise>

      <exercise permid="jeP">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar75.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="bVP">
      <title>Applications of Multiplying Monomials with Binomials</title>
      <exercise permid="PlY">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication10.pg" />
      </exercise>

      <exercise permid="vth">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication10.pg" />
      </exercise>

      <exercise permid="bAq">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication20.pg" />
      </exercise>

      <exercise permid="HHz">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication20.pg" />
      </exercise>

      <exercise permid="nOI">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication30.pg" />
      </exercise>

      <exercise permid="TVR">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication30.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="IcY">
      <title>Multiplying Binomials</title>
      <exercise permid="Ada">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication25.pg" />
      </exercise>

      <exercise permid="gkj">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication25.pg" />
      </exercise>

      <exercise permid="Mrs">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication30.pg" />
      </exercise>

      <exercise permid="syB">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication30.pg" />
      </exercise>

      <exercise permid="YFK">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication35.pg" />
      </exercise>

      <exercise permid="EMT">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication35.pg" />
      </exercise>

      <exercise permid="kUc">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication40.pg" />
      </exercise>

      <exercise permid="Rbl">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication40.pg" />
      </exercise>

      <exercise permid="xiu">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication60.pg" />
      </exercise>

      <exercise permid="dpD">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication60.pg" />
      </exercise>

      <exercise permid="JwM">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication65.pg" />
      </exercise>

      <exercise permid="pDV">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication65.pg" />
      </exercise>

      <exercise permid="VLe">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication70.pg" />
      </exercise>

      <exercise permid="BSn">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication70.pg" />
      </exercise>

      <exercise permid="hZw">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication75.pg" />
      </exercise>

      <exercise permid="OgF">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication75.pg" />
      </exercise>

      <exercise permid="unO">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication80.pg" />
      </exercise>

      <exercise permid="auX">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication80.pg" />
      </exercise>

      <exercise permid="GCg">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication85.pg" />
      </exercise>

      <exercise permid="mJp">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication85.pg" />
      </exercise>

      <exercise permid="SQy">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication115.pg" />
      </exercise>

      <exercise permid="yXH">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication115.pg" />
      </exercise>

      <exercise permid="feQ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar80.pg" />
      </exercise>

      <exercise permid="LlZ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar80.pg" />
      </exercise>

      <exercise permid="rti">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar85.pg" />
      </exercise>

      <exercise permid="XAr">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar85.pg" />
      </exercise>

      <exercise permid="DHA">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar90.pg" />
      </exercise>

      <exercise permid="jOJ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar90.pg" />
      </exercise>

      <exercise permid="PVS">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar95.pg" />
      </exercise>

      <exercise permid="wdb">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar95.pg" />
      </exercise>

      <exercise permid="ckk">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                $a = random(2,5,1);
                $b = non_zero_random(-10,10,1);
                do {$c = non_zero_random(-10,10,1);} until ($b!=$c);
                $bPlusC = $b+$c;
                $bc = $b*$c;
                $d = $a*$bPlusC;
                $e = $a*$bc;

                $binomial1 = Compute("$var+$b")->reduce;
                $binomial2 = Compute("$var+$c")->reduce;
                $s1 = Compute("$a*$var+$a*$b")->reduce;
                $s2 = Compute("$var**2+$bPlusC*$var+$bc")->reduce;

                $problem = Compute("$a*($var+$b)*($var+$c)")->reduce;
                $ans = Compute("$a*$var**2+$d*$var+$e")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="fAC">
                Multiply the polynomials.
              </p>

              <p permid="LHL">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="Jbn">
              <p permid="ppN">
                We could first distribute <m><var name="$a" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="GCt">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="VwW">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$a" /></m> into <m><var name="$s2" /></m>:
                <md permid="mJC">
                  <mrow><var name="$problem" />\amp=<var name="$a" />(<var name="$s2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="Irt">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                $a = -random(1,5,1);
                $b = non_zero_random(-10,10,1);
                do {$c = non_zero_random(-10,10,1);} until ($b!=$c);
                $bPlusC = $b+$c;
                $bc = $b*$c;
                $d = $a*$bPlusC;
                $e = $a*$bc;

                $binomial1 = Compute("$var+$b")->reduce;
                $binomial2 = Compute("$var+$c")->reduce;
                $s1 = Compute("$a*$var+$a*$b")->reduce;
                $s2 = Compute("$var**2+$bPlusC*$var+$bc")->reduce;
                $s3 = Compute("$a*($var**2+$bPlusC*$var+$bc)")->reduce;

                $problem = Compute("$a*($var+$b)*($var+$c)")->reduce;
                $ans = Compute("$a*$var**2+$d*$var+$e")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="rOU">
                Multiply the polynomials.
              </p>

              <p permid="XWd">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="piw">
              <p permid="BEf">
                We could first distribute <m><var name="$a" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="SQL">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="hLo">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$a" /></m> into <m><var name="$s2" /></m>:
                <md permid="yXU">
                  <mrow><var name="$problem" />\amp=<var name="$s3" /></mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="oyC">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                $b = non_zero_random(-10,10,1);
                do {$c = non_zero_random(-10,10,1);} until ($b!=$c);
                $bPlusC = $b+$c;
                $bc = $b*$c;

                $binomial1 = Compute("$var+$b")->reduce;
                $binomial2 = Compute("$var+$c")->reduce;
                $s1 = Compute("$var**2+$b*$var")->reduce;
                $s2 = Compute("$var**2+$bPlusC*$var+$bc")->reduce;

                $problem = Compute("$var*($var+$b)*($var+$c)")->reduce;
                $ans = Compute("$var**3+$bPlusC*$var**2+$bc*$var")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="Edm">
                Multiply the polynomials.
              </p>

              <p permid="kkv">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="VpF">
              <p permid="NSx">
                We could first distribute <m><var name="$var" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="ffd">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="tZG">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$var" /></m> into <m><var name="$s2" /></m>:
                <md permid="Lmm">
                  <mrow><var name="$problem" />\amp=<var name="$var" />(<var name="$s2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="UFL">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                do {$a = random(-5,5,1);} until ($a!=1);
                $b = non_zero_random(-10,10,1);
                do {$c = non_zero_random(-10,10,1);} until ($b!=$c);
                $bPlusC = $b+$c;
                $bc = $b*$c;
                $d = $a*$bPlusC;
                $e = $a*$bc;

                $binomial1 = Compute("$var+$b")->reduce;
                $binomial2 = Compute("$var+$c")->reduce;
                $s1 = Compute("$a*$var**2+$a*$b*$var")->reduce;
                $s2 = Compute("$var**2+$bPlusC*$var+$bc")->reduce;
                $s3 = Compute("$a*($var**2+$bPlusC*$var+$bc)")->reduce;
                $s4 = Compute("$a*$var")->reduce;

                $problem = Compute("$a*$var*($var+$b)*($var+$c)")->reduce;
                $ans = Compute("$a*$var**3+$d*$var**2+$e*$var")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="QrE">
                Multiply the polynomials.
              </p>

              <p permid="wyN">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="BwO">
              <p permid="agP">
                We could first distribute <m><var name="$s4" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="rtv">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="GnY">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$a" /><var name="$var" /></m> into <m><var name="$s2" /></m>:
                <md permid="XAE">
                  <mrow><var name="$problem" />\amp=<var name="$s3" /></mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="AMU">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                do {$a = random(-5,5,1);} until ($a!=1);
                $b = random(2,5,1);
                do {$c = non_zero_random(-5,5,1);} until (gcd($b,abs($c))==1);
                $d = non_zero_random(-5,5,1);

                $ab = $a*$b;
                $ac = $a*$c;
                $cd = $c*$d;
                $e = $b*$d+$c;

                $binomial1 = Compute("$b*$var+$c")->reduce;
                $binomial2 = Compute("$var+$d")->reduce;
                $s1 = Compute("$ab*$var+$ac")->reduce;
                $s2 = Compute("$b*$var**2+$e*$var+$cd")->reduce;
                $s3 = Compute("$a*($b*$var**2+$e*$var+$cd)")->reduce;

                $problem = Compute("$a*($b*$var+$c)*($var+$d)")->reduce;
                $ans = Compute("$ab*$var**2+$a*$e*$var+$a*$cd")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="cFW">
                Multiply the polynomials.
              </p>

              <p permid="INf">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="hDX">
              <p permid="mvh">
                We could first distribute <m><var name="$a" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="DHN">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="SCq">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$a" /></m> into <m><var name="$s2" /></m>:
                <md permid="jOW">
                  <mrow><var name="$problem" />\amp=<var name="$s3"/></mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="gUd">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)-y','(-x)+y');
                $var = RandomVariableName(type=>'variable');
                Context()->variables->are($var=>'Real');

                do {$a = random(-5,5,1);} until ($a!=1);
                $b = random(2,5,1);
                do {$c = non_zero_random(-5,5,1);} until (gcd($b,abs($c))==1);
                $d = non_zero_random(-5,5,1);

                $ab = $a*$b;
                $ac = $a*$c;
                $cd = $c*$d;
                $e = $b*$d+$c;

                $binomial1 = Compute("$b*$var+$c")->reduce;
                $binomial2 = Compute("$var+$d")->reduce;
                $s1 = Compute("$ab*$var+$ac")->reduce;
                $s2 = Compute("$b*$var**2+$e*$var+$cd")->reduce;
                $s3 = Compute("$a*($b*$var**2+$e*$var+$cd)")->reduce;

                $problem = Compute("$a*($b*$var+$c)*($var+$d)")->reduce;
                $ans = Compute("$ab*$var**2+$a*$e*$var+$a*$cd")->reduce;
            </pg-code>
            </setup>
            <statement>
              <p permid="oUo">
                Multiply the polynomials.
              </p>

              <p permid="Vbx">
                <m><var name="$problem" />=</m><var name="$ans" width="10" />
              </p>
            </statement>
            <solution permid="NLg">
              <p permid="yJz">
                We could first distribute <m><var name="$a" /></m> into <m><var name="$binomial1" /></m> to get <m><var name="$s1" /></m>,
                and then multiply <m><var name="$s1" /></m> and <m><var name="$binomial2" /></m>:
                <md permid="PWf">
                  <mrow><var name="$problem" />\amp=(<var name="$s1" />)(<var name="$binomial2" />)</mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>

              <p permid="eQI">
                We could also first multiply <m><var name="$binomial1" /></m> and <m><var name="$binomial2" /></m> to get <m><var name="$s2" /></m>,
                and then distribute <m><var name="$a" /></m> into <m><var name="$s2" /></m>:
                <md permid="wdo">
                  <mrow><var name="$problem" />\amp=<var name="$s3"/></mrow>
                  <mrow>\amp=<var name="$ans" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="okh">
      <title>Applications of Multiplying Binomials</title>
      <exercise permid="Nbm">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication50.pg" />
      </exercise>

      <exercise permid="tiv">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication50.pg" />
      </exercise>

      <exercise permid="ZpE">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication40.pg" />
      </exercise>

      <exercise permid="FwN">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplicationApplication40.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="Urq">
      <title>Multiplying Larger Polynomials</title>
      <exercise width="wide" permid="lDW">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication125.pg" />
      </exercise>

      <exercise width="wide" permid="RLf">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication125.pg" />
      </exercise>

      <exercise permid="xSo">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication120.pg" />
      </exercise>

      <exercise permid="dZx">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication120.pg" />
      </exercise>
            <!-- seeds set to guarantee distinct versions -->
      <exercise width="wide" permid="KgG">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication145.pg" seed="114"/>
      </exercise>

      <exercise width="wide" permid="qnP">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication145.pg" seed="115" />
      </exercise>

      <exercise permid="WuY">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar145.pg" />
      </exercise>

      <exercise permid="CCh">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar145.pg" />
      </exercise>

      <exercise permid="iJq">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar160.pg" />
      </exercise>

      <exercise permid="OQz">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar160.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="Ayz">
      <title>Challenge</title>
      <exercise permid="uXI">
<!-- Kara's challenge problem -->
        <webwork>
            <setup>

             <pg-code>
             Context()->variables->are(x=>'Real',y=>'Real');

                 do {
                   $a = random(-15,-1,2);
                   $b = random(-10,-2,2);
                   $coefficient = $a + $b;
                 } until ($coefficient &lt; -7);
                 $axy = Formula("$a x y")->reduce;
                 $bxy = Formula("$b x y")->reduce;
                 $complete = Formula("$coefficient*x*y")->reduce;

                 $multians = MultiAnswer($axy, $bxy)->with(
                 singleResult => 1,
                     checker => sub {
                     my ( $correct, $student, $self ) = @_;
                     my ( $astu, $bstu ) = @{$student};
                     my ( $acor, $bcor ) = @{$correct};

                     if ( $astu == Formula("0")) {Value::Error('None of your values can be zero.')};
                     if ( $bstu == Formula("0")) {Value::Error('None of your values can be zero.')};
                     if ( $astu == Formula("1")) {Value::Error('None of your values can be one.')};
                     if ( $bstu == Formula("1")) {Value::Error('None of your values can be one.')};

                     if ($astu+$bstu != $complete) {return 0;} else {return 1};

                   }
                 );

                 do {
                   $c = random(-15,-1,2);
                   $d = random(-10,-2,2);
                   $expx = random(15,30,5);
                   $expy = random(2,10,1);
                   $coefficient2 = $c + $d;
                 } until ($coefficient2 &lt; -7);
                 $cexp = Formula("$c*(x**$expx)*(y**$expy)")->reduce;
                 $dexp = Formula("$d*(x**$expx)*(y**$expy)")->reduce;
                 $complete2 = Formula("$coefficient2*(x**$expx)*(y**$expy)");

                 $multians2 = MultiAnswer($cexp, $dexp)->with(
                 singleResult => 1,
                     checker => sub {
                     my ( $correct, $student, $self ) = @_;
                     my ( $cstu, $dstu ) = @{$student};
                     my ( $ccor, $dcor ) = @{$correct};

                     if ( $cstu == 0) {Value::Error('None of your values can be zero.')};
                     if ( $dstu == 0) {Value::Error('None of your values can be zero.')};
                     if ( $cstu == 1) {Value::Error('None of your values can be one.')};
                     if ( $dstu == 1) {Value::Error('None of your values can be one.')};

                     if ($cstu+$dstu != $complete2) {return 0;} else {return 1};

                   }
                 );

                 $coeff3 = list_random(2,3,5,7,11,13,17,19);
                 $exp1 = random(20,50,5);
                 $exp2 = random(10,30,10);
                 $exp3 = $exp1 + $exp2;
                 $expa = random(20,50,5);
                 $expb = random(10,30,10);
                 $expc = $expa + $expb;
                 $ans1 = Formula("(x**$exp1)");
                 $ans2 = Formula("(x**$exp2)");
                 $ans3 = Formula("(y**$expa)");
                 $ans4 = Formula("(y**$expb)");
                 $ans5 = Formula("$coeff3");
                 $complete3 = Formula("$coeff3*(x**$exp3)*(y**$expc)");

                 $multians3 = MultiAnswer($ans1, $ans2, $ans3, $ans4, $ans5)->with(
                 singleResult => 1,
                     checker => sub {
                     my ( $correct, $student, $self ) = @_;
                     my ( $ans1stu, $ans2stu, $ans3stu, $ans4stu, $ans5stu) = @{$student};
                     my ( $ans1cor, $ans2cor, $ans3cor, $ans4cor, $ans5cor ) = @{$correct};

                     if ( $ans1stu == 1) {Value::Error('None of your values can be one.')};
                     if ( $ans2stu == 1) {Value::Error('None of your values can be one.')};
                     if ( $ans3stu == 1) {Value::Error('None of your values can be one.')};
                     if ( $ans4stu == 1) {Value::Error('None of your values can be one.')};
                     if ( $ans5stu == 1) {Value::Error('None of your values can be one.')};

                     if ($ans1stu*$ans2stu*$ans3stu*$ans4stu*$ans5stu != $complete3) {return 0;} else {return 1};

                   }
                 );

            </pg-code>
            </setup>
            <statement>
              <p permid="BiG">
                Fill in the blanks with algebraic expressions that make the equation true.
                You may not use <m>0</m> or <m>1</m> in any of the blank spaces.
                An example is <m> \mathord{?} + \mathord{?} = 8x </m>,
                where one possible answer is <m> 3x + 5x = 8x </m>.
                There are infinitely many correct answers to this problem. <em>Be creative.</em>
                After finding a correct answer,
                see if you can come up with a different answer that is also correct.
              </p>

              <p permid="hpP">
                <ol label="a." permid="gyE">
                  <li permid="BLj">
                    <p permid="egO">
                      <var name="$multians" width="10"/> <m> + </m> <var name="$multians" width="10"/> <m> = <var name="$complete"/></m>
                    </p>
                  </li>

                  <li permid="hSs">
                    <p permid="KnX">
                      <var name="$multians2" width="10"/> <m> + </m> <var name="$multians2" width="10"/> <m> = <var name="$complete2"/></m>
                    </p>
                  </li>

                  <li permid="NZB">
                    <p permid="qvg">
                      <var name="$multians3" width="3"/> <m> \cdot </m> <var name="$multians3" width="3"/> <m> \cdot </m> <var name="$multians3" width="3"/> <m> \cdot </m> <var name="$multians3" width="3"/> <m> \cdot </m> <var name="$multians3" width="3"/> <m> = <var name="$complete3"/></m>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="tSp">
              <p permid="KXR">
                <ol label="a." permid="KQA">
                  <li permid="ugK">
                    <p permid="WCp">
                      Think about adding like terms.
                      One possibility is:
                      <m><var name="$axy"/> + <var name="$bxy"/> = <var name="$complete"/></m>.
                    </p>
                  </li>

                  <li permid="anT">
                    <p permid="CJy">
                      Think about adding like terms.
                      One possibility is:
                      <m><var name="$cexp"/> + <var name="$dexp"/> = <var name="$complete2"/></m>.
                    </p>
                  </li>

                  <li permid="Gvc">
                    <p permid="iQH">
                      Think about multiplying exponents.
                      One possibility is:
                      <m><var name = "$coeff3"/> \cdot <var name="$ans1"/> \cdot <var name="$ans2"/> \cdot <var name="$ans3"/> \cdot <var name="$ans4"/> = <var name="$complete3"/></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

    </exercisegroup>
  </exercises>
</section>

