<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="section-combining-like-terms" permid="jlK">
  <title>Combining Like Terms</title>
  <objectives permid="egs">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="KXv">
      <li permid="uJe">
        <xref ref="mth60-simplify-algebraic-expressions" />
      </li>
    </ul>
  </objectives>

  <introduction permid="KnB">
    <p permid="jON">
      In the last section we worked with algebraic expressions.
      In order to simplify algebraic expressions,
      it is useful to identify which quantities we can combine.
    </p>

    <figure permid="PVW">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-cBctr6w6PJujrhmaMydHzL" />
    </figure>
  </introduction>

  <subsection permid="PsT">
    <title>Identifying Terms</title>
    <p permid="BwS">
      In an algebraic expression, the <term>terms</term>
          <idx><h>term</h></idx>
      are the quantities that are added.
      For example, the expression <m>3x+2y</m> has two terms,
      which are <m>3x</m> and <m>2y</m>.
      The <term>coefficient</term> or
      <term>numerical coefficient</term>
          <idx><h>coefficient</h></idx>
      of a term is the number attached to the variable, by multiplication.
    </p>

    <example permid="AjV">
      <statement>
        <p permid="mJt">
          List the terms in the expression <m>2l+2w</m>.
        </p>
      </statement>
      <solution permid="quK">
        <p permid="nOM">
          The expression has two terms that are being added, <m>2l</m> and <m>2w</m>.
        </p>
      </solution>
    </example>

    <p permid="hEb">
      If there is any subtraction, we will rewrite the expression using addition.
      Here is an example of that.
    </p>

    <example permid="gre">
      <statement>
        <p permid="SQC">
          List the terms in the expression <m>-3x^2+5x-4</m>.
        </p>
      </statement>
      <solution permid="WBT">
        <p permid="TVV">
          We can rewrite this expression as
          <m>-3x^2+5x+(-4)</m> to see that the terms are <m>-3x^2</m>,
          <m>5x</m>,
          and <m>-4</m>.
          The last term is negative because subtracting is the same as adding the opposite.
        </p>
      </solution>
    </example>

    <example permid="Myn">
      <statement>
        <p permid="yXL">
          List the terms in the expression <m>3\,\text{cm}+2\,\text{cm}+3\,\text{cm}+2\,\text{cm}</m>.
        </p>
      </statement>
      <solution permid="CJc">
        <p permid="Ade">
          This expression has four terms:
          <quantity>
            <mag>3</mag><unit base="meter" prefix="centi"/>
          </quantity>,
          <quantity>
            <mag>2</mag><unit base="meter" prefix="centi"/>
          </quantity>,
          <quantity>
            <mag>3</mag><unit base="meter" prefix="centi"/>
          </quantity>, and
          <quantity>
            <mag>2</mag><unit base="meter" prefix="centi"/>
          </quantity>.
        </p>
      </solution>
    </example>

    <exercise permid="sFw">
      <webwork>
          <setup>

            <pg-code>
                Context("Numeric");
                Context()->variables->are(x=>'Real',z=>'Real');
                $terms = List("5x, -4x, 10z");
            </pg-code>
          </setup>
          <statement>
            <p permid="wdf">
              List the terms in the expression <m>5x-4x+10z</m>.
            </p>
            <instruction>
              Enter the terms separated by commas.
            </instruction>
            <p permid="cko">
              <var name="$terms" width="15" />
            </p>
          </statement>
          <solution permid="nAe">
            <p permid="gkn">
              The terms are <m>5x</m>, <m>-4x</m>, and <m>10z</m>.
            </p>
          </solution>
      </webwork>
    </exercise>
  </subsection>
<!--TODO: Alex, if time: add a visual introduction/explanation of how feet and square feet cannot combine-->
  <subsection permid="vAc">
    <title>Combining Like Terms</title>
    <p permid="NLk">
      In the examples above, you may have wanted to combine some of the terms.
      Look at the quantities below to see which ones you can add or subtract.

      <ol label="a." cols="3" permid="iuM">
        <li permid="aQn">
          <p permid="Bbg">
            <m>5\,\text{in}+20\,\text{in}</m>
          </p>
        </li>

        <li permid="GXw">
          <p permid="hip">
            <m>16\,\text{ft}-4\,\text{ft}^2</m>
          </p>
        </li>

        <li permid="neF">
          <p permid="Npy">
            <m>2\,\apple+5\,\apple</m>
          </p>
        </li>

        <li permid="TlO">
          <p permid="twH">
            <m>5\,\text{min}+50\,\text{ft}</m>
          </p>
        </li>

        <li permid="zsX">
          <p permid="ZDQ">
            <m>5\,\dog-2\,\cat</m>
          </p>
        </li>

        <li permid="LHp">
          <p permid="FKZ">
            <m>20\,\text{m}-6\,\text{m}</m>
          </p>
        </li>
      </ol>
    </p>

    <p permid="tSt">
      The terms that we can combine are called <term>like terms</term>.
          <idx><h>like term</h></idx>
      We can combine terms with the same units,
      but we cannot combine units such as minutes and feet or cats and dogs.
      We can combine the like terms by combining their coefficients.
      Here are the answers:

      <ol label="a." cols="3" permid="OBV">
        <li permid="rOy">
          <p permid="lSi">
            <m>5\,\text{in}+20\,\text{in}=25\,\text{in}</m>
          </p>
        </li>

        <li permid="XVH">
          <p permid="RZr">
            <m>16\,\text{ft}-4\,\text{ft}^2</m> cannot be simplified
          </p>
        </li>

        <li permid="EcQ">
          <p permid="ygA">
            <m>2\,\apple+5\,\apple=7\,\apple</m>
          </p>
        </li>

        <li permid="kjZ">
          <p permid="enJ">
            <m>5\,\text{min}+50\,\text{ft}</m> cannot be simplified
          </p>
        </li>

        <li permid="Qri">
          <p permid="KuS">
            <m>5\,\dog-2\,\cat</m> cannot be simplified
          </p>
        </li>

        <li permid="wyr">
          <p permid="qCb">
            <m>20\,\text{m}-6\,\text{m}=14\,\text{min}</m>
          </p>
        </li>
      </ol>
    </p>

    <p permid="ZZC">
<!--Note that we could combine units such as feet and inches if we convert one of the terms first. -->Now let's look at some examples that have variables in them.
    </p>

    <exercise permid="dwy">
      <webwork>
          <setup>

            <pg-code>
                $can = PopUp(['?','can','cannot'],1);
                $cannot = PopUp(['?','can','cannot'],2);
            </pg-code>
          </setup>
          <statement>
            <p permid="Irx">
              Which expressions have like terms that you can combine?

              <ol cols="2" permid="reE">
                <li permid="cFA">
                  <p permid="WJk">
                    <m>10x+3y</m> <var name="$cannot" form="popup" /> be combined.
                  </p>
                </li>

                <li permid="IMJ">
                  <p permid="CQt">
                    <m>4x-8x</m> <var name="$can" form="popup" /> be combined.
                  </p>
                </li>

                <li permid="oTS">
                  <p permid="iXC">
                    <m>9y-4y</m> <var name="$can" form="popup" /> be combined.
                  </p>
                </li>

                <li permid="Vbb">
                  <p permid="PeL">
                    <m>-6x+17z</m> <var name="$cannot" form="popup" /> be combined.
                  </p>
                </li>

                <li permid="Bik">
                  <p permid="vlU">
                    <m>-3x-7x</m> <var name="$can" form="popup" /> be combined.
                  </p>
                </li>

                <li permid="hpt">
                  <p permid="btd">
                    <m>5t+8t^2</m> <var name="$cannot" form="popup" /> be combined.
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution permid="THn">
            <p permid="Mrw">
              The terms that we can combine have the same variable part,
              including any exponents.

              <ol cols="2" permid="ppr">
                <li permid="NwC">
                  <p permid="HAm">
                    <m>10x+3y</m> cannot be combined.
                  </p>
                </li>

                <li permid="tDL">
                  <p permid="nHv">
                    <m>4x-8x=-4x</m>
                  </p>
                </li>

                <li permid="ZKU">
                  <p permid="TOE">
                    <m>9y-4y=5y</m>
                  </p>
                </li>

                <li permid="FSd">
                  <p permid="zVN">
                    <m>-6x+17z</m> cannot be combined.
                  </p>
                </li>

                <li permid="lZm">
                  <p permid="gcW">
                    <m>-3x-7x=-10x</m>
                  </p>
                </li>

                <li permid="Sgv">
                  <p permid="Mkf">
                    <m>5t+8t^2</m> cannot be combined.
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>

    <example permid="YMF">
      <statement>
        <p permid="feU">
          Simplify the expression <m>20x-16x+4y</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="iQl">
        <p permid="syF">
          This expression has two like terms,
          <m>20x</m> and <m>-16x</m>, which we can combine.
          <me permid="Svd">
            20x-16x+4y=4x+4y
          </me>
          Note that we cannot combine <m>4x</m> and <m>4y</m> because <m>x</m> and <m>y</m> represent different quantities.
        </p>
      </solution>
    </example>

    <example permid="ETO">
      <statement>
        <p permid="Lmd">
          Simplify the expression <m>100x+100x^2</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="OXu">
        <p permid="YFO">
          This expression cannot be simplified because the variable parts are not the same.
          We cannot add <m>x</m> and <m>x^2</m> just like we cannot add feet,
          a measure of length, and square feet, a measure of area.
        </p>
      </solution>
    </example>

    <example permid="laX">
      <statement>
        <p permid="rtm">
          Simplify the expression <m>-10r+2s-5t</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="veD">
        <p permid="EMX">
          This expression cannot be simplified because there are not any like terms.
        </p>
      </solution>
    </example>

    <example permid="Rig">
      <statement>
        <p permid="XAv">
          Simplify the expression <m>y+5y</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="blM">
        <p permid="kUg">
          This expression can be thought of as <m>1y+5y</m>.
          When we have a single <m>y</m>,
          the coefficient of <m>1</m> is not usually written.
          Now we have two like terms, <m>1y</m> and <m>5y</m>.
          We will add those together:
          <md permid="yCm">
            <mrow>x+5x\amp= 1x+5x</mrow>
            <mrow>\amp=6x</mrow>
          </md>
        </p>
      </solution>
    </example>

    <p permid="GgL">
      So far we have combined terms with whole numbers and integers,
      but we can also combine like terms when the coefficients are decimals
      (or fractions).
    </p>

    <example permid="xpp">
      <statement>
        <p permid="DHE">
          Simplify the expression <m>x-0.15x</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="HsV">
        <p permid="Rbp">
          Note that this expression can be rewritten as
          <m>1.00x-0.15x</m>, and combined like this:
          <md permid="eJv">
            <mrow>x-0.15x\amp=1.00x-0.15x</mrow>
            <mrow>\amp=0.85x</mrow>
          </md>
        </p>
      </solution>
    </example>

    <exercise permid="JDH">
      <webwork>
          <setup>

            <pg-code>
                    Context("Numeric");
                    Context()->noreduce('(-x)+y','(-x)-y');
                    Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                    Context()->operators->set(
                        '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                        '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                    );
                    $ans[0]=Formula("14x-7y");
                    $ans[1]=Formula("-7y+2x^2");
                    $ans[2]=Formula("1.25x");
                    $ans[3]=Formula("4x+1.5y-9z");
                    for $i (0..3) {
                        $evaluator[$i] = $ans[$i] -> cmp(
                           checker=>sub{
                              my ( $correct, $student, $ansHash ) = @_;
                              return 0 if $ansHash->{isPreview} || $correct != $student;
                              $student = $ansHash->{student_formula};
                              $correct = $correct->{original_formula} if defined $correct->{original_formula};
                              $student = Formula("$student"); $correct = Formula("$correct");
                              return 0 unless ($correct == $student);
                              Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                              delete $correct->{test_values}, $student->{test_values};
                              my $OK = (($correct == $student) or ($student == $correct));
                              Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                              Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                              return $OK;
                        });
                    }
            </pg-code>
          </setup>
          <statement>
            <p permid="oyG">
              Simplify each expression, if possible, by combining like terms.
            </p>
            <instruction>
              If the expression cannot be simplified further, just enter it as it is.
            </instruction>
            <p permid="UFP">
              <ol label="a." cols="2" permid="XlN">
                <li permid="ynE">
                  <p permid="sro">
                    <m>4x-7y+10x</m>
                  </p>

                  <p permid="Yyx">
                    <var name="$evaluator[0]" width="25" />
                  </p>
                </li>

                <li permid="euN">
                  <p permid="EFG">
                    <m>y-8y+2x^2</m>
                  </p>

                  <p permid="kMP">
                    <var name="$evaluator[1]" width="25" />
                  </p>
                </li>

                <li permid="KBW">
                  <p permid="QTY">
                    <m>x+0.25x</m>
                  </p>

                  <p permid="xbh">
                    <var name="$evaluator[2]" width="25" />
                  </p>
                </li>

                <li permid="qJf">
                  <p permid="diq">
                    <m>4x+1.5y-9z</m>
                  </p>

                  <p permid="Jpz">
                    <var name="$evaluator[3]" width="25" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution permid="zOw">
            <p permid="xiy">
              <ol label="a." permid="VwA">
                <li permid="WQo">
                  <p permid="pwI">
                    This expression has two like terms that can be combined to get <m>14x-7y</m>.
                  </p>
                </li>

                <li permid="CXx">
                  <p permid="VDR">
                    In this expression we can combine the <m>y</m> terms to get <m>-7y+2x^2</m>.
                  </p>
                </li>

                <li permid="jeG">
                  <p permid="BLa">
                    Rewrite this expression as
                    <m>1.00x+0.25x</m> and simplify to get <m>1.25x</m>.
                  </p>
                </li>

                <li permid="PlP">
                  <p permid="hSj">
                    This expression cannot be simplified further because there are not any like terms.
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>

    <remark>
      <title>The Difference Between Terms and Factors</title>
      <p permid="mnU">
        We have learned that terms are quantities that are added,
        such as <m>3x</m> and <m>-2x</m> in <m>3x-2x</m>.
        These are different than <term>factors</term>,
            <idx><h>factor</h></idx>
        which are parts that are multiplied together.
        For example, the term <m>2x</m> has two factors:
        <m>2</m> and <m>x</m>
        (with the multiplication symbol implied between them).
        The term <m>2\pi r</m> has three factors:
        <m>2</m>, <m>\pi</m>, and <m>r</m>.
      </p>
    </remark>
  </subsection>

  <exercises permid="bHl">
    <exercisegroup cols="3" permid="HOu">
      <title>Review and Warmup</title>
      <exercise permid="pKQ">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
      </exercise>

      <exercise permid="VRZ">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
      </exercise>

      <exercise permid="BZi">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
      </exercise>

      <exercise permid="igr">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
      </exercise>

      <exercise permid="OnA">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
      </exercise>

      <exercise permid="uuJ">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
      </exercise>

      <exercise permid="aBS">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
      </exercise>

      <exercise permid="GJb">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
      </exercise>

      <exercise permid="mQk">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
      </exercise>

      <exercise permid="SXt">
        <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="nVD">
      <title>Identifying Terms</title>
      <exercise permid="zeC">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="AMY">
                Count the number of terms in each expression.

                <ol label="a." permid="DsW">
                  <li permid="vsY">
                    <p permid="NZs">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="ugB">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="bAh">
                    <p permid="anK">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="GuT">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="HHq">
                    <p permid="mCc">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="SJl">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="nOz">
                    <p permid="yQu">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="eXD">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="fVF">
              <p permid="dpH">
                <ol label="a." permid="BDJ">
                  <li permid="TVI">
                    <p permid="LeM">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="AcR">
                    <p permid="rlV">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="gka">
                    <p permid="Xte">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="Mrj">
                    <p permid="DAn">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="flL">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="gUh">
                Count the number of terms in each expression.

                <ol label="a." permid="jAf">
                  <li permid="sys">
                    <p permid="jHw">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="POF">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="YFB">
                    <p permid="vVO">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="ccX">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="EMK">
                    <p permid="Ikg">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="orp">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="kTT">
                    <p permid="Uyy">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="AFH">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="McO">
              <p permid="JwQ">
                <ol label="a." permid="hKS">
                  <li permid="Rbc">
                    <p permid="gMQ">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="xil">
                    <p permid="MTZ">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="dpu">
                    <p permid="tbi">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="JwD">
                    <p permid="Zir">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
            <!-- decimal coefficients -->
      <exercise permid="LsU">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="Nbq">
                Count the number of terms in each expression.

                <ol label="a." permid="PHo">
                  <li permid="pDM">
                    <p permid="FpA">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="lwJ">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="VKV">
                    <p permid="RDS">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="xLb">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="BSe">
                    <p permid="dSk">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="JZt">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="hZn">
                    <p permid="qgC">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="WnL">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="sjX">
              <p permid="pDZ">
                <ol label="a." permid="NSb">
                  <li permid="Ogw">
                    <p permid="CuU">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="unF">
                    <p permid="iCd">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="auO">
                    <p permid="OJm">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="GBX">
                    <p permid="uQv">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="rAd">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="tiz">
                Count the number of terms in each expression.

                <ol label="a." permid="vOx">
                  <li permid="mJg">
                    <p permid="aXE">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="HeN">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="SQp">
                    <p permid="nlW">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Ttf">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="yXy">
                    <p permid="zAo">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="fHx">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>

                  <li permid="feH">
                    <p permid="LOG">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="rVP">
                      <var name="$answer[d]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Yrg">
              <p permid="VLi">
                <ol label="a." permid="tZk">
                  <li permid="LlQ">
                    <p permid="YcY">
                      This expression has <m><var name="$answers[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="rsZ">
                    <p permid="Ekh">
                      This expression has <m><var name="$answers[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="XAi">
                    <p permid="krq">
                      This expression has <m><var name="$answers[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="DHr">
                    <p permid="Qyz">
                      This expression has <m><var name="$answers[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
            <!-- List terms -->
      <exercise permid="XHm">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="ZpI">
                List the terms in each expression.

                <ol label="a." permid="bVG">
                  <li permid="jOA">
                    <p permid="wFI">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="cMR">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="PVJ">
                    <p permid="IUa">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="pbj">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="wcS">
                    <p permid="Vis">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="BpB">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="ckb">
                    <p permid="hwK">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="NDT">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Eyp">
              <p permid="BSr">
                <ol label="a." permid="agt">
                  <li permid="Irk">
                    <p permid="tLc">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="oyt">
                    <p permid="ZSl">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="UFC">
                    <p permid="FZu">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="AML">
                    <p permid="mgD">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="DOv">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="FwR">
                List the terms in each expression.

                <ol label="a." permid="IcP">
                  <li permid="gTU">
                    <p permid="SnM">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="yuV">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Nbd">
                    <p permid="eCe">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="KJn">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="tim">
                    <p permid="qQw">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="WXF">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Zpv">
                    <p permid="DeO">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="jlX">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="kFy">
              <p permid="hZA">
                <ol label="a." permid="GnC">
                  <li permid="FwE">
                    <p permid="Ptg">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="lDN">
                    <p permid="vAp">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="RKW">
                    <p permid="bHy">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="xSf">
                    <p permid="HOH">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
            <!-- decimal coefficients -->
      <exercise permid="jVE">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="lEa">
                List the terms in each expression.

                <ol label="a." permid="ojY">
                  <li permid="dZo">
                    <p permid="nVQ">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="UcZ">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Kgx">
                    <p permid="Aki">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="grr">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="qnG">
                    <p permid="MyA">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="sFJ">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="WuP">
                    <p permid="YMS">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="EUb">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="QMH">
              <p permid="OgJ">
                <ol label="a." permid="muL">
                  <li permid="CBY">
                    <p permid="lbk">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="iJh">
                    <p permid="Rit">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="OQq">
                    <p permid="xpC">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="uXz">
                    <p permid="dwL">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="QcN">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="RLj">
                List the terms in each expression.

                <ol label="a." permid="Urh">
                  <li permid="beI">
                    <p permid="JDU">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="pLd">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="HlR">
                    <p permid="VSm">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="BZv">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="nta">
                    <p permid="igE">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="OnN">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="TAj">
                    <p permid="uuW">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="aCf">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="wTQ">
              <p permid="unS">
                <ol label="a." permid="SBU">
                  <li permid="zHs">
                    <p permid="GJo">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="fOB">
                    <p permid="mQx">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="LVK">
                    <p permid="SXG">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="scT">
                    <p permid="zeP">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
            <!-- fraction coefficients -->
      <exercise permid="wjW">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="xSs">
                List the terms in each expression.

                <ol label="a." permid="Ayq">
                  <li permid="Ykc">
                    <p permid="flY">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="Lth">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Erl">
                    <p permid="rAq">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="XHz">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="kyu">
                    <p permid="DOI">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="jVR">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="QFD">
                    <p permid="Qda">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="wkj">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="daZ">
              <p permid="avb">
                <ol label="a." permid="yJd">
                  <li permid="wMM">
                    <p permid="crs">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="cTV">
                    <p permid="IyB">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="Jbe">
                    <p permid="oFK">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="pin">
                    <p permid="UMT">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="crf">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="dZB">
                List the terms in each expression.

                <ol label="a." permid="gFz">
                  <li permid="Vpw">
                    <p permid="AUc">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="hbl">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="BwF">
                    <p permid="Niu">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="tpD">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="hDO">
                    <p permid="ZwM">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="FDV">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="NKX">
                    <p permid="lLe">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="RSn">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Jii">
              <p permid="GCk">
                <ol label="a." permid="eQm">
                  <li permid="tSg">
                    <p permid="xZw">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="ZZp">
                    <p permid="egF">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="Ggy">
                    <p permid="KnO">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="mnH">
                    <p permid="quX">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="UcM">
      <title>Combining Like Terms</title>
            <!-- two terms only -->
      <exercise permid="Iyo">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="KgK">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="qnT">
                <ol label="a." permid="MMI">
                  <li permid="SuQ">
                    <p permid="WCg">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="CJp">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="yBZ">
                    <p permid="iQy">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="OXH">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="eJi">
                    <p permid="veQ">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="blZ">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="KQr">
                    <p permid="Hti">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="nAr">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="oFx">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Wvc">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="CCl">
                <ol label="a." permid="sTR">
                  <li permid="qXA">
                    <p permid="THA">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="zOJ">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="XeJ">
                    <p permid="fVS">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Mdb">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="DlS">
                    <p permid="skk">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Yrt">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="jtb">
                    <p permid="EyC">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="kFL">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
            <!-- 2 to 4 terms -->
      <exercise permid="UMG">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="iJu">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="OQD">
                <ol label="a." permid="Zba">
                  <li permid="PAk">
                    <p permid="QMU">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="wUd">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="vHt">
                    <p permid="dbm">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Jiv">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="bOC">
                    <p permid="ppE">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="VwN">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="HVL">
                    <p permid="BDW">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="hLf">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="ATP">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="uXM">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="beV">
                <ol label="a." permid="Fij">
                  <li permid="ocU">
                    <p permid="NSo">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="tZx">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Ukd">
                    <p permid="agG">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="GnP">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="Arm">
                    <p permid="muY">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="SCh">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="gyv">
                    <p permid="yJq">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="eQz">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
            <!-- with larger integer coefficients -->
      <exercise permid="haY">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Hme">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="ntn">
                <ol label="a." permid="lps">
                  <li permid="MFE">
                    <p permid="KXI">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="reR">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="sMN">
                    <p permid="Xma">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Dtj">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="YTW">
                    <p permid="jAs">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="PHB">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Fbf">
                    <p permid="vOK">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="bVT">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="Nih">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="TAw">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="zHF">
                <ol label="a." permid="RwB">
                  <li permid="lio">
                    <p permid="Idc">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="okl">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Rpx">
                    <p permid="Uru">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="AyD">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="xwG">
                    <p permid="gFM">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="MMV">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="dDP">
                    <p permid="sUe">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Zbn">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
            <!-- decimal coefficients -->
      <exercise permid="tpq">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="fOO">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="LVX">
                <ol label="a." permid="xDK">
                  <li permid="JKY">
                    <p permid="Fiw">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="lpF">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="pSh">
                    <p permid="RwO">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="xDX">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="VZq">
                    <p permid="dLg">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="JSp">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Cgz">
                    <p permid="pZy">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="WgH">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="Zwz">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="sdg">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Ykp">
                <ol label="a." permid="dKT">
                  <li permid="inI">
                    <p permid="CnQ">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="iuZ">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="OuR">
                    <p permid="OCi">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="uJr">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="uCa">
                    <p permid="aQA">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="GXJ">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="aJj">
                    <p permid="neS">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Tmb">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
            <!-- fraction coefficients -->
      <exercise permid="FDI">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Ery">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="kyH">
                <ol label="a." permid="JSc">
                  <li permid="GQs">
                    <p permid="ztk">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="fAt">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="mXB">
                    <p permid="LHC">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="rOL">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="TeK">
                    <p permid="XVU">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Edd">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="zlT">
                    <p permid="kkm">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Qrv">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="lKR">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="QFQ">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="wMZ">
                <ol label="a." permid="pZl">
                  <li permid="ftc">
                    <p permid="wyE">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="cFN">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="LAl">
                    <p permid="IMW">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="oUf">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="rHu">
                    <p permid="Vbo">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Bix">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="XOD">
                    <p permid="hpG">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="NwP">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="RSa">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="cUi">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Jbr">
                <ol label="a." permid="Wgu">
                  <li permid="DVM">
                    <p permid="tDY">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="ZLh">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="kcV">
                    <p permid="FSq">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="lZz">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="Qke">
                    <p permid="SgI">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="ynR">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="wrn">
                    <p permid="eva">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="KCj">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="xZj">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="piA">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="VpJ">
                <ol label="a." permid="CnD">
                  <li permid="cyw">
                    <p permid="qJs">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="WQB">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="IFF">
                    <p permid="CXK">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="jeT">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="oMO">
                    <p permid="Pmc">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="vtl">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="UTX">
                    <p permid="bAu">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="HHD">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

    </exercisegroup>
  </exercises>
</section>

