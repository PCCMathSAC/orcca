<?xml version="1.0" encoding="UTF-8" ?>

<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->

<section xml:id="section-combining-like-terms">

    <title>Combining Like Terms</title>
    <objectives>
        <title>PCC Course Content and Outcome Guide</title>
        <ul>
            <li><xref ref="mth60-simplify-algebraic-expressions" /></li>
        </ul>
    </objectives>


    <introduction>
        <p>In the last section we worked with algebraic expressions. In order to simplify algebraic expressions, it is useful to identify which quantities we can combine.</p>

        <figure>
            <caption>Alternative Video Lesson</caption>
            <video youtubelist="" />
        </figure>
    </introduction>

    <subsection>
        <title>Identifying Terms</title>
        <p>In an algebraic expression, the <term>terms</term><idx><h>term</h></idx> are the quantities that are added. For example, the expression <m>3x+2y</m> has two terms, which are <m>3x</m> and <m>2y</m>. The <term>coefficient</term> or <term>numerical coefficient</term><idx><h>coefficient</h></idx> of a term is the number attached to the variable, by multiplication.</p>

        <example>
            <statement>
                <p>List the terms in the expression <m>2l+2w</m>.</p>
            </statement>
            <solution>
                <p>The expression has two terms that are being added, <m>2l</m> and <m>2w</m>.</p>
            </solution>
        </example>

        <p>If there is any subtraction, we will rewrite the expression using addition. Here is an example of that.</p>

        <example>
            <statement>
            <p>List the terms in the expression <m>-3x^2+5x-4</m>.</p>
            </statement>
            <solution>
            <p>We can rewrite this expression as <m>-3x^2+5x+(-4)</m> to see that the terms are <m>-3x^2</m>, <m>5x</m>, and <m>-4</m>. The last term is negative because subtracting is the same as adding the opposite.</p>
            </solution>
        </example>

        <example>
            <statement>
                <p>List the terms in the expression <m>3\,\text{cm}+2\,\text{cm}+3\,\text{cm}+2\,\text{cm}</m>.</p>
            </statement>
            <solution>
                <p>This expression has four terms: <quantity><mag>3</mag><unit base="meter" prefix="centi"/></quantity>, <quantity><mag>2</mag><unit base="meter" prefix="centi"/></quantity>, <quantity><mag>3</mag><unit base="meter" prefix="centi"/></quantity>, and <quantity><mag>2</mag><unit base="meter" prefix="centi"/></quantity>.</p>
            </solution>
        </example>

        <exercise>
            <webwork>
                <setup>
                    <pg-code>
                        Context("Numeric");
                        Context()->variables->are(x=>'Real',z=>'Real');
                        $terms = List("5x, -4x, 10z");
                    </pg-code>
                </setup>
                <statement>
                    <p>List the terms in the expression <m>5x-4x+10z</m>.</p>
                    <instruction>Enter the terms separated by commas.</instruction>
                    <p><var name="$terms" width="15" /></p>
                </statement>
                <solution>
                    <p>The terms are <m>5x</m>, <m>-4x</m>, and <m>10z</m>.</p>
                </solution>
            </webwork>
        </exercise>

    </subsection>
<!--TODO: Alex, if time: add a visual introduction/explanation of how feet and square feet cannot combine-->
    <subsection>
        <title>Combining Like Terms</title>
        <p>In the examples above, you may have wanted to combine some of the terms. Look at the quantities below to see which ones you can add or subtract.<ol label="a." cols="3">
            <li>
                <p><m>5\,\text{in}+20\,\text{in}</m></p>
            </li>
            <li>
                <p><m>16\,\text{ft}-4\,\text{ft}^2</m></p>
            </li>
            <li>
                <p><m>2\,\apple+5\,\apple</m></p>
            </li>
            <li>
                <p><m>5\,\text{min}+50\,\text{ft}</m></p>
            </li>
            <li>
                <p><m>5\,\dog-2\,\cat</m></p>
            </li>
            <li>
                <p><m>20\,\text{m}-6\,\text{m}</m></p>
            </li>
        </ol></p>

        <p>The terms that we can combine are called <term>like terms</term><idx><h>like term</h></idx>. We can combine terms with the same units, but we cannot combine units such as minutes and feet or cats and dogs. We can combine the like terms by combining their coefficients. Here are the answers:<ol label="a." cols="3">
            <li>
                <p><m>5\,\text{in}+20\,\text{in}=25\,\text{in}</m></p>
            </li>
            <li>
                <p><m>16\,\text{ft}-4\,\text{ft}^2</m> cannot be simplified</p>
            </li>
            <li>
                <p><m>2\,\apple+5\,\apple=7\,\apple</m></p>
            </li>
            <li>
                <p><m>5\,\text{min}+50\,\text{ft}</m> cannot be simplified</p>
            </li>
            <li>
                <p><m>5\,\dog-2\,\cat</m> cannot be simplified</p>
            </li>
            <li>
                <p><m>20\,\text{m}-6\,\text{m}=14\,\text{min}</m></p>
            </li>
        </ol></p>

        <p><!--Note that we could combine units such as feet and inches if we convert one of the terms first. -->Now let's look at some examples that have variables in them.</p>

        <exercise>
            <webwork>
                <setup>
                    <pg-code>
                        $can = PopUp(['?','can','cannot'],1);
                        $cannot = PopUp(['?','can','cannot'],2);
                    </pg-code>
                </setup>
                <statement>
                    <p>Which expressions have like terms that you can combine?<ol cols="2">
                        <li>
                            <p><m>10x+3y</m> <var name="$cannot" form="popup" /> be combined.</p>
                        </li>
                        <li>
                            <p><m>4x-8x</m> <var name="$can" form="popup" /> be combined.</p>
                        </li>
                        <li>
                            <p><m>9y-4y</m> <var name="$can" form="popup" /> be combined.</p>
                        </li>
                        <li>
                            <p><m>-6x+17z</m> <var name="$cannot" form="popup" /> be combined.</p>
                        </li>
                        <li>
                            <p><m>-3x-7x</m> <var name="$can" form="popup" /> be combined.</p>
                        </li>
                        <li>
                            <p><m>5t+8t^2</m> <var name="$cannot" form="popup" /> be combined.</p>
                        </li>
                    </ol></p>
                </statement>
                <solution>
                    <p>The terms that we can combine have the same variable part, including any exponents. <ol cols="2">
                        <li>
                            <p><m>10x+3y</m> cannot be combined.</p>
                        </li>
                        <li>
                            <p><m>4x-8x=-4x</m></p>
                        </li>
                        <li>
                            <p><m>9y-4y=5y</m></p>
                        </li>
                        <li>
                            <p><m>-6x+17z</m> cannot be combined.</p>
                        </li>
                        <li>
                            <p><m>-3x-7x=-10x</m></p>
                        </li>
                        <li>
                            <p><m>5t+8t^2</m> cannot be combined.</p>
                        </li>
                    </ol></p>
                </solution>
            </webwork>
        </exercise>

        <example>
            <statement>
            <p>Simplify the expression <m>20x-16x+4y</m>, if possible, by combining like terms.</p>
            </statement>
            <solution>
            <p>This expression has two like terms, <m>20x</m> and <m>-16x</m>, which we can combine. <me>20x-16x+4y=4x+4y</me> Note that we cannot combine <m>4x</m> and <m>4y</m> because <m>x</m> and <m>y</m> represent different quantities.</p>
            </solution>
        </example>

        <example>
            <statement>
            <p>Simplify the expression <m>100x+100x^2</m>, if possible, by combining like terms.</p>
            </statement>
            <solution>
            <p>This expression cannot be simplified because the variable parts are not the same. We cannot add <m>x</m> and <m>x^2</m> just like we cannot add feet, a measure of length, and square feet, a measure of area.</p>
            </solution>
        </example>

        <example>
            <statement>
                <p>Simplify the expression <m>-10r+2s-5t</m>, if possible, by combining like terms.</p>
            </statement>
            <solution>
                <p>This expression cannot be simplified because there are not any like terms.</p>
            </solution>
        </example>

        <example>
            <statement>
            <p>Simplify the expression <m>y+5y</m>, if possible, by combining like terms.</p>
            </statement>
            <solution>
            <p>This expression can be thought of as <m>1y+5y</m>. When we have a single <m>y</m>, the coefficient of <m>1</m> is not usually written. Now we have two like terms, <m>1y</m> and <m>5y</m>. We will add those together:
                <md>
                    <mrow>x+5x\amp= 1x+5x</mrow>
                    <mrow>\amp=6x</mrow>
                </md>
            </p>
            </solution>
        </example>

        <p>So far we have combined terms with whole numbers and integers, but we can also combine like terms when the coefficients are decimals (or fractions).</p>

        <example>
            <statement>
            <p>Simplify the expression <m>x-0.15x</m>, if possible, by combining like terms.</p>
            </statement>
            <solution>
                <p>Note that this expression can be rewritten as <m>1.00x-0.15x</m>, and combined like this:
                    <md>
                        <mrow>x-0.15x\amp=1.00x-0.15x</mrow>
                        <mrow>\amp=0.85x</mrow>
                    </md>
                </p>
            </solution>
        </example>

        <exercise>
            <webwork>
                <setup>
                    <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            $ans[0]=Formula("14x-7y");
                            $ans[1]=Formula("-7y+2x^2");
                            $ans[2]=Formula("1.25x");
                            $ans[3]=Formula("4x+1.5y-9z");
                            for $i (0..3) {
                                $evaluator[$i] = $ans[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                    </pg-code>
                </setup>
                <statement>
                    <p>Simplify each expression, if possible, by combining like terms.</p>
                    <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                    <p><ol label="a." cols="2">
                        <li>
                            <p><m>4x-7y+10x</m></p>
                            <p><var name="$evaluator[0]" width="25" /></p>
                        </li>
                        <li>
                            <p><m>y-8y+2x^2</m></p>
                            <p><var name="$evaluator[1]" width="25" /></p>
                        </li>
                        <li>
                            <p><m>x+0.25x</m></p>
                            <p><var name="$evaluator[2]" width="25" /></p>
                        </li>
                        <li>
                            <p><m>4x+1.5y-9z</m></p>
                            <p><var name="$evaluator[3]" width="25" /></p>
                        </li>
                    </ol></p>
                </statement>
                <solution>
                    <p><ol label="a.">
                        <li>
                            <p>This expression has two like terms that can be combined to get <m>14x-7y</m>.</p>
                        </li>
                        <li>
                            <p>In this expression we can combine the <m>y</m> terms to get <m>-7y+2x^2</m>.</p>
                        </li>
                        <li>
                            <p>Rewrite this expression as <m>1.00x+0.25x</m> and simplify to get <m>1.25x</m>.</p>
                        </li>
                        <li>
                            <p>This expression cannot be simplified further because there are not any like terms.</p>
                        </li>
                    </ol></p>
                </solution>
            </webwork>
        </exercise>

        <remark>
            <title>The Difference Between Terms and Factors</title>

            <p>We have learned that terms are quantities that are added, such as <m>3x</m> and <m>-2x</m> in <m>3x-2x</m>. These are different than <term>factors</term><idx><h>factor</h></idx>, which are parts that are multiplied together. For example, the term <m>2x</m> has two factors: <m>2</m> and <m>x</m> (with the multiplication symbol implied between them). The term <m>2\pi r</m> has three factors: <m>2</m>, <m>\pi</m>, and <m>r</m>.</p>
        </remark>

    </subsection>

    <exercises>
        <exercisegroup cols="3">
            <title>Review and Warmup</title>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
            </exercise>
            <exercise>
                <webwork source="BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
            </exercise>
        </exercisegroup>
        <exercisegroup cols="3">
            <title>Identifying Terms</title>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$answer[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Count the number of terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>This expression has <m><var name="$answers[0]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[1]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[2]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[3]" /></m> terms.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$answer[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Count the number of terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>This expression has <m><var name="$answers[0]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[1]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[2]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[3]" /></m> terms.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>

            <!-- decimal coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$answer[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Count the number of terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>This expression has <m><var name="$answers[0]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[1]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[2]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[3]" /></m> terms.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$answer[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Count the number of terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answer[d]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>This expression has <m><var name="$answers[0]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[1]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[2]" /></m> terms.</p>
                            </li>
                            <li>
                                <p>This expression has <m><var name="$answers[3]" /></m> terms.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>

            <!-- List terms -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>

            <!-- decimal coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>

            <!-- fraction coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                $answers[$i] = List();
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random('x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                                    $answers[$i] = List($answers[$i],Formula("$string")->reduce->reduce);
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                        </pg-code>
                    </setup>
                    <statement>
                        <p>List the terms in each expression.<ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$answers[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$answers[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$answers[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$answers[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                    <solution>
                        <p><ol label="a.">
                            <li>
                                <p>The terms are <m><var name="$answers[0]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[1]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[2]" /></m>.</p>
                            </li>
                            <li>
                                <p>The terms are <m><var name="$answers[3]" /></m>.</p>
                            </li>
                        </ol></p>
                    </solution>
                </webwork>
            </exercise>
        </exercisegroup>

        <exercisegroup cols="2">
            <title>Combining Like Terms</title>
            <!-- two terms only -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>

            <!-- 2 to 4 terms -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>

            <!-- with larger integer coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>

            <!-- decimal coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Numeric");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                                        $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                                        $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                                        $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                                        $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                                        $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                                        $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                                        $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                                        $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                                        $expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                                        $expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>

            <!-- fraction coefficients -->
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                                        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                                        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                                        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                                        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                                        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                                        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                                        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                                        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                                        Fraction($expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                                        Fraction($expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                                        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                                        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                                        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                                        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                                        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                                        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                                        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                                        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                                        Fraction($expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                                        Fraction($expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                                        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                                        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                                        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                                        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                                        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                                        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                                        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                                        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                                        Fraction($expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                                        Fraction($expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("Fraction");
                            Context()->noreduce('(-x)+y','(-x)-y');
                            Context()->flags->set(reduceConstants=>0);
                            Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                            Context()->operators->set(
                                '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                                '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                            );
                            @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                            for $i (0..3) {
                                $expression[$i] = Formula("0");
                                my @vars;
                                my @exps;
                                for $j (1..$termcount[$i]) {
                                    my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                                    my $nextexp;
                                    do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                                    push(@vars,$nextvar);
                                    push(@exps,$nextexp);
                                    $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                                    $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                                }
                            }
                            $exp0=$expression[0];
                            $exp1=$expression[1];
                            $exp2=$expression[2];
                            $exp3=$expression[3];
                            for $i (0..3) {
                                $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                                        Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                                        Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                                        Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                                        Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                                        Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                                        Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                                        Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                                        Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                                        Fraction($expression[$i]->D('s')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                                        Fraction($expression[$i]->D('t')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                                $evaluator[$i] = $answers[$i] -> cmp(
                                   checker=>sub{
                                      my ( $correct, $student, $ansHash ) = @_;
                                      return 0 if $ansHash->{isPreview} || $correct != $student;
                                      $student = $ansHash->{student_formula};
                                      $correct = $correct->{original_formula} if defined $correct->{original_formula};
                                      $student = Formula("$student"); $correct = Formula("$correct");
                                      return 0 unless ($correct == $student);
                                      Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                                      delete $correct->{test_values}, $student->{test_values};
                                      my $OK = (($correct == $student) or ($student == $correct));
                                      Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                                      Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                                      return $OK;
                                });
                            }
                        </pg-code>
                    </setup>
                    <statement>
                        <p>Simplify each expression, if possible, by combining like terms.</p>
                        <instruction>If the expression cannot be simplified further, just enter it as it is.</instruction>
                        <p><ol label="a.">
                            <li>
                                <p><m><var name="$exp0" /></m></p>
                                <p><var name="$evaluator[0]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp1" /></m></p>
                                <p><var name="$evaluator[1]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp2" /></m></p>
                                <p><var name="$evaluator[2]" width="25" /></p>
                            </li>
                            <li>
                                <p><m><var name="$exp3" /></m></p>
                                <p><var name="$evaluator[3]" width="25" /></p>
                            </li>
                        </ol></p>
                    </statement>
                </webwork>
            </exercise>
        </exercisegroup>
    </exercises>
</section>

