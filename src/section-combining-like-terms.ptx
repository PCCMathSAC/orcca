<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="section-combining-like-terms">
  <title>Combining Like Terms</title>

  <objectives>
    <title>PCC Course Content and Outcome Guide</title>
    <ul>
      <li>
        <xref ref="ccog-simplify-algebraic-expressions" text="local">MTH 60 CCOG</xref>
      </li>

      <li>
        <xref ref="ccog-distinguish-between-factors-terms" text="local">MTH 60 CCOG</xref>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      In <xref ref="section-variables-and-evaluating-expressions">Section</xref>,
      we worked with algebraic expressions.
      Algebraic expressions can be large and complicated,
      and anything we can do to write the same expression in a simplified form is helpful.
      The most basic skill for simplfying an algebraic expression is finding parts of the expression
      that have a certain something in common that allows them to be combined into one.  <em>Combining like terms</em>
      is the topic of this section.
    </p>

    <figure xml:id="video-combining-like-terms">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-dqjDRbGl2sSeMeTvrHik4p" />
    </figure>
  </introduction>

  <subsection>
    <title>Identifying Terms</title>
    <definition xml:id="definition-term">
      <statement>
        <p>
          In an algebraic expression, the <term>terms</term>
              <idx><h>term</h></idx>
          are quantities being added together.
          <!-- For example, the expression <m>3x+2y</m> has two terms,
          which are <m>3x</m> and <m>2y</m>. -->
          <!-- We don't need to define coefficients and constant terms until polynomials. -->
          <!-- Often, terms are of the form <q>number times variable,</q> as are the two terms in this example.
          For terms in that form, the <term>coefficient</term>
              <idx><h>coefficient</h></idx>
          of a variable is the number part being multiplied by that variable.
          For example, in <m>3x+2y</m>, we say the coefficient of <m>x</m> is <m>3</m>
          and the coefficient of <m>y</m> is <m>2</m>. -->
        </p>
      </statement>
    </definition>

    <example>
      <statement>
        <p>
          List the terms <!-- and their coefficients --> in the expression <m>2\ell+2w</m>.
        </p>
      </statement>
      <solution>
        <p>
          The expression has two terms that are being added, <m>2\ell</m> and <m>2w</m>. <!-- For each term, the coefficient is <m>2</m>. -->
        </p>
      </solution>
    </example>

    <p>
      If there is any subtraction, we can rewrite the expression using addition
      to make it easier to see exactly what the terms are and what sign each term has.
    </p>

    <example>
      <statement>
        <p>
          List the terms <!-- and their coefficients --> in the expression <m>-3x^2+5x-4</m>.
        </p>
      </statement>
      <solution>
        <p>
          We can rewrite this expression as
          <m>-3x^2+5x+(-4)</m> to see that the terms are <m>-3x^2</m><!--  (with coefficient <m>-3</m>) -->,
          <m>5x</m><!--  (with coefficient <m>5</m>) -->,
          and <m>-4</m>.
          <!-- The last term is negative because subtracting is the same as adding the opposite.
          Also the last term doesn't have a variable,
          so we don't need to refer to any coefficient there.
          We call a term like this a <q>constant term.</q> -->
        </p>
        <p>
          Once you learn to recognize that subtraction represents a negative term,
          you don't need to rewrite subtraction as addition.
        </p>
      </solution>
    </example>

    <example>
      <statement>
        <p>
          List the terms in the expression <m>3\,\text{cm}+2\,\text{cm}-3\,\text{cm}+2\,\text{cm}</m>.
        </p>
      </statement>
      <solution>
        <p>
          This expression has four terms:
          <quantity>
            <mag>3</mag><unit base="meter" prefix="centi"/>
          </quantity>,
          <quantity>
            <mag>2</mag><unit base="meter" prefix="centi"/>
          </quantity>,
          <quantity>
            <mag>-3</mag><unit base="meter" prefix="centi"/>
          </quantity>, and
          <quantity>
            <mag>2</mag><unit base="meter" prefix="centi"/>
          </quantity>.
        </p>
      </solution>
    </example>

    <exercise>
      <webwork>
            <pg-code>
                Context("Numeric");
                Context()->variables->are(x=>'Real',z=>'Real');
                $terms = List("5x, -4x, 10z");
            </pg-code>
          <statement>
            <p>
              List the terms in the expression <m>5x-4x+10z</m>.
            </p>
            <instruction>
              Enter the terms separated by commas.
            </instruction>
            <p>
              <var name="$terms" width="15" />
            </p>
          </statement>
          <solution>
            <p>
              The terms are <m>5x</m>, <m>-4x</m>, and <m>10z</m>.
            </p>
          </solution>
      </webwork>
    </exercise>
  </subsection>
  <subsection>
    <title>Combining Like Terms</title>
    <p>
      In the examples above, you may have wanted to combine terms in some cases.
      For example, if you have <m>3\,\text{cm}+2\,\text{cm}</m>,
      it is natural to add those together to get
      <quantity><mag>5</mag><unit base="meter" prefix="centi"/></quantity>.
      That works because their units
      (<quantity><unit base="meter" prefix="centi"/></quantity>) are the same.
      This idea applies to some other kinds of terms that don't have units.
      For example, with <m>2x+3x</m>, we have <m>2</m> <em>somethings</em>
      and then we have <m>3</m> more of the same thing.
      All together, we have <m>5</m> of those things.
      So <m>2x+3x</m> is the same as <m>5x</m>.
    </p>

    <p>
      Terms in an algebraic expression that can be combined like these last
      examples are called <term>like terms</term>.
          <idx><h>like terms</h></idx>
      <ul>
        <li>
          <p>
            Sometimes terms are like terms because they have the same variable,
            like with <m>2x+3x</m>, which simplfies to <m>5x</m>.
          </p>
        </li>
        <li>
          <p>
            Sometimes terms are like terms because they have the same units,
            like with <m>3\,\text{cm}+2\,\text{cm}</m>, which simplfies to <quantity><mag>5</mag><unit base="meter" prefix="centi"/></quantity>.
          </p>
        </li>
        <li>
          <p>
            Sometimes terms are like terms because they have something else in common,
            like with <m>3\sqrt{7}+2\sqrt{7}</m>, which simplfies to <m>5\sqrt{7}</m>.
          </p>
        </li>
      </ul>
    </p>

    <example xml:id="example-combining-like-terms">
      <statement>
        <p>
          In the expressions below, look for like terms and then simplify where possible
          by adding or subtracting.
          <ol marker="a." cols="2">
            <li>
              <p>
                <m>5\,\text{in}+20\,\text{in}</m>
              </p>
            </li>

            <li>
              <p>
                <m>16\,\text{ft}^2+4\,\text{ft}</m>
              </p>
            </li>

            <li>
              <p>
                <m>2\,\apple+5\,\apple</m>
              </p>
            </li>

            <li>
              <p>
                <m>5\,\text{min}+50\,\text{ft}</m>
              </p>
            </li>

            <li>
              <p>
                <m>5\,\dog-2\,\cat</m>
              </p>
            </li>

            <li>
              <p>
                <m>20\,\text{m}-6\,\text{m}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution>
        <p>
          We can combine terms with the same units,
          but we cannot combine units such as minutes and feet, or cats and dogs.
          We can combine the like terms by adding or subtracting their numerical parts.
          <ol marker="a." cols="2">
            <li>
              <p>
                <m>5\,\text{in}+20\,\text{in}=25\,\text{in}</m>
              </p>
            </li>

            <li>
              <p>
                <m>16\,\text{ft}^2+4\,\text{ft}</m> cannot be simplified
              </p>
            </li>

            <li>
              <p>
                <m>2\,\apple+5\,\apple=7\,\apple</m>
              </p>
            </li>

            <li>
              <p>
                <m>5\,\text{min}+50\,\text{ft}</m> cannot be simplified
              </p>
            </li>

            <li>
              <p>
                <m>5\,\dog-2\,\cat</m> cannot be simplified
              </p>
            </li>

            <li>
              <p>
                <m>20\,\text{m}-6\,\text{m}=14\,\text{m}</m>
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <p>
      One of the examples from <xref ref="example-combining-like-terms">Example</xref>
      was <m>16\,\text{ft}^2+4\,\text{ft}</m>. The units on these two terms may look similar,
      but they are very different. <quantity><mag>16</mag><unit base="foot" exp="2"/></quantity>
      is a measurement of how much area something has.
      <quantity><mag>4</mag><unit base="foot"/></quantity> is a measurement
      of how long something is. <xref ref="figure-unlike-terms">Figure</xref>
      illustrates this.
    </p>

    <figure xml:id="figure-unlike-terms">
      <caption>There is no way to add <quantity><mag>16</mag><unit base="foot" exp="2"/></quantity>
      to <quantity><mag>4</mag><unit base="foot"/></quantity>.</caption>
      <image width="80%">
        <description>a four-by-four square, illustrating 16 square feet, alongside a line that is four feet long</description>
        <latex-image>
          \begin{tikzpicture}
            \coordinate (v) at (14,12);
            \foreach \i in {0,...,4}{
              \draw (\i,3) -- ( $ (\i,3)!.142!(v) $ );
            }
            \foreach \k in {0, 0.04,0.076,0.110,0.142}{
              \draw ( $ (4,3)!{\k}!(v) $) -- ( $ (0,3)!{\k}!(v) $);
            }
            \draw[fill=firstcolor!30,opacity=0.5] (0,3) -- (4,3) -- ( $ (4,3)!{0.142}!(v) $) -- ( $ (0,3)!{0.142}!(v) $);
            \draw ( $ (5,3)!{0.076}!(v) $) -- ( $ (9,3)!{0.076}!(v) $);
            \node at (2,3) [below] {$16\,\mathrm{ft}^2$};
            \node at ( $ (7,3)!{0.076}!(v) $) [below] {$4\,\mathrm{ft}$};
          \end{tikzpicture}
        </latex-image>
      </image>
    </figure>

    <exercise>
      <webwork>
          <pg-code>
            $can = PopUp(['?','can','cannot'],1);
            $cannot = PopUp(['?','can','cannot'],2);
          </pg-code>
        <statement>
          <p>
            Which expressions have like terms that you can combine?

            <ol cols="2">
              <li>
                <p>
                  <m>10x+3y</m> <var name="$cannot" form="popup" /> be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>4x-8x</m> <var name="$can" form="popup" /> be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>9y-4y</m> <var name="$can" form="popup" /> be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>-6x+17z</m> <var name="$cannot" form="popup" /> be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>-3x-7x</m> <var name="$can" form="popup" /> be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>5t+8t^2</m> <var name="$cannot" form="popup" /> be combined.
                </p>
              </li>
            </ol>
          </p>
        </statement>
        <solution>
          <p>
            The terms that we can combine have the same variable part,
            including any exponents.

            <ol cols="2">
              <li>
                <p>
                  <m>10x+3y</m> cannot be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>4x-8x=-4x</m>
                </p>
              </li>

              <li>
                <p>
                  <m>9y-4y=5y</m>
                </p>
              </li>

              <li>
                <p>
                  <m>-6x+17z</m> cannot be combined.
                </p>
              </li>

              <li>
                <p>
                  <m>-3x-7x=-10x</m>
                </p>
              </li>

              <li>
                <p>
                  <m>5t+8t^2</m> cannot be combined.
                </p>
              </li>
            </ol>
          </p>
        </solution>
      </webwork>
    </exercise>

    <example>
      <statement>
        <p>
          Simplify the expression <m>20x-16x+4y</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution>
        <p>
          This expression has two like terms,
          <m>20x</m> and <m>-16x</m>, which we can combine.
          <me>
            \highlight{20x-16x}+4y=\highlight{4x}+4y
          </me>
          Note that we cannot combine <m>4x</m> and <m>4y</m> because <m>x</m> and <m>y</m> are different.
        </p>
      </solution>
    </example>

    <example>
      <statement>
        <p>
          Simplify the expression <m>100x+100x^2</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution>
        <p>
          This expression cannot be simplified because the variable parts are not the same.
          We cannot add <m>x</m> and <m>x^2</m> just like we cannot add feet (
          a measure of length) and square feet (a measure of area).
        </p>
      </solution>
    </example>

    <example>
      <statement>
        <p>
          Simplify the expression <m>-10r+2s-5t</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution>
        <p>
          This expression cannot be simplified because there are not any like terms.
        </p>
      </solution>
    </example>

    <example>
      <statement>
        <p>
          Simplify the expression <m>y+5y</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution>
        <p>
          This expression can be thought of as <m>1y+5y</m>.
          When we have a single <m>y</m>,
          the numerical part <m>1</m> is not usually written.
          Now we have two like terms, <m>1y</m> and <m>5y</m>.
          We will add those together:
          <md>
            <mrow>y+5y\amp= \highlight{1y+5y}</mrow>
            <mrow>\amp=\highlight{6y}</mrow>
          </md>
        </p>
      </solution>
    </example>

    <p>
      So far we have combined terms with whole numbers and integers,
      but we can also combine like terms when the numerical parts are decimals
      or fractions.
    </p>

    <example>
      <statement>
        <p>
          Simplify the expression <m>x-0.15x</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution>
        <p>
          Note that this expression can be rewritten as
          <m>1.00x-0.15x</m>, and combined like this:
          <md>
            <mrow>x-0.15x\amp=\highlight{1.00x-0.15x}</mrow>
            <mrow>\amp=\highlight{0.85x}</mrow>
          </md>
        </p>
      </solution>
    </example>

    <exercise>
      <webwork>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              $ans[0]=Formula("1.25x");
              $ans[1]=Formula("10/9 x - 7/10 y");
              $ans[2]=Formula("3/10 y + 2/3 x^2");
              $ans[3]=Formula("4x+1.5y-9z");
              for $i (0..3) {
                $evaluator[$i] = $ans[$i] -> cmp(
                  checker=>sub{
                    my ( $correct, $student, $ansHash ) = @_;
                    return 0 if $ansHash->{isPreview} || $correct != $student;
                    $student = $ansHash->{student_formula};
                    $correct = $correct->{original_formula} if defined $correct->{original_formula};
                    $student = Formula("$student"); $correct = Formula("$correct");
                    return 0 unless ($correct == $student);
                    Context()->flags->set(bizarroMul=>1);
                    delete $correct->{test_values}, $student->{test_values};
                    my $OK = (($correct == $student) or ($student == $correct));
                    Context()->flags->set(bizarroMul=>0);
                    Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                    return $OK;
                  }
                );
              }
            </pg-code>
          <statement>
            <instruction>
              If the expression cannot be simplified further, just enter it as it is.
            </instruction>
            <p>
              <ol marker="a." cols="2">
                <li>
                  <p>
                    <m>x+0.25x</m>
                  </p>

                  <p>
                    <var name="$evaluator[0]" width="25" />
                  </p>
                </li>

                <li>
                  <p>
                    <m>\frac{4}{9}x-\frac{7}{10}y+\frac{2}{3}x</m>
                  </p>

                  <p>
                    <var name="$evaluator[1]" width="25" />
                  </p>
                </li>

                <li>
                  <p>
                    <m>\frac{5}{6}y-\frac{8}{15}y+\frac{2}{3}x^2</m>
                  </p>

                  <p>
                    <var name="$evaluator[2]" width="25" />
                  </p>
                </li>

                <li>
                  <p>
                    <m>4x+1.5y-9z</m>
                  </p>

                  <p>
                    <var name="$evaluator[3]" width="25" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution>
            <p>
              <ol marker="a.">
                <li>
                  <p>
                    Rewrite this expression as
                    <m>1.00x+0.25x</m> and simplify to get <m>1.25x</m>.
                  </p>
                </li>

                <li>
                  <p>
                    This expression has two like terms that can be combined:
                    <m>\frac{4}{9}x</m> and <m>\frac{2}{3}x</m>.
                    To combine them, we need to add the fractions
                    <m>\frac{4}{9}+\frac{2}{3}</m>.
                    (You may find a review of fraction addition in
                    <xref ref="section-fractions-and-fraction-arithmetic">Section</xref>.)
                    Here, we have
                    <md>
                      <mrow>\frac{4}{9}+\frac{2}{3}\amp=\frac{4}{9}+\frac{6}{9}</mrow>
                      <mrow>\amp=\frac{10}{9}</mrow>
                    </md>
                    so <m>\frac{4}{9}x+\frac{2}{3}x=\frac{10}{9}x</m>.
                    And together with the third term,
                    the answer is <m>\frac{10}{9}x-\frac{7}{10}y</m>.
                  </p>
                </li>

                <li>
                  <p>
                    In this expression we can combine the <m>y</m> terms,
                    but we need to subtract the fractions <m>\frac{5}{6}-\frac{8}{15}</m>.
                    (You may find a review of fraction subtraction in
                    <xref ref="section-fractions-and-fraction-arithmetic">Section</xref>.)
                    Here, we have
                    <md>
                      <mrow>\frac{5}{6}-\frac{8}{15}\amp=\frac{25}{30}-\frac{16}{30}</mrow>
                      <mrow>\amp=\frac{9}{30}</mrow>
                      <mrow>\amp=\frac{3}{10}</mrow>
                    </md>
                    so <m>\frac{5}{6}y-\frac{8}{15}y=\frac{3}{10}y</m>.
                    And together with the third term,
                    the answer is <m>\frac{3}{10}y+\frac{2}{3}x^2</m>.
                  </p>
                </li>

                <li>
                  <p>
                    This expression cannot be simplified further because there are not any like terms.
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>

    <remark>
      <title>The Difference Between Terms and Factors</title>
      <p>
        We have learned that terms are quantities that are added,
        such as <m>3x</m> and <m>-2x</m> in <m>3x-2x</m>.
        These are different from <term>factors</term>,
            <idx><h>factor</h></idx>
        which are parts that are multiplied together.
        For example, the term <m>2x</m> has two factors:
        <m>2</m> and <m>x</m>
        (with the multiplication symbol implied between them).
        The term <m>2\pi r</m> has three factors:
        <m>2</m>, <m>\pi</m>, and <m>r</m>.
      </p>
    </remark>
  </subsection>

  <reading-questions>
    <exercise>
      <statement>
        <p>
          What should you be careful with when there is subtraction in an algebraic expression
          and you are identifying its terms?
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Describe at least two different ways in which a pair
          of terms are considered to be <q>like terms.</q>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Describe the difference between <q>terms</q> and <q>factors</q>
          in an algebraic expression. Give examples.
        </p>
      </statement>
    </exercise>
  </reading-questions>

  <exercises>
    <subexercises>
      <title>Review and Warmup</title>
      <exercisegroup cols="4">
        <introduction>
          <p>Add the numbers.</p>
        </introduction>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers20.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/AdditionWithNegativeNumbers30.pg"  />
        </exercise>
      </exercisegroup>

      <exercisegroup cols="3">
        <introduction>
          <p>Subtract the numbers.</p>
        </introduction>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers10.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers20.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicAlgebra/SignedNumbersArithemtic/SubtractionWithNegativeNumbers30.pg"  />
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Skills Practice</title>
      <exercisegroup cols="2">
        <title>Counting Terms</title>
        <introduction>
          <p>
            Count the number of terms in each expression.
          </p>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-count-terms-integer-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$answer[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-count-terms-integer-coefficients"/>
        </exercise>
        <!-- decimal coefficients -->
        <exercise>
          <webwork xml:id="webwork-count-terms-decimal-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$answer[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>
                  <li>
                    <p>
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-count-terms-decimal-coefficients"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>Identifying Terms</title>
        <introduction>
          <p>
            List the terms in each expression.
          </p>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-identify-terms-integer-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  $answers[$i] = List();
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                      $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <instruction>
                Enter the terms separated by commas.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-identify-terms-integer-coefficients"/>
        </exercise>
        <!-- decimal coefficients -->
        <exercise>
          <webwork xml:id="webwork-identify-terms-decimal-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  $answers[$i] = List();
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                      $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <instruction>
                Enter the terms separated by commas.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-identify-terms-decimal-coefficients"/>
        </exercise>
        <!-- fraction coefficients -->
        <exercise>
          <webwork xml:id="webwork-identify-terms-fraction-coefficients">
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->flags->set(reduceConstants=>0);
              Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
              @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  $answers[$i] = List();
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random('x','y','z','t','s');
                      my $nextexp;
                      do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                      $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
            </pg-code>
            <statement>
              <instruction>
                Enter the terms separated by commas.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>
                  <li>
                    <p>
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-identify-terms-decimal-coefficients"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>Combining Terms</title>
        <introduction>
          <p>
            Simplify each expression, if possible, by combining like terms.
          </p>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-combining-two-terms-integer-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',r=>'Real',t=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','r','t');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                          $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                          $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                          $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                          $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                          $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                          $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                          $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                          $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                          $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                          $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-two-terms-integer-coefficients"/>
        </exercise>
        <!-- combining 2 to 4 terms -->
        <exercise>
          <webwork xml:id="webwork-combining-up-to-four-terms-integer-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',r=>'Real',t=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','r','t');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                          $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                          $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                          $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                          $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                          $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                          $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                          $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                          $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                          $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                          $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-up-to-four-terms-integer-coefficients"/>
        </exercise>
        <!-- combining with larger integer coefficients -->
        <exercise>
          <webwork xml:id="webwork-combining-terms-larger-integer-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',r=>'Real',t=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','r','t');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-99,99,1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                          $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                          $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                          $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                          $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                          $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                          $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                          $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                          $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                          $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                          $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-terms-larger-integer-coefficients"/>
        </exercise>
        <!-- combining decimal coefficients -->
        <exercise>
          <webwork xml:id="webwork-combining-terms-decimal-coefficients">
            <pg-code>
              Context("Numeric");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->variables->are(x=>'Real',y=>'Real',r=>'Real',t=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','r','t');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                          $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                          $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                          $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                          $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                          $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                          $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                          $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                          $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                          $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                          $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-terms-decimal-coefficients"/>
        </exercise>
        <!-- combining fraction coefficients -->
        <exercise>
          <webwork xml:id="webwork-combining-terms-fraction-coefficients">
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y','(-x)-y');
              Context()->flags->set(reduceConstants=>0);
              Context()->variables->are(x=>'Real',y=>'Real',r=>'Real',t=>'Real');
              Context()->operators->set(
                  '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
              );
              @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
              for $i (0..3) {
                  $expression[$i] = Formula("0");
                  my @vars;
                  my @exps;
                  for $j (1..$termcount[$i]) {
                      my $nextvar = list_random(@vars,@vars,@vars,'x','y','r','t');
                      my $nextexp;
                      do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                      push(@vars,$nextvar);
                      push(@exps,$nextexp);
                      $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                      $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                  }
              }
              $exp0=$expression[0];
              $exp1=$expression[1];
              $exp2=$expression[2];
              $exp3=$expression[3];
              for $i (0..3) {
                  $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                          Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                          Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                          Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                          Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                          Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                          Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                          Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                          Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                          Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                          Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                  $answers[$i] = Formula("$answers[$i]")->reduce;
                  $evaluator[$i] = $answers[$i] -> cmp(
                     checker=>sub{
                        my ( $correct, $student, $ansHash ) = @_;
                        return 0 if $ansHash->{isPreview} || $correct != $student;
                        $student = $ansHash->{student_formula};
                        $correct = $correct->{original_formula} if defined $correct->{original_formula};
                        $student = Formula("$student"); $correct = Formula("$correct");
                        return 0 unless ($correct == $student);
                        Context()->flags->set(bizarroMul=>1);
                        delete $correct->{test_values}, $student->{test_values};
                        my $OK = (($correct == $student) or ($student == $correct));
                        Context()->flags->set(bizarroMul=>0);
                        Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                        return $OK;
                  });
              }
            </pg-code>
            <statement>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p>
                <ol marker="a.">
                  <li>
                    <p>
                      <m><var name="$exp0" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp1" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp2" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>
                  <li>
                    <p>
                      <m><var name="$exp3" /></m>
                    </p>
                    <p>
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-terms-fraction-coefficients"/>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-terms-fraction-coefficients"/>
        </exercise>
        <exercise>
          <webwork copy="webwork-combining-terms-fraction-coefficients"/>
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Challenge Problems</title>
      <exercise>
        <webwork>
          <pg-code>
            Context("RationalFunction-Strict");
            Context()->variables->are(a=>'Real');
            $p = random(1,9,1);
            $q = random(1,9,1);
            $num = $p+$q;
            $answer = Formula("$num/a");
          </pg-code>
          <statement>
            <p>
              Given that <m>a\neq0</m>, simplify the following <m>\frac{<var name="$p"/>}{a} + \frac{<var name="$q"/>}{a}</m>.
            </p>
            <p>
              <var name="$answer" width="10" />
            </p>
          </statement>
          <solution>
            <p>
              Since the fractions have the same denominator, we can just add numerators and keep that denominator the same.
              <md>
                <mrow>\frac{<var name="$p"/>}{a} + \frac{<var name="$q"/>}{a}   \amp =  \frac{<var name="$p"/>+<var name="$q"/>}{a}</mrow>
                <mrow>                                                          \amp = <var name="$answer" /></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-code>
            Context("RationalFunction-Strict");
            Context()->variables->are(a=>'Real');
            $p = random(1,9,1);
            $q = random(1,9,2);
            $num = (2*$p+$q);
            $answer = Formula("$num/(2a)");
          </pg-code>
          <statement>
            <p>
              Given that <m>a\neq0</m>, simplify the following <m>\frac{<var name="$p"/>}{a} + \frac{<var name="$q"/>}{2a}</m>.
            </p>
            <p>
              <var name="$answer" width="10" />
            </p>
          </statement>
          <solution>
            <p>
              Since the fractions don't have the same denominator, we have to make them have like denominators.
              You should multiply the first fraction by <m>\frac{2}{2}</m>.
              <md>
                <mrow>\frac{<var name="$p"/>}{a} + \frac{<var name="$q"/>}{2a} \amp = \frac{2 \cdot<var name="$p"/>}{2a} + \frac{<var name="$q"/>}{2a} </mrow>
                <mrow>                                                         \amp =  \frac{2 \cdot <var name="$p"/>+<var name="$q"/>}{2a}</mrow>
                <mrow>                                                         \amp = <var name="$answer" /></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-code>
            Context("RationalFunction-Strict");
            Context()->variables->are(a=>'Real');
            $p = random(1,9,1);
            do {$q = random(1,9,1);} until ($q % 5 != 0);
            $num = (5*$p-$q);
            $answer = Formula("$num/(5a)");
          </pg-code>
          <statement>
            <p>
              Given that <m>a\neq0</m>, simplify the following: <m>\frac{<var name="$p"/>}{a} - \frac{<var name="$q"/>}{5a}</m>.
            </p>
            <p>
              <var name="$answer" width="10" />
            </p>
          </statement>
          <solution>
            <p>
              Since the fractions don't have the same denominator, we have to make them have like denominators.
              You should multiply the first fraction by <m>\frac{5}{5}</m>.
              <md>
                <mrow>\frac{<var name="$p"/>}{a} + \frac{<var name="$q"/>}{2a}    \amp = \frac{5 \cdot<var name="$p"/>}{5a} - \frac{<var name="$q"/>}{5a}</mrow>
                <mrow>                                                            \amp = \frac{5 \cdot<var name="$p"/> - <var name="$q"/>}{5a}</mrow>
                <mrow>                                                            \amp = <var name="$answer" /></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
    </subexercises>
  </exercises>

  <!-- <worksheet>
    <author>Ann Cary</author>
    <p>
      This worksheet has the exercises that are worked out in
      <xref ref="video-combining-like-terms">Video</xref>.
    </p>
    <exercise workspace="20%">
      <statement>
        <p>
          What are like terms?
        </p>
      </statement>
    </exercise>
    <exercise workspace="20%">
      <statement>
        <p>
          Examples of like terms:
        </p>
      </statement>
    </exercise>
    <p>
      Simplify the following expressions by combining like terms, if possible.
    </p>
    <sidebyside>
      <exercise workspace="20%">
        <statement>
            <p>
              <m>12x+8x</m>
            </p>
        </statement>
      </exercise>
      <exercise workspace="20%">
        <statement>
            <p>
              <m>8x-8y</m>
            </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="20%">
        <statement>
            <p>
              <m>2t-5t</m>
            </p>
        </statement>
      </exercise>
      <exercise workspace="20%">
        <statement>
            <p>
              <m>3x^2+x</m>
            </p>
        </statement>
      </exercise>
    </sidebyside>
    <pagebreak/>
    <p>
      Simplify the following expressions by combining like terms, if possible.
    </p>
    <sidebyside>
      <exercise workspace="45%">
        <statement>
          <p>
            <m>1.2x+3.5x</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="45%">
        <statement>
          <p>
            <m>s+0.3s</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="45%">
        <statement>
          <p>
            <m>p-0.07p</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="45%">
        <statement>
          <p>
            <m>\frac{1}{2}z-\frac{3}{5}z</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
  </worksheet>

  <worksheet>
    <author>Cara Lee</author>
    <p>
      Simplify the following expressions by combining like terms, if possible.
    </p>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>4t+11r</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>12x-15x</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>6y-5y^2</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>5x^2+3x^2</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>3y+y^2-y</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>8x+11x+6x</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <pagebreak/>
    <p>
      Simplify the following expressions by combining like terms, if possible.
    </p>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>y-4y</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>\frac{1}{2}x^2+\frac{1}{4}x^2</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>2.5x+6x</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>y+4y-10y</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
    <sidebyside>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>x-0.10x</m>
          </p>
        </statement>
      </exercise>
      <exercise workspace="25%">
        <statement>
          <p>
            <m>x+0.18x</m>
          </p>
        </statement>
      </exercise>
    </sidebyside>
  </worksheet> -->
</section>

