<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="section-adding-and-subtracting-polynomials" permid="zNJ">
  <title>Adding and Subtracting Polynomials</title>
  <objectives permid="ZoI">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="zGF">
      <li permid="tRt">
        <xref ref="mth65-add-subtract-multiply-square-polynomials" />
      </li>
    </ul>
  </objectives>

  <introduction permid="FvR">
    <figure permid="mul">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-ef9FnOLhpBG_Z0sQd6-7s-" />
    </figure>

    <p permid="afT">
      A polynomial is a particular type of algebraic expression used for things all around us.

      <ul permid="LUX">
        <li permid="ZYC">
          <p permid="BKn">
            A company's sales, <m>s</m>
            (in millions of dollars),
            can be modeled by <m>2.2t+5.8</m>,
            where <m>t</m> stands for the number of years since <m>2010</m>.
          </p>
        </li>

        <li permid="GfL">
          <p permid="hRw">
            The height of an object from the ground, <m>h</m>
            (in feet),
            launched upward from the top of a building can be modeled by <m>-16t^2+32t+300</m>,
            where <m>t</m> represents the amount of time
            (in seconds)
            since the launch.
          </p>
        </li>

        <li permid="mmU">
          <p permid="NYF">
            The volume of an open-top box with a square base, <m>V</m>
            (in cubic inches),
            can be calculated by <m>30s^2-\frac{1}{2}s^2</m>,
            where <m>s</m> stands for the length of the square base,
            and the box sides have to be cut from a certain square piece of metal.
          </p>
        </li>
      </ul>
    </p>

    <p permid="Gnc">
      All of the expressions above are <term>polynomials</term>.
      In this section,
      we will learn some basic vocabulary relating to polynomials and we'll then learn how to add and subtract polynomials.
    </p>
  </introduction>

  <subsection permid="fUS">
    <title>Polynomial Vocabulary</title>
    <definition xml:id="definition-polynomial" permid="tYx">
      <idx><h>polynomial</h></idx>
      <statement>
        <p permid="zNW">
          A <term>polynomial</term> is an expression that consists of terms summed together.
          Each term must be the product of a number and one or more variables raised to whole number powers.
          Since <m>0</m> is a whole number,
          a term can just be a number.
          A polynomial may have just one term.
          The expression <m>0</m> is also considered a polynomial,
          with zero terms.
        </p>
      </statement>
    </definition>

    <p permid="UqH">
      Some examples of polynomials in one variable are:
      <me permid="aPN">
        x^2-5x+2\qquad t^3-1\qquad 7y
      </me>.
      The expression <m>3x^4y^3+7xy^2-12xy</m> is an example of a polynomial in several variables.
    </p>

    <definition xml:id="definition-term-polynomial" permid="afG">
      <idx><h>polynomial</h><h>terms of</h></idx>
      <statement>
        <p permid="fVf">
          A <term>term</term>
              <idx><h>term</h></idx>
          of a polynomial is the product of a numerical coefficient and one or more variables raised to whole number powers.
          Since <m>0</m> is a whole number,
          a term can just be a number.
        </p>
      </statement>
    </definition>

    <p permid="AxQ">
      For example:

      <ul permid="VoJ">
        <li permid="Sud">
          <p permid="ufO">
            the polynomial <m>x^2-5x+3</m> has three terms:
            <m>x^2</m>, <m>-5x</m>, and <m>3</m>;
          </p>
        </li>

        <li permid="yBm">
          <p permid="amX">
            the polynomial <m> 3x^4+7xy^2-12xy</m> also has three terms;
          </p>
        </li>

        <li permid="eIv">
          <p permid="Gug">
            the polynomial <m>t^3-1</m> has two terms.
          </p>
        </li>
      </ul>
    </p>

    <definition xml:id="definition-coefficient" permid="GmP">
      <idx><h>polynomial</h><h>coefficients of</h></idx>
      <idx>coefficient</idx>
      <statement>
        <p permid="Mco">
          The <term>coefficient</term>
          (or numerical coefficient)
          of a term is the numerical factor in the term.
        </p>
      </statement>
    </definition>

    <p permid="gEZ">
      For example:

      <ul permid="BvS">
        <li permid="KPE">
          <p permid="mBp">
            the coefficient of the term
            <m>\frac{4}{3}x^6</m> is <m>\frac{4}{3}</m>;
          </p>
        </li>

        <li permid="qWN">
          <p permid="SIy">
            the coefficient of the second term of the polynomial <m>x^2-5x+3</m> is <m>-5</m>;
          </p>
        </li>

        <li permid="XdW">
          <p permid="yPH">
            the coefficient of the term
            <m>\frac{y^7}{4}</m> is <m>\frac{1}{4}</m>.
          </p>
        </li>
      </ul>
    </p>

    <remark>
      <p permid="MMi">
        Because variables in polynomials must have whole number exponents,
        a polynomial will never have a variable in the denominator of a fraction or under a square root
        (or any other radical).
      </p>
    </remark>

    <exercise permid="rdR">
      <webwork>
          <setup>

            <pg-code>
                $yes=PopUp(['?','is', 'is not'],1);
                $no=PopUp(['?','is', 'is not'],2);
            </pg-code>
          </setup>
          <statement>
            <p permid="SBu">
              Identify which of the following are polynomials and which are not.

              <ol label="a." permid="scg">
                <li permid="MER">
                  <p permid="eWQ">
                    The expression <m>-2x^9-\frac{7}{13}x^3-1</m> <var name="$yes" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="sMa">
                  <p permid="LdZ">
                    The expression <m>5x^{-2}-5x^2+3</m> <var name="$no" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="YTj">
                  <p permid="rli">
                    The expression <m>\sqrt{2}x-\frac{3}{5}</m> <var name="$yes" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="Fas">
                  <p permid="Xsr">
                    The expression <m>5x^3-5^{-5}x-x^4</m> <var name="$yes" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="lhB">
                  <p permid="DzA">
                    The expression <m>\frac{25}{x^2}+23-x</m> <var name="$no" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="RoK">
                  <p permid="jGJ">
                    The expression <m>37x^6-x+8^{\frac{4}{3}}</m> <var name="$yes" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="xvT">
                  <p permid="PNS">
                    The expression <m>\sqrt{7x}-4x^3</m> <var name="$no" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="dDc">
                  <p permid="vVb">
                    The expression <m>6x^{\frac{3}{2}}+1</m> <var name="$no" form="popup"/> a polynomial.
                  </p>
                </li>

                <li permid="JKl">
                  <p permid="cck">
                    The expression <m>6^x-3x^6</m> <var name="$no" form="popup"/> a polynomial.
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution permid="qmT">
            <p permid="quk">
              <ol label="a." permid="uWM">
                <li permid="pRu">
                  <p permid="Ijt">
                    The expression <m>-2x^9-\frac{7}{13}x^3-1</m> is a polynomial.
                  </p>
                </li>

                <li permid="VYD">
                  <p permid="oqC">
                    The expression <m>5x^{-2}-5x^2+3</m> is not a polynomial because it has negative exponents on a variable.
                  </p>
                </li>

                <li permid="CfM">
                  <p permid="UxL">
                    The expression <m>\sqrt{2}x-\frac{3}{5}</m> is a polynomial.
                    Note that <em>coefficients</em>
                    can have radicals even though variables cannot,
                    and the square root here is <em>only</em> applied to the <m>2</m>.
                  </p>
                </li>

                <li permid="imV">
                  <p permid="AEU">
                    The expression <m>5x^3-5^{-5}x-x^4</m> is a polynomial.
                    Note that <em>coefficients</em>
                    can have negative exponents even though variables cannot.
                  </p>
                </li>

                <li permid="Oue">
                  <p permid="gMd">
                    The expression <m>\frac{25}{x^2}+23-x</m> is not a polynomial because it has a variable in a denominator.
                  </p>
                </li>

                <li permid="uBn">
                  <p permid="MTm">
                    The expression <m>37x^6-x+8^{\frac{4}{3}}</m> is a polynomial.
                    Note that <em>coefficients</em>
                    can have fractional exponents even though variables cannot.
                  </p>
                </li>

                <li permid="aIw">
                  <p permid="tav">
                    The expression <m>\sqrt{7x}-4x^3</m> is not a polynomial because it has a variable inside a radical.
                  </p>
                </li>

                <li permid="GPF">
                  <p permid="ZhE">
                    The expression <m>6x^{\frac{3}{2}}+1</m> is not a polynomial because a variable has a fractional exponent.
                  </p>
                </li>

                <li permid="mWO">
                  <p permid="FoN">
                    The expression <m>6^x-3x^6</m> is not a polynomial because it has a variable in an exponent.
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>

    <definition xml:id="definition-degree" permid="mtY">
      <idx>degree</idx>
      <idx><h>polynomial</h><h>degree of a term</h></idx>
      <idx>degree</idx>
      <statement>
        <p permid="sjx">
          When a term only has one variable,
          its <term>degree</term> is the exponent on that variable.
          When a term has more than on variable,
          its <term>degree</term> is the sum of the exponents on the variables in that term.
          When a term has no variables,
          its <term>degree</term> is <m>0</m>.
        </p>
      </statement>
    </definition>

    <p permid="sTr">
      For example:

      <ul permid="hDb">
        <li permid="Dlf">
          <p permid="lvW">
            the degree of <m>5x^2</m> is <m>2</m>;
          </p>
        </li>

        <li permid="jso">
          <p permid="RDf">
            the degree of <m>-\frac{4}{7}y^5</m> is <m>5</m>.
          </p>
        </li>

        <li permid="Pzx">
          <p permid="xKo">
            the degree of <m>-4x^2y^3</m> is <m>5</m>.
          </p>
        </li>
      </ul>
    </p>

    <p permid="ZaA">
      Polynomial terms are often classified by their degree.
      In doing so,
      we would refer to <m>5x^2</m> as a second-degree term.
    </p>

    <definition xml:id="definition-degree-polynomial" permid="SBh">
      <statement>
        <p permid="YqG">
          The <term>degree of a polynomial</term><idx><h>polynomial</h><h>degree of a polynomial</h></idx> is the greatest degree that appears amongst its terms.
          If the polynomial is just <m>0</m>,
          it has no terms, and we say its degree is <m>-1</m>.
        </p>
      </statement>
    </definition>

    <definition xml:id="definition-leading-term" permid="yIq">
      <statement>
        <p permid="ExP">
          The <term>leading term</term><idx><h>polynomial</h><h>leading term</h></idx> of a polynomial is the term with the greatest degree
          (assuming there is one, and there is no tie).
        </p>
      </statement>
    </definition>

    <p permid="FhJ">
      For example, the degree of the polynomial
      <m>x^2-5x+3</m> is <m>2</m> because the terms have degrees <m>2</m>,
      <m>1</m>, and <m>0</m>, and <m>2</m> is the largest.
      Its leading term is <m>x^2</m>.
      Polynomials are often classified by their degree,
      and we would say that <m>x^2-5x+3</m> is a second-degree polynomial.
    </p>

    <p permid="loS">
      The coefficient of a polynomial's leading term is called the polynomial's
      <term>leading coefficient</term>.
          <idx><h>polynomial</h><h>leading coefficient</h></idx>
      For example,
      the leading coefficient of <m>x^2-5x+3</m> is <m>1</m>
      (because <m>x^2=1\cdot x^2</m>).
    </p>

    <definition xml:id="definition-constant-term" permid="ePz">
      <statement>
        <p permid="kEY">
          A term with no variable factor is called a
          <term>constant term</term>.
              <idx><h>constant term</h></idx>
              <idx><h>polynomial</h><h>constant term of</h></idx>
        </p>
      </statement>
    </definition>

    <p permid="Rwb">
      For example,
      the constant term of the polynomial <m>x^2-5x+3</m> is <m>3</m>.
    </p>

    <p permid="xDk">
      There are some special names for polynomials with certain degrees:

      <ul permid="NKk">
        <li permid="vGG">
          <p permid="dRx">
            A zero-degree polynomial is called a
            <term>constant polynomial</term>
            or simply a <term>constant</term>.
          </p>

          <p permid="JYG">
            An example is the polynomial <m>7</m>,
            which has degree zero because it can be viewed as <m>7x^0</m>.
          </p>
        </li>

        <li permid="bNP">
          <p permid="qfP">
            A first-degree polynomial is called a
            <term>linear polynomial</term>.
          </p>

          <p permid="WmY">
            An example is <m>-2x+7</m>.
          </p>
        </li>

        <li permid="HUY">
          <p permid="Cuh">
            A second-degree polynomial is called a
            <term>quadratic polynomial</term>.
          </p>

          <p permid="iBq">
            An example is <m>4x^2-2x+7</m>.
          </p>
        </li>

        <li permid="och">
          <p permid="OIz">
            A third-degree polynomial is called a
            <term>cubic polynomial</term>.
          </p>

          <p permid="uPI">
            An example is <m>x^3+4x^2-2x+7</m>.
          </p>
        </li>
      </ul>

      Fourth-degree and fifth-degree polynomials are called quartic and quintic polynomials,
      respectively.
      If the degree of the polynomial,
      <m>n</m>, is greater than five,
      we'll simply call it an <m>n</m>th-degree polynomial.
      For example, the polynomial
      <m>5x^8-4x^5+1</m> is an <m>8</m>th-degree polynomial.
    </p>

    <remark xml:id="remark-standard-form">
      <p permid="dKt">
        To help us recognize a polynomial's degree,
        it is the standard convention to write a polynomial's terms in order from greatest-degree term to lowest-degree term.
        When a polynomial is written in this order,
        it is written in <term>standard form</term>.
        For example,
        it is standard practice to write <m>7-4x-x^2</m> as
        <m>-x^2-4x+7</m> since <m>-x^2</m> is the leading term.
        By writing the polynomial in standard form,
        we can look at the first term to determine both the polynomial's degree and leading term.
      </p>
    </remark>

    <p permid="JRC">
      There are special names for polynomials with a small number of terms:
    </p>

    <definition xml:id="definition-monomial-binomial-trinomial" permid="KWI">
      <statement>
        <p permid="QMh">
          <ul permid="fNO">
            <li permid="Ujq">
              <p permid="aWR">
                A polynomial with one term,
                such as <m>3x^5</m> or <m>9</m>,
                is called a <term>monomial</term>.
                  <idx><h>monomial</h></idx>
                  <idx><h>polynomial</h><h>monomial</h></idx>
              </p>
            </li>

            <li permid="Aqz">
              <p permid="Hea">
                A polynomial with two terms,
                such as <m>3x^5+2x</m> or <m>-2x+1</m>,
                is called a <term>binomial</term>.
                  <idx><h>binomial</h></idx>
                  <idx><h>polynomial</h><h>binomial</h></idx>
              </p>
            </li>

            <li permid="gxI">
              <p permid="nlj">
                A polynomial with three terms,
                such as <m>x^2-5x+3</m>, is called a <term>trinomial</term>.
                  <idx><h>trinomial</h></idx>
                  <idx><h>polynomial</h><h>trinomial</h></idx>
              </p>
            </li>
          </ul>
        </p>
      </statement>
    </definition>
  </subsection>

  <subsection permid="Mcb">
    <title>Adding and Subtracting Polynomials</title>
    <idx><h>polynomial</h><h>addition and subtraction</h></idx>
    <idx><h>addition</h><h>of polynomials</h></idx>

    <example xml:id="example-ketchup-production-costs" permid="Xla">
      <title>Production Costs</title>
      <p permid="wTq">
        Bayani started a company that is devoted to one product: ketchup.
        The company's production costs only involve two components:
        supplies and labor.
        The cost of supplies, <m>S</m>
        (in thousands of dollars),
        can be modeled by <m>S=0.05x^2+2x+30</m>,
        where <m>x</m> is number of thousands of jars of ketchup produced.
        The labor cost for his employees, <m>L</m>
        (in thousands of dollars),
        can be modeled by <m>0.1x^2+4x</m>,
        where <m>x</m> again represents the number of jars they produce
        (in thousands of jars).
        Find a model for the company's total production costs.
      </p>

      <p permid="daz">
        Since Bayani's company only has these two costs,
        we can find a model for the total production costs, <m>C</m>
        (in thousands of dollars),
        by adding the supply costs and the labor costs:
        <me permid="GWW">
          C=\left(0.05x^2+2x+30\right)+\left(0.1x^2+4x\right)
        </me>
      </p>

      <p permid="JhI">
        To finish simplifying our total production cost model,
        we'll combine the like terms:
        <md permid="nef">
          <mrow>C \amp= 0.05x^2+0.1x^2+2x+4x+30</mrow>
          <mrow>\amp= 0.15x^2+6x+30</mrow>
        </md>
        This simplified model can now calculate Bayani's total production costs <m>C</m>
        (in thousands of dollars)
        when the company produces <m>x</m> thousand jars of ketchup.
      </p>
    </example>

    <p permid="pYL">
      In short, the process of adding two or more polynomials involves recognizing and then combining the like terms.
    </p>

    <exercise permid="bUT">
      <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" seed="2"/>
    </exercise>
<!--         <example xml:id="example-polyadd1">
        <statement><p>Add <m>\left(5x^3+4x^2-6x\right)</m> and <m>\left(-3x^2+9x-2\right)</m>.</p></statement>
        <solution><p>First identify the like terms and then combine them.<md>
            <mrow>\left(5x^3+4x^2-6x\right)+\left(-3x^2+9x-2\right) \amp= 5x^3+4x^2+(-3x^2)+(-6x)+9x+(-2)</mrow>
            <mrow> \amp= 5x^3+x^2+3x-2</mrow>
        </md></p></solution></example>
 -->
    <example xml:id="example-polyadd2" permid="Dsj">
      <statement>
        <p permid="poR">
          Simplify the expression <m>\left(\frac{1}{2}x^2-\frac{2}{3}x-\frac{3}{2}\right)+\left(\frac{3}{2}x^2+\frac{7}{2}x-\frac{1}{4}\right)</m>.
        </p>
      </statement>
      <solution permid="lDa">
        <p permid="WBt">
          <md permid="Tlo">
            <mrow>\amp\left(\frac{1}{2}x^2-\frac{2}{3}x-\frac{3}{2}\right)+\left(\frac{3}{2}x^2+\frac{7}{2}x-\frac{1}{4}\right)</mrow>
            <mrow>\amp=\left(\frac{1}{2}x^2+\frac{3}{2}x^2\right)+\left(\left(-\frac{2}{3}x\right)+\frac{7}{2}x\right)+\left(\left(-\frac{3}{2}\right)+\left(-\frac{1}{4}\right)\right)</mrow>
            <mrow>\amp= \left(\frac{4}{2}x^2\right)+\left(\left(-\frac{4}{6}x\right)+\frac{21}{6}x\right)+\left(\left(-\frac{6}{4}\right)+\left(-\frac{1}{4}\right)\right)</mrow>
            <mrow>\amp= \left(2x^2\right)+\left(\frac{17}{6}x\right)+\left(-\frac{7}{4}\right)</mrow>
            <mrow>\amp=2x^2 +\frac{17}{6}x-\frac{7}{4}</mrow>
          </md>
        </p>
      </solution>
    </example>

    <example xml:id="example-profit-revenue-and-costs" permid="jzs">
      <title>Profit, Revenue, and Costs</title>
      <p permid="Vwa">
        From <xref ref="example-ketchup-production-costs">Example</xref>,
        we know Bayani's ketchup company's production costs, <m>C</m>
        (in thousands of dollars),
        for producing <m>x</m> thousand jars of ketchup is modeled by <m>C=0.15x^2+6x+30</m>.
        The revenue, <m>R</m>
        (in thousands of dollars),
        from selling the ketchup can be modeled by <m>R=13x</m>,
        where <m>x</m> stands for the number of thousands of jars of ketchup sold.
        The company's net profit can be calculated using the concept:
        <me permid="zsx">
          \text{net profit} = \text{revenue}  -  \text{costs}
        </me>
        Assuming all products produced will be sold,
        a polynomial to model the company's net profit, <m>P</m>
        (in thousands of dollars)
        is:
        <md permid="fzG">
          <mrow>P \amp= R-C</mrow>
          <mrow>\amp= \left(13x\right)-\left(0.15x^2+6x+30\right)</mrow>
          <mrow>\amp= 13x-0.15x^2-6x-30</mrow>
          <mrow>\amp= -0.15x^2+\left(13x+(-6x)\right)-30</mrow>
          <mrow>\amp=-0.15x^2+7x-30</mrow>
        </md>
      </p>
    </example>

    <p permid="WfU">
      The key distinction between the addition and subtraction of polynomials is that when we subtract a polynomial,
      we must subtract each term in that polynomial.
    </p>

    <remark>
      <p permid="Cnd">
        Notice that our first step in simplifying the expression in <xref ref="example-profit-revenue-and-costs">Example</xref>
        was to subtract <em>every</em>
        term in the second expression.
        We can also think of this as distributing a factor of <m>-1</m> across the second polynomial,
        <m>0.15x^2+6x+30</m>, and then adding these terms as follows:
        <md permid="LGP">
          <mrow>P \amp= R-C</mrow>
          <mrow>\amp= \left(13x\right)-\left(0.15x^2+6x+30\right)</mrow>
          <mrow>\amp= 13x+(-1)(0.15x^2)+(-1)(6x)+(-1)(30)</mrow>
          <mrow>\amp= 13x-0.15x^2-6x-30</mrow>
          <mrow>\amp= -0.15x^2+\left(13x+(-6x)\right)-30</mrow>
          <mrow>\amp=-0.15x^2+7x-30</mrow>
        </md>
      </p>
    </remark>

    <example xml:id="example-poysub1" permid="PGB">
      <statement>
        <p permid="BDj">
          Subtract <m>\left(5x^3+4x^2-6x\right)-\left(-3x^2+9x-2\right)</m>.
        </p>
      </statement>
      <solution permid="RKj">
        <p permid="CIC">
          We must first subtract every term in
          <m>\left(-3x^2+9x-2\right)</m> from <m>\left(5x^3+4x^2-6x\right)</m>.
          Then we can combine like terms.
          <md permid="rNY">
            <mrow>\amp\left(5x^3+4x^2-6x\right)-\left(-3x^2+9x-2\right)</mrow>
            <mrow>\amp= 5x^3+4x^2-6x \highlight{{}+{}} 3x^2 \highlight{{}-{}} 9x \highlight{{}+{}} 2</mrow>
            <mrow>\amp= 5x^3+\left(4x^2+3x^2\right)+\left(-6x+(-9x)\right)+2</mrow>
            <mrow>\amp= 5x^3+7x^2-15x+2</mrow>
          </md>
        </p>
      </solution>
    </example>

    <exercise permid="Icc">
      <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" seed="3"/>
    </exercise>

    <p permid="ium">
      Let's look at one more example involving multiple variables.
      Remember that like terms must have the same variable(s) with the same exponent.
    </p>

    <example xml:id="example-polysub2" permid="vNK">
      <statement>
        <p permid="hKs">
          Subtract <m>\left( 3x^2y+8xy^2-17y^3 \right)-\left(2x^2y+11xy^2+4y^2 \right)</m>.
        </p>
      </statement>
      <solution permid="xRs">
        <p permid="iPL">
          Again, we'll begin by subtracting each term in <m>\left(2x^2y+11xy^2+4y^2\right)</m>.
          Once we've done this, we'll need to identify and combine like terms.
          <md permid="XVh">
            <mrow>\amp\left( 3x^2y+8xy^2-17y^3 \right)-\left(2x^2y+11xy^2+4y^2\right)</mrow>
            <mrow>\amp=
            3x^2y+8xy^2-17y^3 \highlight{{}-{}} 2x^2y \highlight{{}-{}} 11xy^2 \highlight{{}-{}} 4y^2</mrow>
            <mrow>\amp=\left(3x^2y+\left(-2x^2y\right)\right)+\left(8xy^2+\left(-11xy^2\right)\right)+\left(-17y^3\right)+\left(-4y^2\right)</mrow>
            <mrow>\amp= x^2y-3xy^2-17y^3-4y^2</mrow>
          </md>
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="sjk">
    <title>Evaluating Polynomial Expressions</title>
    <p permid="OBv">
      Evaluating expressions was introduced in <xref ref="section-variables-and-evaluating-expressions">Section</xref>,
      and involves replacing the variable(s) in an expression with specific numbers and calculating the result.
      Here, we will look at evaluating polynomial expressions.
    </p>

    <example permid="ojl">
      <statement>
        <p permid="NRB">
          Evaluate the expression <m>-12y^3+4y^2-9y+2</m> for <m>y=-5</m>.
        </p>
      </statement>
      <solution permid="dYB">
        <p permid="OWU">
          We will replace <m>y</m> with <m>-5</m> and simplify the result:
          <md permid="Ecq">
            <mrow>-12y^3+4y^2-9y+2 \amp= -12(\substitute{-5})^3+4(\substitute{-5})^2-9(\substitute{-5})+2</mrow>
            <mrow>\amp= -12(-125)+4(25)+45+2</mrow>
            <mrow>\amp= 1647</mrow>
          </md>
        </p>
      </solution>
    </example>

    <remark>
      <p permid="uIE">
        Recall that <m>(-5)^2</m> and <m>-5^2</m> are not the same expressions.
        The first expression, <m>(-5)^2</m>,
        represents the number <m>-5</m> squared,
        and is <m>(-5)(-5)=25</m>.
        The second expression, <m>-5^2</m>,
        is the <em>opposite</em> of the number <m>5</m> squared,
        and is <m>-5^2=-(5\cdot 5) = -25</m>.
      </p>
    </remark>

    <example permid="Uqu">
      <statement>
        <p permid="tYK">
          Evaluate the expression <m>C=0.15x^2+6x+30</m> from <xref ref="example-ketchup-production-costs">Example</xref>
          for <m>x=10</m> and explain what this means in context.
        </p>
      </statement>
      <solution permid="KfK">
        <p permid="ved">
          We will replace <m>x</m> with <m>10</m>:
          <md permid="kjz">
            <mrow>C\amp=0.15x^2+6x+30</mrow>
            <mrow>\amp=0.15(\substitute{10})^2+6(\substitute{10})+30</mrow>
            <mrow>\amp=105</mrow>
          </md>
          In context, we can interpret this as it costing
          <m>\$105{,}000</m> to produce <m>10{,}000</m> jars of ketchup.
        </p>
      </solution>
    </example>

    <exercise permid="AxD">
      <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" seed="3"/>
    </exercise>
  </subsection>

  <exercises permid="Yqt">
    <exercisegroup cols="2" permid="ExC">
      <title>Review and Warmup</title>
      <exercise permid="gEM">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="yID">
                List the terms in each expression.

                <ol label="a." permid="Yjp">
                  <li permid="TdX">
                    <p permid="Tss">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="zzB">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="zlg">
                    <p permid="fGK">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="LNT">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="fsp">
                    <p permid="rVc">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Ycl">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Lzy">
                    <p permid="Eju">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="kqD">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="Wuc">
              <p permid="blm">
                <ol label="a." permid="bdV">
                  <li permid="rGH">
                    <p permid="QxM">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="XNQ">
                    <p permid="wEV">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="DUZ">
                    <p permid="cMe">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="kci">
                    <p permid="ITn">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="MLV">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="ePM">
                List the terms in each expression.

                <ol label="a." permid="Eqy">
                  <li permid="Qjr">
                    <p permid="paw">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="VhF">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="wqA">
                    <p permid="BoO">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="hvX">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="cxJ">
                    <p permid="NDg">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="tKp">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="IES">
                    <p permid="ZRy">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="FYH">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="CBl">
              <p permid="Hsv">
                <ol label="a." permid="Hle">
                  <li permid="oMb">
                    <p permid="mfQ">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="UTk">
                    <p permid="SmZ">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="Bat">
                    <p permid="yui">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="hhC">
                    <p permid="eBr">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="sTe">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="KWV">
                List the terms in each expression.

                <ol label="a." permid="kxH">
                  <li permid="NoL">
                    <p permid="KIA">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="qPJ">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="tvU">
                    <p permid="WWS">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="Deb">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="ZDd">
                    <p permid="jlk">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Pst">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="FKm">
                    <p permid="vzC">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="bGL">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="iIu">
              <p permid="nzE">
                <ol label="a." permid="nsn">
                  <li permid="lRv">
                    <p permid="HNU">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="RYE">
                    <p permid="nVd">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="yfN">
                    <p permid="Ucm">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="emW">
                    <p permid="Ajv">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="Zan">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="ree">
                List the terms in each expression.

                <ol label="a." permid="QEQ">
                  <li permid="Kuf">
                    <p permid="gqE">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="MxN">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="qBo">
                    <p permid="sEW">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="YMf">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="WIx">
                    <p permid="ETo">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="lax">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="CPG">
                    <p permid="RhG">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="xoP">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="OPD">
              <p permid="TGN">
                <ol label="a." permid="Tzw">
                  <li permid="iWP">
                    <p permid="dvY">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="PdY">
                    <p permid="JDh">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="vlh">
                    <p permid="pKq">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="bsq">
                    <p permid="VRz">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="kEL">

      <exercise permid="Fhw">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Xln">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Dsw">
                <ol label="a." permid="wLZ">
                  <li permid="Hzz">
                    <p permid="BYI">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="ifR">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="nGI">
                    <p permid="Ona">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="uuj">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="TNR">
                    <p permid="aBs">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="GIB">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="zVa">
                    <p permid="mPK">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="SWT">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="loF">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="jzF">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="PGO">
                <ol label="a." permid="cTi">
                  <li permid="gcj">
                    <p permid="zec">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="fll">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Mjs">
                    <p permid="Lsu">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="rzD">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="sqB">
                    <p permid="XGM">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="DNV">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="YxK">
                    <p permid="jVe">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Qcn">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="RvO">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="vNX">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="bVg">
                <ol label="a." permid="Jar">
                  <li permid="EET">
                    <p permid="wjw">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="cqF">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="kMc">
                    <p permid="IxO">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="oEX">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="QTl">
                    <p permid="UMg">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="ATp">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="xau">
                    <p permid="hay">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="NhH">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="xCX">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Icp">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="ojy">
                <ol label="a." permid="phA">
                  <li permid="dhD">
                    <p permid="toQ">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="ZvZ">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="JoM">
                    <p permid="FDi">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="lKr">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="pvV">
                    <p permid="RRA">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="xYJ">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="VDe">
                    <p permid="efS">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Knb">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="QLU">
      <title>Vocabulary Questions</title>
      <exercise permid="dKg">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract0.pg" />
      </exercise>

      <exercise permid="JRp">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract0.pg" />
      </exercise>

      <exercise permid="pYy">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract5.pg" />
      </exercise>

      <exercise permid="WfH">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract5.pg" />
      </exercise>
            <!-- seed set to give distinct degrees -->
      <exercise permid="CmQ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract10.pg" seed="725"/>
      </exercise>

      <exercise permid="itZ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract10.pg" seed="728"/>
      </exercise>

      <exercise permid="OBi">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract11.pg" />
      </exercise>

      <exercise permid="uIr">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract11.pg" />
      </exercise>

      <exercise permid="aPA">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract15.pg" />
      </exercise>

      <exercise permid="GWJ">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract15.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="wTd">

      <exercise permid="ndS">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar10.pg" />
      </exercise>

      <exercise permid="Tlb">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar10.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="dam">
      <title>Simplifying Polynomials</title>
      <exercise permid="zsk">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract20.pg" />
      </exercise>

      <exercise permid="fzt">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract20.pg" />
      </exercise>

      <exercise permid="LGC">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" />
      </exercise>

      <exercise permid="rNL">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract25.pg" />
      </exercise>

      <exercise permid="XUU">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract35.pg" />
      </exercise>

      <exercise permid="Ecd">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract35.pg" />
      </exercise>

      <exercise permid="kjm">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract40.pg" />
      </exercise>

      <exercise permid="Qqv">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract40.pg" />
      </exercise>

      <exercise permid="wxE">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract45.pg" />
      </exercise>

      <exercise permid="cEN">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract45.pg" />
      </exercise>

      <exercise width="wide" permid="ILW">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract50.pg" />
      </exercise>

      <exercise width="wide" permid="oTf">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract50.pg" />
      </exercise>

      <exercise permid="Vao">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract55.pg" />
      </exercise>

      <exercise permid="Bhx">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract55.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="Jhv">

      <exercise permid="hoG">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract80.pg" />
      </exercise>

      <exercise permid="NvP">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract80.pg" />
      </exercise>

      <exercise permid="tCY">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract85.pg" />
      </exercise>

      <exercise permid="ZKh">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract85.pg" />
      </exercise>

      <exercise permid="FRq">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" />
      </exercise>

      <exercise permid="lYz">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract90.pg" />
      </exercise>

      <exercise permid="SfI">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract95.pg" />
      </exercise>

      <exercise permid="ymR">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract95.pg" />
      </exercise>

      <exercise permid="eua">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract100.pg" />
      </exercise>

      <exercise permid="KBj">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract100.pg" />
      </exercise>

      <exercise permid="qIs">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract105.pg" />
      </exercise>

      <exercise permid="WPB">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract105.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="poE">

      <exercise width="wide" permid="CWK">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract130.pg" />
      </exercise>

      <exercise width="wide" permid="jdT">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract130.pg" />
      </exercise>

      <exercise width="wide" permid="Plc">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract135.pg" />
      </exercise>

      <exercise width="wide" permid="vsl">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract135.pg" />
      </exercise>

      <exercise permid="bzu">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar15.pg" />
      </exercise>

      <exercise permid="HGD">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar15.pg" />
      </exercise>

      <exercise permid="nNM">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar20.pg" />
      </exercise>

      <exercise permid="TUV">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar20.pg" />
      </exercise>

      <exercise width="wide" permid="Ace">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar25.pg" />
      </exercise>

      <exercise width="wide" permid="gjn">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar25.pg" />
      </exercise>

      <exercise permid="Mqw">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar30.pg" />
      </exercise>

      <exercise permid="sxF">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar30.pg" />
      </exercise>

      <exercise width="wide" permid="YEO">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar35.pg" />
      </exercise>

      <exercise width="wide" permid="ELX">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar35.pg" />
      </exercise>

      <exercise permid="kTg">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar40.pg" />
      </exercise>

      <exercise permid="Rap">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar40.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="VvN">

      <exercise permid="xhy">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract140.pg" />
      </exercise>

      <exercise permid="doH">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtract140.pg" />
      </exercise>

      <exercise permid="JvQ">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar55.pg" />
      </exercise>

      <exercise permid="pCZ">
        <webwork source="BasicAlgebra/PolynomialBasics/polyMultVar55.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="BCW">
      <title>Evaluating Polynomials</title>
      <exercise permid="VKi">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <exercise permid="BRr">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <exercise permid="hYA">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate110.pg" />
      </exercise>

      <exercise permid="OfJ">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate110.pg" />
      </exercise>

      <exercise permid="umS">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="aub">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="GBk">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="mIt">
        <webwork source="BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="SPC">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="yWL">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="fdU">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="Lld">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="rsm">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="Xzv">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="DGE">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="jNN">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="hKf">
      <title>Applications of Simplifying Polynomials</title>
      <exercise permid="PUW">
        <webwork source="BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise>

      <exercise permid="wcf">
        <webwork source="BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="NRo">

      <exercise permid="cjo">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication10.pg" />
      </exercise>

      <exercise permid="Iqx">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication10.pg" />
      </exercise>

      <exercise permid="oxG">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication20.pg" />
      </exercise>

      <exercise permid="UEP">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication20.pg" />
      </exercise>

      <exercise permid="ALY">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication30.pg" />
      </exercise>

      <exercise permid="gTh">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication30.pg" />
      </exercise>

      <exercise permid="Naq">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication40.pg" />
      </exercise>

      <exercise permid="thz">
        <webwork source="BasicAlgebra/PolynomialBasics/PolyAddSubtractApplication40.pg" />
      </exercise>

    </exercisegroup>
  </exercises>
</section>

