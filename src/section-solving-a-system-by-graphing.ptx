<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="section-solving-a-system-by-graphing">
  <title>Solving a System by Graphing</title>
  <objectives>
    <title>PCC Course Content and Outcome Guide</title>
    <ul>
      <li>
        <xref ref="ccog-solve-system-of-linear-equations" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-model-with-systems" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-properly-define-variables-in-a-system" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-conclusions-complete-sentences-in-a-system" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-classify-parallel-perpendicular" text="local">MTH 60 CCOG</xref>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      In <xref ref="chapter-graphing-lines"/> we learned a few ways we can graph <em>one</em> line
      in the plane. Now we will graph <em>two</em> lines simultaneoulsy and use what we see to
      identify the solution set to a <q>system of two linear equations in two variables</q>.
    </p>

    <figure>
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-c8HMsuhb9oJTIJBEvrrZiH" />
    </figure>
  </introduction>

  <subsection>
    <title>Systems of Two Linear Equations in Two Variables</title>
    <p>
      There are times when two linear equations (each one with the same two variables) are relevant
      to some situation at the same time. When this happens, we have a <term>system of two equations
      in two variables</term> which maybe we can write this way:
      <me>
        \left\{
        \begin{alignedat}{4}
        y \amp {}={} ax \amp {}+{} \amp b \\
        y \amp {}={} cx \amp {}+{} \amp d
        \end{alignedat}
        \right.
      </me>
      The large left brace indicates that this is a collection of two distinct equations, not one
      equation that was somehow algebraically manipulated into an equivalent equation. In the
      system above, <m>a</m>, <m>b</m>, <m>c</m>, and <m>d</m> are specific numbers, while <m>x</m>
      and <m>y</m> are the variables. The two line equations in the system above are both in
      slope-intercept form, but that is not required. Each line equation could be written in some
      other form and we would still call this a system of two equations in two variables.
    </p>
    <p>
      Let's explore an example of how these things can arise.
    </p>
    <example xml:id="example-fabiana-and-david">
      <p>
        Fabiana and David are running at constant speeds in parallel lanes on a track. David starts
        out ahead of Fabiana, but Fabiana is running faster. We want to determine when Fabiana will
        catch up with David.
      </p>
      <p>
        Suppose that Fabiana is running with a speed of <m>\frac{9}{4}\,\frac{\text{m}}{\text{s}}</m>.
        If she started out at position <m>0</m> meters, then her position in meters after <m>t</m>
        seconds is given by
        <me>
          p = \frac{9}{4}t
        </me>
        David is running more slowly, at only <m>2\,\frac{\text{m}}{\text{s}}</m>. But he had a head
        start, starting out at a position <m>2</m> meters ahead of Fabiana. So David's position in
        meters after <m>t</m> seconds is given by
        <me>
          p = 2t + 2
        </me>
        One of these equations represents Fabiana, and the other represents David. But imagine
        if you could find a point <m>(t_1,p_1)</m> that worked as a solution to Fabiana's equation
        and <em>also</em> as a solution to David's equation. That would mean there is a moment in
        time (<m>t_1</m> seconds after the clock started) when Fabiana's position equals David's
        position. (Both runners would be <m>p_1</m> meters from the starting point.) In other
        words, this would be the moment when Fabiana catches up to David.
      </p>
      <p>
        So we consider the two equations together:
        <me>
          \left\{
          \begin{alignedat}{4}
          p \amp {}={} \frac{9}{4}t\\
          p \amp {}={} 2t \amp {}+{} \amp 2
          \end{alignedat}
          \right.
        </me>
        We have a system of two equations in two variables. And if we can find a common solution
        <m>(t_1,p_1)</m> to both equations, we have figured out something meaningful.
      </p>
    </example>
    <p>
      A <term>solution to a system</term> is an ordered pair <m>(x_1,y_1)</m> that is a solution to
      both equations in the system. Of course the variables may be different letters<mdash/>they
      should be whatever two variables the equations are using.
    </p>
    <p>
      In <xref ref="example-fabiana-and-david"/>, there is a solution: <m>(8,18)</m>. You can verify
      that it works for both equations. Could you find that ordered pair yourself? In this section
      and the ones that follow, we will learn some techniques for finding it yourself. In this case,
      the solution tells us that it takes <quantity><mag>8</mag><unit base="second"/></quantity> for
      Fabiana to catch up with David. And when she does, they are
      <quantity><mag>18</mag><unit base="meter"/></quantity> from the starting point.
    </p>
    <p>
      For future reference, we can have some formal defintions now.
    </p>
    <definition xml:id="definition-system-of-linear-equations">
      <title>System of Linear Equations</title>                                                               <idx><h>Systems of linear equations</h></idx>
                                                                                                              <idx><h>Linear systems of equations</h><see>Systems of linear equations</see></idx>
                                                                                                              <idx><h>Solution(s)</h><h>of system of linear equations</h></idx>
      <statement>
        <p>
          A <term>system of linear equations</term> is any pairing of two (or more) linear equations.
          (But in this book we are only examining systems with <em>two</em> equations with <em>two</em>
          variables.) A <term>solution to a system of linear equations</term> is any point that is a
          solution to each of the equations in the system. The <term>solution set to a system of
          linear equations</term> is the collection of all solutions to the system. The solution set
          may be empty, may consist of one point only, or may have more.
        </p>
      </statement>
    </definition>
  </subsection>

  <subsection>
    <title>Solving a System of Equations by Graphing</title>                                                  <idx><h>Graphing</h><h>systems of linear equations to solve</h></idx>
                                                                                                              <idx><h>Systems of linear equations</h><h>solved by graphing</h></idx>
    <p>
      If the two equations in a system are both easy to graph, it might happen that we can find the
      solution to a system by graphing them both on the same axis system.
    </p>

    <example xml:id="example-fabiana-and-david-graph">                                                        <idx><h>Systems of linear equations</h><h>applications</h></idx>
      <p>
        Let's return to Fabiana and David from <xref ref="example-fabiana-and-david"/>. The system
        of equations was
        <me>
          \left\{
          \begin{alignedat}{4}
          p \amp {}={} \frac{9}{4}t\\
          p \amp {}={} 2t \amp {}+{} \amp 2
          \end{alignedat}
          \right.
        </me>
        And each of these two lines is straightforward to graph.
      </p>
      <sidebyside widths="47% 47%" margins="0%">
        <stack>
          <p>
            Fabiana's line has vertical intercept at <m>(0,0)</m> and slope <m>\frac{9}{4}</m>. So
            we can plot it by starting at the origin and using slope triangles that move <m>4</m>
            to the right, then up <m>9</m>.
          </p>
          <p>
            David's line has vertical intercept at <m>(0,2)</m> and slope <m>2</m>. So we can plot
            it by starting at <m>(0,2)</m> and using slope triangles that move <m>1</m>
            to the right, then up <m>2</m>.
          </p>
        </stack>
        <figure xml:id="figure-fabiana-and-david-graph">
          <caption>David and Fabiana's distances</caption>
          <image label="fabiana-and-david-graph">
            <description>
              a coordinate plane with a line for Fabiana and a line for David;
              Fabiana's line has a y-intercept of (0,0) and David's line has a y-intercept of (0,2);
              the lines cross at the point (8,18)
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[
                    xlabel={$t$, time (in seconds)},
                    ylabel={$p$, position (in meters)},
                    xmin=0,
                    xmax=10,
                    ymin=0,
                    ymax=20,
                    xtick={1,2,...,9},
                    minor xtick={1,2,...,9},
                    ytick={2,4,...,20},
                    minor ytick={1,2,...,20},
                  ]
                  \addplot[firstcurve, domain = 0:8.88,->]{9/4*x} node[pos=0.2, sloped, below] {Fabiana};
                  \addplot[secondcurve, domain = 0:9,->]{2*x+2} node[pos=0.15, sloped, above] {David};
                  \addplot[soliddot, color=firstcolor] coordinates {(0,0)};
                  \addplot[soliddot, color=secondcolor] coordinates {(0,2)};
                  \addplot[soliddot, color=thirdcolor] coordinates {(8, 18)} node[pos=0.25, below right] {$(8,18)$};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
        </figure>
      </sidebyside>

      <p>
        As we can see in <xref ref="figure-fabiana-and-david-graph"/>, the two line equations cross
        at the point <m>(8,18)</m>. Note that this means <m>(8,18)</m> is a solution to Fabiana's
        equation <em>and also</em> to David's equation. So there is a moment in time
        (<quantity><mag>8</mag><unit base="second"/></quantity>) when both runners are at the same
        position (<quantity><mag>18</mag><unit base="meter"/></quantity>). This means that
        <m>(8,18)</m> is the solution to our system of linear equation. And it means that it takes
        Fabiana <quantity><mag>8</mag><unit base="second"/></quantity> to catch up to David.
      </p>
    </example>

    <p>
      The lesson of <xref ref="example-fabiana-and-david-graph"/> is that we can find a solution to
      a system by graphing both lines and identifying where they cross.
    </p>

    <example>
      <statement>
        <p>
          Determine the solution to the system of equations graphed in
          <xref ref="figure-solve-system-using-graph"/>.
        </p>
        <figure xml:id="figure-solve-system-using-graph">
          <caption>Graph of a System of Equations</caption>
          <image label="intersection-graph" width="47%">
            <description>
              a cartesian plot with two intersecting lines;
              one line has a y-intercept of -2 and a slope of -1/4;
              the other line has a y-intercept of 5 and a slope of 2
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-7:7]{-1/3*x-2};
                  \addplot[secondcurve, domain=-6:1]{2*x+5};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
        </figure>
      </statement>
      <solution>
        <p>
          The two lines intersect where <m>x=-3</m> and <m>y=-1</m>, so there is only one solution.
          It is the point <m>(-3,-1)</m>. The solution set is <m>\{(-3,-1)\}</m>.
        </p>
      </solution>
    </example>

    <exercise label="solve-system-using-graph">
      <webwork>
        <pg-code>
          Context("Point");
          $answer = Point(3,2);
        </pg-code>
        <statement>
          <p>
            Determine the solution to the system of equations graphed below.
          </p>
          <image width="47%">
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-6:7]{x-1};
                  \addplot[secondcurve, domain=-2:7]{5-x};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            <var name="$answer" width="5"/>
          </p>
        </statement>
        <solution>
          <p>
            The two lines intersect where <m>x=3</m> and <m>y=2</m>, so the solution is the point
            <m>(3,2)</m>.
          </p>
        </solution>
      </webwork>
    </exercise>

    <p>
      Now let's solve a system where we need to make the graph ourselves.
    </p>

    <example>
      <p>
        Solve the following system of equations by graphing:
        <me>
          \left\{
          \begin{alignedat}{4}
          y \amp {}={} \amp \tfrac{1}{2}x \amp {}+{} \amp 4 \\
          y \amp {}={} \amp {-x} \amp {}-{} \amp 5
          \end{alignedat}
          \right.
        </me>
      </p>
      <sidebyside widths="47% 47%" margins="0%">
        <p>
          Notice that each of these equations is written in slope-intercept form. The first
          equation, <m>y=\frac{1}{2}x+4</m>, has slope <m>\frac{1}{2}</m> and <m>y</m>-intercept
          <m>(0,4)</m>. The second equation, <m>y=-x-5</m>, has slope <m>-1</m> and
          <m>y</m>-intercept <m>(0,-5)</m>. We can use this information to graph both lines.
        </p>
        <figure>
          <caption><m>y=\frac{1}{2}x+4</m> and <m>y=-x-5</m>.</caption>
          <image label="intersection-graph-solution">
            <description>
              a Cartesian grid with two intersecting lines;
              one line has a y-intercept of 4 and a slope of 1/2;
              the other line has a y-intercept of -5 and a slope of -1
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-7:6]{1/2*x+4} node[pos=0.25,sloped,above] {$y=\frac{1}{2}x+4$};
                  \addplot[secondcurve, domain=-7:2]{-1*x-5} node[pos=0.5,sloped,below] {$y=-x-5$};
                  \addplot[guideline,->] coordinates {(0,4) (2,4) (2,5)};
                  \addplot[guideline,->] coordinates {(0,4) (-2,4) (-2,3)};
                  \addplot[guideline,->] coordinates {(0,-5) (1,-5) (1,-6)};
                  \addplot[guideline,->] coordinates {(0,-5) (-1,-5) (-1,-4)};
                  \addplot[soliddot,color=firstcolor] coordinates {(0,4) (2,5) (-2,3)};
                  \addplot[soliddot,color=secondcolor] coordinates {(0,-5) (1,-6) (-1,-4)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
        </figure>
      </sidebyside>
      <p>
        It appears that the two lines intersect where <m>x=-6</m> and <m>y=1</m>, so the solution to
        the system of equations would be the point <m>(-6,1)</m>. However we should be careful.
        Maybe the lines are poorly drawn, or maybe they cross at a point <em>close</em> to
        <m>(-6,1)</m> that is too close for us to see. We should check that <m>(-6,1)</m> actually
        works as a solution to each of the original equations, since we have those equations.
        <md>
          <mrow>y\amp=\frac{1}{2}x+4\amp y\amp=-x-5</mrow>
          <mrow>\substitute{1}\amp\wonder{=}\frac{1}{2}(\substitute{-6})+4\amp \substitute{1}\amp\wonder{=}-(\substitute{-6})-5</mrow>
          <mrow>1\amp\confirm{=}-3+4\amp 1\amp\confirm{=}6-5</mrow>
        </md>
        This verifies that <m>(-6,1)</m> is the solution, and we write the solution set as
        <m>\{(-6,1)\}</m>.
      </p>
    </example>

    <exercise label="solve-system-graph-it-yourself">
      <webwork>
        <pg-macros>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <pg-code>
          $gt = GraphTool(
            "{line, solid, (0, -5), (3, -3)}",
            "{line, solid, (0, 2), (2, 1)}"
          )->with(
            availableTools => [ "LineTool" ],
            showInStatic => 0,
            cmpOptions => {
              list_checker => sub {
                my ($correct, $student, $ans, $value) = @_;
                return 0 if $ans->{isPreview};
                my $score = 0; my @errors; my $count = 1;
                my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                my @stdform = (
                  $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                  $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                );
                my $pointOnLine = sub {
                  my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                  return $a * $x + $b * $y + $c == 0;
                };
                my @line = (0, 0);
                for (@$student) {
                  my $nth = Value::List->NameForNumber($count++);
                  if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                    $line[0] = 1; $score += 1; next
                  }
                  if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                    $line[1] = 1; $score += 1; next
                  }
                  push(@errors, "The $nth line graphed is incorrect.");
                }
                return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
              }
            }
          );
          Context("Point");
          $solution = Point(6,-1);
        </pg-code>
        <statement>
          <p>
            Solve the following system of equations by graphing.
            <me>
              \left\{
                \begin{alignedat}{4}
                  y \amp {}={} \amp \tfrac{2}{3}x \amp {}-{} \amp 5 \\
                  y \amp {}={} \amp {-\tfrac12x} \amp {}+{} \amp 2
                \end{alignedat}
              \right.
            </me>
          </p>
          <p>
            <var name="$gt" width="1"/>
          </p>
          <instruction>
            Enter the solution here.
          </instruction>
          <p>
            <var name="$solution" width="5"/>
          </p>
        </statement>
        <solution>
          <p>
            Both of these equations are written in slope-intercept form. The first equation,
            <m>y=\frac{2}{3}x-5</m>, has slope <m>\frac{2}{3}</m> and <m>y</m>-intercept
            <m>(0,-5)</m>. The second equation, <m>y=-\frac{1}{2}x+2</m>, has slope
            <m>-\frac{1}{2}</m> and <m>y</m>-intercept <m>(0,2)</m>. We can use this information to
            graph both lines.
          </p>
          <image width="47%">
            <description>
              a Cartesian grid with two intersecting lines;
              one line has a y-intercept of -5 and a slope of 2/3;
              the other line has a y-intercept of 2 and a slope of -1/2
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-3:7]{2/3*x-5} node[pos=0.5,sloped,above] {\(y=\frac{2}{3}x-5\)};
                  \addplot[secondcurve, domain=-7:7]{-1/2*x+2} node[pos=0,sloped,above right] {\(y=-\frac{1}{2}x+2\)};
                  \addplot[guideline,->] coordinates {(0,-5) (3,-5) (3,-3)};
                  \addplot[guideline,->] coordinates {(0,-5) (-3,-5) (-3,-7)};
                  \addplot[guideline,->] coordinates {(0,2) (2,2) (2,1)};
                  \addplot[guideline,->] coordinates {(0,2) (-2,2) (-2,3)};
                  \addplot[soliddot,color=firstcolor] coordinates {(0,-5) (3,-3) (-3,-7)};
                  \addplot[soliddot,color=secondcolor] coordinates {(0,2) (2,1) (-2,3)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            It appears that the two lines intersect where <m>x=6</m> and <m>y=-1</m>, so the
            solution to the system of equations would be the point <m>(6,-1)</m>. However we should
            check that <m>(6,-1)</m> actually works as a solution to each of the original equations.
            <md>
              <mrow>y\amp=\frac{2}{3}x-5\amp y\amp=-\frac{1}{2}x+2</mrow>
              <mrow>\substitute{-1}\amp\wonder{=}\frac{2}{3}(\substitute{6})-5\amp \substitute{-1}\amp\wonder{=}-\frac{1}{2}(\substitute{6})+2</mrow>
              <mrow>-1\amp\confirm{=}4-5\amp -1\amp\confirm{=}-3+2</mrow>
            </md>
            This verifies that <m>(6,-1)</m> is the solution.
          </p>
        </solution>
      </webwork>
    </exercise>

    <exercise label="solve-system-graph-it-yourself-standard-form">
      <webwork>
        <pg-macros>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <pg-code>
          $gt = GraphTool(
            "{line, solid, (0, 4), (-12, 0)}",
            "{line, solid, (0, -4), (-4, 0)}"
          )->with(
            availableTools => [ "LineTool" ],
            showInStatic => 0,
            bBox => [-15, 15, 15, -15],
            ticksDistanceX => 5,
            ticksDistanceY => 5,
            minorTicksX => 0,
            minorTicksY => 0,
            cmpOptions => {
              list_checker => sub {
                my ($correct, $student, $ans, $value) = @_;
                return 0 if $ans->{isPreview};
                my $score = 0; my @errors; my $count = 1;
                my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                my @stdform = (
                  $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                  $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                );
                my $pointOnLine = sub {
                  my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                  return $a * $x + $b * $y + $c == 0;
                };
                my @line = (0, 0);
                for (@$student) {
                  my $nth = Value::List->NameForNumber($count++);
                  if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                    $line[0] = 1; $score += 1; next
                  }
                  if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                    $line[1] = 1; $score += 1; next
                  }
                  push(@errors, "The $nth line graphed is incorrect.");
                }
                return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
              }
            }
          );
          Context("Point");
          $solution = Point(-6,2);
        </pg-code>
        <statement>
          <p>
            Solve the following system of equations by graphing. Note that the equations are in
            standard form. To review plotting a line equation that is in standard form, see
            <xref ref="section-standard-form"/>.
            <me>
              \left\{
                \begin{alignedat}{4}
                  x \amp {}-{} \amp 3y \amp {}={} \amp {-12} \\
                  x \amp {}+{} \amp y \amp {}={} \amp {-4}
                \end{alignedat}
              \right.
            </me>
          </p>
          <p>
            <var name="$gt" width="1"/>
          </p>
          <instruction>
            Enter the solution here.
          </instruction>
          <p>
            <var name="$solution" width="5"/>
          </p>
        </statement>
        <solution>
          <p>
            Both of these equations are written in standard form. The first equation,
            <m>x-3y=-12</m>, has <m>x</m>-intercept at <m>(-12,0)</m> and <m>y</m>-intercept at
            <m>(0,4)</m>. The second equation, <m>x+y=-4</m>, has <m>x</m>-intercept at
            <m>(-4,0)</m> and <m>y</m>-intercept at <m>(0,-4)</m>. We can use this information to
            graph both lines.
          </p>
          <image width="47%">
            <description>
              a Cartesian grid with two intersecting lines;
              one line has a x-intercept of -12 and y-intercept of 4;
              the other line has x-intercept of -4 and y-intercept of -4
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[
                    xmin = -15,
                    xmax = 15,
                    ymin = -15,
                    ymax = 15,
                    xtick = {-15,-10,...,15},
                    ytick = {-15,-10,...,15},
                    minor xtick = {-15,-14,...,15},
                    minor ytick = {-15,-14,...,15},
                  ]
                  \addplot[firstcurve, domain=-15:15]{1/3*x+4} node[pos=1,sloped,above left] {\(x-3y=-12\)};
                  \addplot[secondcurve, domain=-15:11]{-x-4} node[pos=1,sloped,above left] {\(x+y=-4\)};
                  \addplot[soliddot,color=firstcolor] coordinates {(-12,0) (0, 4)};
                  \addplot[soliddot,color=secondcolor] coordinates {(-4,0) (0,-4)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            It appears that the two lines intersect where <m>x=-6</m> and <m>y=2</m>, so the
            solution to the system of equations would be the point <m>(-6,2)</m>. However we should
            check that <m>(-6,2)</m> actually works as a solution to each of the original equations.
            <md>
              <mrow>x-3y\amp=-12\amp x+y\amp=-4</mrow>
              <mrow>\substitute{-6}-3(\substitute{2})\amp\wonder{=}-12\amp \substitute{-6}+\substitute{2}\amp\wonder{=}-4</mrow>
              <mrow>-6-6\amp\confirm{=}-12\amp -4\amp\confirm{=}-4</mrow>
            </md>
            This verifies that <m>(-6,2)</m> is the solution.
          </p>
        </solution>
      </webwork>
    </exercise>

    <exercise label="solve-system-graph-it-yourself-point-slope-form">
      <webwork>
        <pg-macros>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <pg-code>
          $gt = GraphTool(
            "{line, solid, (2, 1), (3, 4)}",
            "{line, solid, (-1, -1), (2, -2)}"
          )->with(
            availableTools => [ "LineTool" ],
            showInStatic => 0,
            cmpOptions => {
              list_checker => sub {
                my ($correct, $student, $ans, $value) = @_;
                return 0 if $ans->{isPreview};
                my $score = 0; my @errors; my $count = 1;
                my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                my @stdform = (
                  $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                  $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                );
                my $pointOnLine = sub {
                  my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                  return $a * $x + $b * $y + $c == 0;
                };
                my @line = (0, 0);
                for (@$student) {
                  my $nth = Value::List->NameForNumber($count++);
                  if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                    $line[0] = 1; $score += 1; next
                  }
                  if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                    $line[1] = 1; $score += 1; next
                  }
                  push(@errors, "The $nth line graphed is incorrect.");
                }
                return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
              }
            }
          );
          Context("Point");
          $solution = Point(1,-2);
        </pg-code>
        <statement>
          <p>
            Solve the following system of equations by graphing. Note that the equations are in
            point-slope form. To review plotting a line equation that is in point-slope form, see
            <xref ref="section-point-slope-form"/>.
            <me>
              \left\{
                \begin{alignedat}{3}
                  y \amp {}={} \amp 3(x-2) \amp {}+{} \amp 1 \\
                  y \amp {}={} \amp -\tfrac{1}{2}(x+1) \amp {}-{} \amp 1
                \end{alignedat}
              \right.
            </me>
          </p>
          <p>
            <var name="$gt" width="1"/>
          </p>
          <instruction>
            Enter the solution here.
          </instruction>
          <p>
            <var name="$solution" width="5"/>
          </p>
        </statement>
        <solution>
          <p>
            Both of these equations are written in point-slope form. The first equation,
            <m>y=3(x-2)+1</m>, passes through <m>(2,1)</m> and has slope <m>3</m>. The second
            equation, <m>y=-\frac{1}{2}(x+1)-1</m>, passes through <m>(-1,-1)</m> and has slope
            <m>-\frac{1}{2}</m>. We can use this information to graph both lines.
          </p>
          <image width="47%">
            <description>
              a Cartesian grid with two intersecting lines;
              one line passes through (2,1) with slope 3;
              the other line passes through (-1,-1) with slope -1/2
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-0.66:4]{3*(x-2)+1} node[pos=1,sloped,above left] {\(y=3(x-2)+1\)};
                  \addplot[secondcurve, domain=-7:7]{-1/2*(x+1)-1} node[pos=0,sloped,above right] {\(y=-\frac{1}{2}(x+1)-1\)};
                  \addplot[guideline,->] coordinates {(2,1) (3,1) (3,4)};
                  \addplot[guideline,->] coordinates {(2,1) (1,1) (1,-2)};
                  \addplot[guideline,->] coordinates {(-1,-1) (1,-1) (1,-2)};
                  \addplot[guideline,->] coordinates {(-1,-1) (-3,-1) (-3,0)};
                  \addplot[soliddot,color=firstcolor] coordinates {(2,1) (3,4) (1,-2)};
                  \addplot[soliddot,color=secondcolor] coordinates {(-1,-1) (1,-2) (-3,0)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            It appears that the two lines intersect where <m>x=1</m> and <m>y=-2</m>, so the
            solution to the system of equations would be the point <m>(1,-2)</m>. However we should
            check that <m>(1,-2)</m> actually works as a solution to each of the original equations.
            <md>
              <mrow>y\amp=3(x-2)+1\amp y\amp=-\frac{1}{2}(x+1)-1</mrow>
              <mrow>\substitute{-2}\amp\wonder{=}3(\substitute{1}-2)+1\amp \substitute{-1}\amp\wonder{=}-\frac{1}{2}(\substitute{1}+1)-1</mrow>
              <mrow>-2\amp\confirm{=}3(-1)+1\amp -2\amp\confirm{=}-\frac{1}{2}(2)-1</mrow>
            </md>
            This verifies that <m>(1,-2)</m> is the solution.
          </p>
        </solution>
      </webwork>
    </exercise>

    <exercise xml:id="exercise-solve-system-application" label="solve-system-application">                                                               <idx><h>Systems of linear equations</h><h>applications</h></idx>
      <webwork>
        <pg-macros>
          <macro-file>parserLinearRelation.pl</macro-file>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <!-- This code is condensed (less human readable) to keep the URL length low -->
        <pg-code>
          Context("LinearRelation")->variables->are(t=>'Real',y=>'Real');
          @eq=(LinearRelation("y=16-0.8t"),LinearRelation("y=2+0.6t"));
          $m=MultiAnswer(@eq)->with(singleResult=>0,
          checker=>sub{
          my($c,$s,$self)=@_;
          my @s=@{$s};
          my @c=@{$c};
          if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
          elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
          elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
          else {return [0,0]}
          });
          $gt=GraphTool("{line,solid,(0,16),(5,12)}","{line,solid,(0,2),(5,5)}")->with(
          availableTools=>["LineTool"],showInStatic=>0,bBox=>[-1,20,15,-1],
          ticksDistanceX=>5,ticksDistanceY=>5,minorTicksX=>0,minorTicksY=>0,xAxisLabel=>'t',
          cmpOptions=>{list_checker=>sub{
          my($c,$s,$a,$v)=@_;
          return 0 if $ans->{isPreview};
          my $score=0; my @errors; my $count=1;
          my ($x1,$y1)=$c->[0]->extract(3)->value;
          my ($x2,$y2)=$c->[0]->extract(4)->value;
          my ($x3,$y3)=$c->[1]->extract(3)->value;
          my ($x4,$y4)=$c->[1]->extract(4)->value;
          my @std=($y1-$y2,$x2-$x1,$x1*$y2-$x2*$y1,$y3-$y4,$x4-$x3,$x3*$y4-$x4*$y3);
          my $p=sub{my ($A,$B,$C,$pt)=@_; my ($x,$y)=$pt->value; return $A*$x+$B*$y+$C==0;};
          my @l=(0,0);
          for (@$s) {
          my $nth=Value::List->NameForNumber($count++);
          if ($p->(@std[0..2],$_->extract(3))&amp;&amp;$p->(@std[0..2],$_->extract(4))) {$l[0]=1;$score += 1; next}
          if ($p->(@std[3..5],$_->extract(3))&amp;&amp;$p->(@std[3..5],$_->extract(4))) {$l[1]=1;$score += 1; next}
          push(@errors, "The $nth line graphed is incorrect.");
          }
          return (($l[0]&amp;&amp;$l[1]) ? $score : 0,@errors);
          }});
          $years=NumberWithUnits("10 yr");
          $population=Real(8);
        </pg-code>
        <introduction>
          <p>
            A college has a north campus and a south campus. The north campus has <m>16</m> thousand
            students, but enrollment has been declining by <m>0.8</m> thousand students per year.
            The newer south campus has only <m>2</m> thousand students, but enrollment has been
            increasing by <m>0.6</m> thousand students per year. If these trends continue, in how
            many years would the two campuses have the same number of students? Write a system of
            equations for this scenario, then solve it graphically to find the answer.
          </p>
          <instruction>
            Use <c>t</c> as the variable for how much time has passed, and <c>y</c> for the
            variable representing how many students are at one campus.
          </instruction>
        </introduction>
        <task>
          <statement>
            <p>
              Write two equations that form a system for this scenario.
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              The north campus has initial population value <m>16</m> and decreases with rate
              <m>0.8</m> thousand students per year. So one equation is <m>y=16-0.8t</m>.
            </p>
            <p>
              The south campus has initial population value <m>2</m> and increases with rate
              <m>0.6</m> thousand students per year. So the other equation is <m>y=2+0.6t</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Plot the lines for the system of two equations.
            </p>
            <p>
              <var name="$gt" width="1"/>
            </p>
          </statement>
          <solution>
            <p>
              For plotting, it may be helpful to write the system with the decimals converted to
              fractions:
              <me>
              \left\{
              \begin{alignedat}{3}
              y \amp {}={} \amp -\frac{4}{5}t \amp {}+{} \amp 16 \\
              y \amp {}={} \amp \frac{3}{5}t \amp {}+{} \amp 2
              \end{alignedat}
              \right.
              </me>
              So we see that we can use <m>(0,16)</m> and <m>(0,2)</m> as <m>y</m>-intercepts. And
              then for the first line, use slope triangles where we move <m>5</m> units to the right
              and then <m>4</m> units down. While for the second line, use slope triangles where we
              move <m>5</m> units to the right and then <m>3</m> units up.
            </p>
            <image width="47%">
              <description>
                a Cartesian grid with two intersecting lines;
                one line passes through (0,16) with slope -0.8;
                the other line passes through (0,2) with slope 0.6;
                the lines cross at (10,8)
              </description>
              <latex-image>
                \begin{tikzpicture}
                \begin{axis}[xmin=0,xmax=15,ymin=0,ymax=20,xtick={0,5,10,15},ytick={0,5,...,20},minor xtick={0,1,...,15},minor ytick={0,1,...,20},xlabel={\(t\)}]
                \addplot[firstcurve,domain=0:15]{16-0.8*x} node[pos=1,sloped,below left] {\(y=16-0.8t\)};
                \addplot[secondcurve,domain=0:15]{2+0.6*x} node[pos=1,sloped,above left] {\(y=2+0.6t\)};
                \addplot[guideline,->] coordinates {(0,16) (5,16) (5,12)};
                \addplot[guideline,->] coordinates {(0,2) (5,2) (5,5)};
                \addplot[soliddot,color=firstcolor] coordinates {(0,16) (5,12)};
                \addplot[soliddot,color=secondcolor] coordinates {(0,2) (5,5)};
                \end{axis}
                \end{tikzpicture}
              </latex-image>
            </image>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Based on the graph, how long will it be until the two campuses have the same number of
              students?
            </p>
            <p>
              <var name="$years" width="16"/>
            </p>
            <p>
              How many students will each campus have at that time?
            </p>
            <p>
              <var name="$population" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              The lines cross at <m>(10,8)</m>. So after <m>10</m> years, each campus will have
              <m>8</m> thousand students.
            </p>
          </solution>
        </task>
      </webwork>
    </exercise>
  </subsection>

  <subsection xml:id="subsection-special-systems-of-equations">
    <title>Special Systems of Equations</title>                                                               <idx><h>Systems of linear equations</h><h>with no solution</h></idx>
                                                                                                              <idx><h>Systems of linear equations</h><h>with infinitely many solutions</h></idx>
    <p>
      When we studied linear equations in <em>one</em> variable, there were two special cases
      discussed in detail in <xref ref="section-special-solution-sets"/>. One of these special cases
      was like with the equation <m>x=x+1</m>, where there simply is no solution at all. The
      solution set is empty. The other special case is like with the equation <m>x=x</m>, where
      there are infinitely many solutions. When solving <em>systems of two</em> linear equations in
      <em>two</em> variables, we have similar special cases to consider.
    </p>

    <example xml:id="example-solving-systems-by-graphing-parallel-lines">
      <title>Parallel Lines</title>
      <p>
        Consider the graphs of two lines with the same slope, <m>y=2x-4</m> and <m>y=2x+1</m>.
      </p>
      <figure>
        <caption>Graphs of <m>y=2x-4</m> and <m>y=2x+1</m></caption>
        <image width="50%" label="parallel-system">
          <description>
            a coordinate grid with two parallel lines;
            one line has a y-intercept of -4 and the other has a y-intercept of 1;
            they both have a slope of 2
          </description>
          <latex-image>
            \begin{tikzpicture}
              \begin{axis}[]
                \addplot[firstcurve,domain = -1.5:5.5]{2*x-4} node[pos=0.75,sloped,below] {$y=2x-4$};
                \addplot[secondcurve,domain = -4:3]{2*x+1} node[pos=0.75,sloped,below] {$y=2x+1$};
              \end{axis}
            \end{tikzpicture}
          </latex-image>
        </image>
      </figure>

      <p>
        For the system of equations
        <me>
          \left\{
            \begin{alignedat}{3}
              y \amp {}={} \amp 2x \amp {}-{} \amp 4 \\
              y \amp {}={} \amp 2x \amp {}+{} \amp 1
            \end{alignedat}
          \right.
        </me>
        what would the solution be? Since the two lines have the same slope, they are
        <term>parallel lines</term> and they never cross. This means that there is
        <em>no solution</em> to this system of equations. Because if there were a solution
        <m>(x_1,y_1)</m> then it would be a point that is on the first line and also on the second
        line. So it would be a point where the two lines would cross.
      </p>
      <p>
        When there are no solutions to a system, we can simply say that. Or we can write that the
        solution set is the empty set, which we can write as <m>\{\text{ }\}</m> or <m>\emptyset</m>.
      </p>
    </example>

    <p>
      When a system of two linear equations has no solution, we call the system
      <term>inconsistent</term>. The idea is that while it may possible for <m>x</m> and <m>y</m> to          <idx><h>Inconsistent system</h></idx>
      have the relationship given by the first equation, and while it may possible for <m>x</m> and
      <m>y</m> to have the relationship given by the second equation, it's <em>not</em> possible for
      both of these relationships to happen at the same time: they are inconsistent.
    </p>

    <warning>
      <title>The Symbol <m>\emptyset</m> is not Zero</title>
      <p>
        The symbol <m>\emptyset</m> is a special symbol that represents an empty set, a set with no           <idx><h>Empty set</h></idx>
        numbers in it. You could also write the empty set as braces with nothing in between them,             <idx><h>Set</h><h>empty</h></idx>
        like <m>\{\text{ }\}</m>. But <m>\emptyset</m> is a fancy alternative. This symbol is
        <em>not</em> the same thing as the number zero. The symbol <m>\emptyset</m> represents a
        <em>set</em> with nothing in it. The symbol <m>0</m> represents the <em>number</em> zero.
        If you have an empty carton of eggs, the carton itself would be <m>\emptyset</m>, while
        <m>0</m> is the count of how many eggs are in that carton.
      </p>
    </warning>

    <example xml:id="example-solving-systems-by-graphing-equivalent-equations">
      <title>Coinciding Lines</title>
      <p>
        Consider the graphs of two lines with equations <m>y=2x-4</m> and <m>6x-3y=12</m>. In other
        words, the system:
        <me>
          \left\{
            \begin{aligned}
              \amp y = 2x - 4\\
              \amp 6x - 3y = 12
            \end{aligned}
          \right.
        </me>
      </p>
      <p>
        To solve this system of equations, we want to graph each line. The first equation is in
        slope-intercept form and we graph it by starting at the <m>y</m>-intercept <m>(0,-4)</m> and
        using the slope <m>2</m> to make slope triangles.
      </p>

      <p>
        The second equation is in standard form. We find its <m>x</m>-intercept is <m>(2,0)</m> and
        its <m>y</m>-intercept is <m>(0,-4)</m>, and use this to plot the line. The two lines are
        plotted together in <xref ref="figure-coinciding-lines"/>.
      </p>

      <sidebyside widths="47% 47%" margins="0%">
        <p>
          Now we can see these <q>two</q> lines are actually the <em>same</em> line. They coincide.
          Can we really solve this system? Finding a solution means finding a point <m>(x_1,y_1)</m>
          that is a solution to each of the two lines in the system. But apparently <em>any</em>
          point on this one line we see is actually a solution to both of the original line
          equations. So we have an infinite number of solutions. <em>All</em> points that fall on
          that one line are in the solution set.
        </p>
        <figure xml:id="figure-coinciding-lines">
          <caption>Graphs of <m>y=2x-4</m> and <m>6x-3y=12</m></caption>
          <image width="50%" label="coincidinig-system">
            <description>
              a coordinate plot of two lines that are coinciding;
              they each have a y-intercept of (0,-4) and a slope of 2
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve,domain = -1.5:5.5]{2*x-4.1} node[pos=0.75,sloped,below] {$y=2x-4$};
                  \addplot[secondcurve,domain = -1.5:5.5]{2*x-3.9} node[pos=0.75,sloped,above] {$6x-3y=12$};
                  \addplot[soliddot,color=firstcolor] coordinates {(0,-4.1) (1,-2.1) (2,-0.1)};
                  \addplot[soliddot,color=secondcolor] coordinates {(0,-4) (2,0)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
        </figure>
      </sidebyside>
      <p>
        It may be enough for us to report that there are infinitely many solutions, not just one.
        But we could also be more specific and use set-builder notation. We want to write that
        any ordered pair <m>(x,y)</m> that satisfies one (or the other) of the two original line
        equations is actually a solution to the system. We can write that the solution set is
        <m>\{(x,y)\mid y=2x-4\}</m>.
      </p>
    </example>

    <p>
      When a system of two linear equations has infinitely many solutions, we call the system
      <term>dependent</term>. The two equation may not have looked identical, but it turned out that          <idx><h>Dependent system</h></idx>
      they represented the same line. So in a sense, the two equations <q>depend</q> on one another
      (since actually they are equaivalent equations).
    </p>

    <remark>
      <p>
        In <xref ref="example-solving-systems-by-graphing-equivalent-equations"/>, what would have
        happened if we had decided to convert the second line equation into slope-intercept form?
        <md>
          <mrow>6x-3y\amp=12</mrow>
          <mrow>6x-3y\subtractright{6x}\amp=12\subtractright{6x}</mrow>
          <mrow>-3y\amp=-6x+12</mrow>
          <mrow>\multiplyleft{-\frac{1}{3}}(-3y)\amp=\multiplyleft{-\frac{1}{3}}(-6x+12)</mrow>
          <mrow>y\amp=2x-4</mrow>
        </md>
        This is the literally the same as the first equation from that system. This is a different
        way to show that these two equations represent coinciding lines.
      </p>
    </remark>

    <warning>
      <p>
        Notice that for a system of equations with infinite solutions like
        <xref ref="example-solving-systems-by-graphing-equivalent-equations"/>,
        we didn't say that <em>everything</em> is a solution. It's only the points that are on that
        coinciding line that are solutions. It would be incorrect to say that the solution set is
        <q>all real numbers</q> or as <q>all ordered pairs</q>.
      </p>
    </warning>

    <exercise label="solve-system-graph-it-yourself-coinciding-lines">
      <webwork>
        <pg-macros>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <pg-code>
          $gt = GraphTool(
            "{line, solid, (0, -5), (8, 0)}",
          )->with(
            availableTools => [ "LineTool" ],
            showInStatic => 0,
            cmpOptions => {
              list_checker => sub {
                my ($correct, $student, $ans, $value) = @_;
                return 0 if $ans->{isPreview};
                my $score = 0; my @errors; my $count = 1;
                my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                my @stdform = (
                  $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                );
                my $pointOnLine = sub {
                  my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                  return $a * $x + $b * $y + $c == 0;
                };
                my @line = (0);
                for (@$student) {
                  my $nth = Value::List->NameForNumber($count++);
                  if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                    $line[0] = 1; $score += 1; next
                  }
                  push(@errors, "The $nth line graphed is incorrect.");
                }
                return (($line[0]) ? $score : 0, @errors);
              }
            }
          );
          Context("Point");
          Context()->strings->remove("NONE");
          Context()->strings->add(
            "no solutions" => {},
          );
          for (
            "no solution",
            "none",
            "there are no solutions",
            "the solution set is empty",
            "solution set is empty",
            "empty set",
            "∅",
            "{}",
            "{ }",
            "{  }",
            "{   }"
          ) {
            Context()->strings->add($_ => {alias => "no solutions"});
          }
          Context()->strings->add(
            "infinitely many solutions" => {},
          );
          for (
            "infinitely many",
            "infinite solution set",
            "infinite",
            "the solution set is infinite",
            "solution set is infinite"
          ) {
            Context()->strings->add($_ => {alias => "infinitely many solutions"});
          }
          $solution = Compute("infinitely many solutions")->cmp(
            typeMatch => Point(1,2),
            mathQuillOpts => 'disabled'
          );
        </pg-code>
        <statement>
          <p>
            Solve the following system of equations by graphing.
            <me>
              \left\{
                \begin{alignedat}{3}
                  \amp5x-8y = 40\\
                  \amp y=\tfrac{5}{8}(x+8)-10
                \end{alignedat}
              \right.
            </me>
          </p>
          <p>
            <var name="$gt" width="1"/>
          </p>
          <instruction>
            Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
            If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
          </instruction>
          <p>
            <var name="$solution" width="16"/>
          </p>
        </statement>
        <solution>
          <p>
            If we graph these lines, we find they are the same line.
          </p>
          <image width="47%">
            <description>
              a coordinate plot of two lines that are coinciding;
              they each have a y-intercept of (0,-5) and an x-intercept of (8,0)
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-3:7]{5/8*x-5.05} node[pos=1,sloped,above left] {\(5x-8y=40\)};
                  \addplot[secondcurve, domain=-3:7]{5/8*x-4.95} node[pos=0.9,sloped,below right] {\(y=\frac{5}{8}(x+8)-10\)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            So there are infinitely many solutions: all points <m>(x_1,y_1)</m> on that common line.
          </p>
        </solution>
      </webwork>
    </exercise>

    <exercise label="solve-system-graph-it-yourself-parallel-lines">
      <webwork>
        <pg-macros>
          <macro-file>parserGraphTool.pl</macro-file>
        </pg-macros>
        <pg-code>
          $gt = GraphTool(
            "{line, solid, (0, 3), (1, 5)}",
            "{line, solid, (4, 3), (5, 5)}",
          )->with(
            availableTools => [ "LineTool" ],
            showInStatic => 0,
            cmpOptions => {
              list_checker => sub {
                my ($correct, $student, $ans, $value) = @_;
                return 0 if $ans->{isPreview};
                my $score = 0; my @errors; my $count = 1;
                my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                my @stdform = (
                  $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                  $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                );
                my $pointOnLine = sub {
                  my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                  return $a * $x + $b * $y + $c == 0;
                };
                my @line = (0, 0);
                for (@$student) {
                  my $nth = Value::List->NameForNumber($count++);
                  if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                    $line[0] = 1; $score += 1; next
                  }
                  if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                    $line[1] = 1; $score += 1; next
                  }
                  push(@errors, "The $nth line graphed is incorrect.");
                }
                return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
              }
            }
          );
          Context("Point");
          Context()->strings->remove("NONE");
          Context()->strings->add(
            "no solutions" => {},
          );
          for (
            "no solution",
            "none",
            "there are no solutions",
            "the solution set is empty",
            "solution set is empty",
            "empty set",
            "∅",
            "{}",
            "{ }",
            "{  }",
            "{   }"
          ) {
            Context()->strings->add($_ => {alias => "no solutions"});
          }
          Context()->strings->add(
            "infinitely many solutions" => {},
          );
          for (
            "infinitely many",
            "infinite solution set",
            "infinite",
            "the solution set is infinite",
            "solution set is infinite"
          ) {
            Context()->strings->add($_ => {alias => "infinitely many solutions"});
          }
          $solution = Compute("no solutions")->cmp(
            typeMatch => Point(1,2),
            mathQuillOpts => 'disabled'
          );
        </pg-code>
        <statement>
          <p>
            Solve the following system of equations by graphing.
            <me>
              \left\{
                \begin{alignedat}{3}
                  \amp y = 2x + 3\\
                  \amp y  =2(x - 4) + 3
                \end{alignedat}
              \right.
            </me>
          </p>
          <p>
            <var name="$gt" width="1"/>
          </p>
          <instruction>
            Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
            If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
          </instruction>
          <p>
            <var name="$solution" width="16"/>
          </p>
        </statement>
        <solution>
          <p>
            If we graph these lines, we find they are parallel and never cross.
          </p>
          <image width="47%">
            <description>
              a coordinate plot of two lines that are coinciding;
              they each have a y-intercept of (0,-5) and an x-intercept of (8,0)
            </description>
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}[]
                  \addplot[firstcurve, domain=-5:3.5]{2x+3} node[pos=0.5,sloped,above left] {\(y=2x+3\)};
                  \addplot[secondcurve, domain=-1:7]{2*(x-4)+3} node[pos=0.5,sloped,above right] {\(y=2(x-4)+3\)};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            So there are no solutions to this system.
          </p>
        </solution>
      </webwork>
    </exercise>

    <p>
      We can summarize the possibilities for what a soltuion set to a system of two linear equations
      in two variables.
    </p>

    <list xml:id="list-summary-of-types-of-systems">
      <title>Three Types of Systems of Two Linear Equations in Two Variables</title>
      <dl width="narrow">
        <li>
          <title>Crossing Lines</title>
          <p>
            If two linear equations make lines with different slopes, the system has one solution.
            The one solution is the place where the lines cross.
          </p>
        </li>

        <li>
          <title>Parallel Lines</title>
          <p>
            If two linear equations make lines with the same slope but different <m>y</m>-intercepts,
            the system has no solution.
          </p>
        </li>

        <li>
          <title>Coinciding Lines</title>
          <p>
            If two linear equations make lines with the same slope and the same <m>y</m>-intercept
            (in other words, they make the same line), the system has infinitely many solutions.
            This solution set consists of all ordered pairs on that line.
          </p>
        </li>
      </dl>
    </list>
  </subsection>

  <reading-questions>
    <exercise>
      <statement>
        <p>
          What is the purpose of the one big left brace in a system of two equations?
        </p>
      </statement>
      <response/>
    </exercise>
    <exercise>
      <statement>
        <p>
          When you find a solution to a system of two linear equations in two variables, why should
          you check the solution?
        </p>
      </statement>
      <response/>
    </exercise>
    <exercise>
      <statement>
        <p>
          When you ar checking a solution to a system of two linear equations in two variables,
          would it be good enough to only substitute the numbers into <em>one</em> of the original
          two equations? Why or why not?
        </p>
      </statement>
      <response/>
    </exercise>
    <exercise>
      <statement>
        <p>
          Suppose you have a system of two linear equations, and you know the system has exactly one
          solution. What can you say about the slopes of the two lines?
        </p>
      </statement>
      <response/>
    </exercise>
  </reading-questions>

  <exercises>
    <subexercises>
      <title>Review</title>
      <exercisegroup cols="2">
        <introduction>
          <p>
            Select the equations/inequalities that are linear with one variable.
          </p>
        </introduction>
        <exercise label="webwork-identify-linear-equations-copy3">
          <webwork copy="webwork-identify-linear-equations"/>
        </exercise>
        <exercise label="webwork-identify-linear-equations-2-copy3">
          <webwork copy="webwork-identify-linear-equations-2"/>
        </exercise>
      </exercisegroup>
      <!-- TODO: This needs more review exercises from chapter 3 once chapter 3 is revised -->
    </subexercises>

    <subexercises>
      <title>Skills Practice</title>
      <exercisegroup cols="2">
        <title>Check a Possible Solution to a System</title>
        <introduction>
          <p>
            Check if the given point is a solution to the given system of two linear equations.
          </p>
        </introduction>

        <exercise label="check-solution-linear-system-point-slope-yes">
          <webwork xml:id="webwork-check-solution-linear-system-point-slope-yes">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($x,$y) = (-8..8)[NchooseK(17,2)];
              do {
                @h = (-9..$x-1,$x+1..9)[NchooseK(18,2)];
                @k = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
                Context("Fraction");
                Context()->noreduce('(-x)+y', '(-x)-y');
                @m = map{Fraction(($y - $k[$_])/($x - $h[$_]))} (0,1);
              } until ($m[0] != 1 &amp;&amp; $m[1] != 1);
              @n = map{($_->value)[0]} (@m);
              @d = map{($_->value)[1]} (@m);
              @f = map{Formula("$m[$_] (x - $h[$_]) + $k[$_]")->reduce} (0,1);
              Context("Point");
              $solution = Point($x,$y);
              $proposed_solution = $solution;
              $dropdown = DropDown(["Yes, it is a solution.", "No, it is not a solution."], 0, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                Is <m><var name="$proposed_solution"/></m> a solution?
              </p>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="webwork-check-solution-linear-system-point-slope-yes-copy">
          <webwork copy="webwork-check-solution-linear-system-point-slope-yes"/>
        </exercise>
        <exercise label="check-solution-linear-system-standard-not-at-all">
          <webwork xml:id="webwork-check-solution-linear-system-standard-not-at-all">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              # Get first line's intercepts
              ($a[0], $b[0]) = (-5..-1, 1..5)[NchooseK(10,2)];
              # Get first line's slope
              Context("Fraction");
              $m[0] = Fraction(-$b[0]/$a[0]);
              ($n[0], $d[0]) = $m[0]->value;
              # Gather integer points still in the viewing area
              @pts = ();
              for $i (-9..-1,1..9) {
                push(@pts, [$i, $m[0]*$i + $b[0]]) if ($n[0]*$i % $d[0] == 0
                  &amp;&amp; abs($m[0]*$i + $b[0]) &lt;= 9
                  &amp;&amp; $i != $a[0]
                );
              }
              # Gather possible pairs [a,b] for the second line
              @ab = ();
              for $p (@pts) {
                for $b (-9..-1,1..9) {
                  my $m = Fraction(($p->[1] - $b)/($p->[0]));
                  if ($m != 0) {
                    my ($n, $d) = $m->value;
                    push(@ab, [Real(-$b/$m)->value, $b]) if ($b % $n == 0
                      &amp;&amp; abs($b/$m) &lt;= 9
                      &amp;&amp; $b != $b[0]
                    );
                  }
                }
              }
              $ab = list_random(@ab);
              ($a[1], $b[1]) = @{$ab};
              @g = map{gcd($a[$_], $b[$_])} (0,1);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              @f = map{ImplicitPlane("$b[$_]/$g[$_] x + $a[$_]/$g[$_] y =  $a[$_]*$b[$_]/$g[$_]")->reduce} (0,1);
              $x = ($a[1]*$a[0]*$b[0] - $a[0]*$a[1]*$b[1])/($b[0]*$a[1] - $a[0]*$b[1]);
              $y = (-$b[1]*$a[0]*$b[0] + $b[0]*$a[1]*$b[1])/($b[0]*$a[1] - $a[0]*$b[1]);
              Context("Point");
              $solution = Point($x,$y);
              $proposed_solution = $solution + Point(@{list_random([1,0],[-1,0],[0,1],[0,-1])});
              $dropdown = DropDown(["Yes, it is a solution.", "No, it is not a solution."], 1, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                Is <m><var name="$proposed_solution"/></m> a solution?
              </p>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp <var name="$f[0]"/>\\
                      \amp <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="webwork-check-solution-linear-system-standard-not-at-all-copy">
          <webwork copy="webwork-check-solution-linear-system-standard-not-at-all"/>
        </exercise>
        <exercise label="check-solution-linear-system-slope-intercept-not-to-second">
          <webwork xml:id="webwork-check-solution-linear-system-slope-intercept-not-to-second">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($x,$y) = (-8..-1,1..8)[NchooseK(16,2)];
              @b = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              @m = map{Fraction(($y - $_)/$x)} (@b);
              @n = map{($_->value)[0]} (@m);
              @d = map{($_->value)[1]} (@m);
              @f = map{Formula("$m[$_] x + $b[$_]")->reduce} (0,1);
              Context("Point");
              $solution = Point($x,$y);
              do {
                $x1 = random(0, 9, $d[0]);
                $y1 = $f[0]->eval(x => $x1);
              } until ($x1 != $x);
              $proposed_solution = Point($x1,$y1);
              $dropdown = DropDown(["Yes, it is a solution.", "No, it is not a solution."], 1, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                Is <m><var name="$proposed_solution"/></m> a solution?
              </p>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y\amp= <var name="$f[0]"/>\\
                      y\amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="webwork-check-solution-linear-system-slope-intercept-not-to-second-copy">
          <webwork copy="webwork-check-solution-linear-system-slope-intercept-not-to-second"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>Identify Solution from Graph</title>
        <introduction>
          <p>
            The graph of two lines represents a system of two linear equations.
            Use the graph to identify the solution to the system.
          </p>
        </introduction>
        <exercise label="see-solution-from-graph-slope-intercept">
          <webwork xml:id="webwork-see-solution-from-graph-slope-intercept">
            <pg-code>
              ($x,$y) = (-5..-1,1..5)[NchooseK(10,2)];
              @b = (-6..$y-1,$y+1..6)[NchooseK(12,2)];
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              @m = map{Fraction(($y - $_)/$x)} (@b);
              @f = map{Formula("$m[$_] x + $b[$_]")->reduce} (0,1);
              @high = map{(7 - $b[$_])/$m[$_]} (0,1);
              @low = map{(-7 - $b[$_])/$m[$_]} (0,1);
              @start = map{(num_sort(-7,7,$high[$_],$low[$_]))[1]} (0,1);
              @stop = map{(num_sort(-7,7,$high[$_],$low[$_]))[2]} (0,1);
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              $solution = Point($x,$y)->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <image>
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,domain=$start[0]:$stop[0]]{$f[0]};
                      \addplot[secondcurve,domain=$start[1]:$stop[1]]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-solution-from-graph-slope-intercept-copy">
          <webwork copy="webwork-see-solution-from-graph-slope-intercept"/>
        </exercise>
        <exercise label="see-solution-from-graph-point-slope">
          <webwork xml:id="webwork-see-solution-from-graph-point-slope">
            <pg-code>
              ($x,$y) = (-5..5)[NchooseK(11,2)];
              do {
                @h = (-9..$x-1,$x+1..9)[NchooseK(18,2)];
                @k = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
                Context("Fraction");
                Context()->noreduce('(-x)+y', '(-x)-y');
                @m = map{Fraction(($y - $k[$_])/($x - $h[$_]))} (0,1);
              } until ($m[0] != 1 &amp;&amp; $m[1] != 1);
              @f = map{Formula("$m[$_] (x - $h[$_]) + $k[$_]")->reduce} (0,1);
              @high = map{(7 - $k[$_])/$m[$_] + $h[$_]} (0,1);
              @low = map{(-7 - $k[$_])/$m[$_] + $h[$_]} (0,1);
              @start = map{(num_sort(-7,7,$high[$_],$low[$_]))[1]} (0,1);
              @stop = map{(num_sort(-7,7,$high[$_],$low[$_]))[2]} (0,1);
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              $solution = Point($x,$y)->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <image>
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,domain=$start[0]:$stop[0]]{$f[0]};
                      \addplot[secondcurve,domain=$start[1]:$stop[1]]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-solution-from-graph-point-slope-copy">
          <webwork copy="webwork-see-solution-from-graph-point-slope"/>
        </exercise>
        <exercise label="see-solution-from-graph-point-slope-parallel">
          <webwork xml:id="webwork-see-solution-from-graph-point-slope-parallel">
            <pg-code>
              ($x,$y) = (-5..5)[NchooseK(11,2)];
              do {
                @h = (-9..$x-1,$x+1..9)[NchooseK(18,2)];
                @k = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
                Context("Fraction");
                Context()->noreduce('(-x)+y', '(-x)-y');
                @m = map{Fraction(($y - $k[$_])/($x - $h[$_]))} (0,1);
              } until ($m[0] != 1 &amp;&amp; $m[1] != 1);
              $m[1] = $m[0];
              @f = map{Formula("$m[$_] (x - $h[$_]) + $k[$_]")->reduce} (0,1);
              @high = map{(7 - $k[$_])/$m[$_] + $h[$_]} (0,1);
              @low = map{(-7 - $k[$_])/$m[$_] + $h[$_]} (0,1);
              @start = map{(num_sort(-7,7,$high[$_],$low[$_]))[1]} (0,1);
              @stop = map{(num_sort(-7,7,$high[$_],$low[$_]))[2]} (0,1);
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              $solution = Compute("no solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <image>
                <description>
                  a coordinate plot of two parallel lines
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,domain=$start[0]:$stop[0]]{$f[0]};
                      \addplot[secondcurve,domain=$start[1]:$stop[1]]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-solution-from-graph-point-slope-parallel-copy">
          <webwork copy="webwork-see-solution-from-graph-point-slope-parallel"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>See How Many Solutions</title>
        <introduction>
          <p>
            Simply by looking closely at the linear equations, determine how many solutions the
            system will have. And state whether the system is dependeent, inconsistent, or neither.
          </p>
        </introduction>
        <exercise label="see-one-solution">
          <webwork xml:id="webwork-see-one-solution">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $m[0] = Fraction(random_coprime([1..9],[2..9]));
              do {
                $m[1] = Fraction(random_coprime([1..9],[2..9]));
              } until ($m[1] != $m[0]);
              ($h[0], $k[0], $b[1]) = (-9..9)[NchooseK(19,3)];
              $f[0] = Formula("$m[0](x-$h[0])+$k[0]")->reduce;
              $f[1] = Formula("$m[1] x + $b[1]")->reduce;
              $dropdown = DropDown(["Zero", "One", "Two", "More than two but finitely many", "Infinitely many"], 1, showInStatic => 0);
              $dropdown2 = DropDown(["Dependent", "Inconsistent", "None of the above"], 2, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
              <p>
                <var name="$dropdown2" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-one-solution-copy">
          <webwork copy="webwork-see-one-solution"/>
        </exercise>
        <exercise label="see-infinite-solutions">
          <webwork xml:id="webwork-see-infinite-solutions">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              ($b, $h, $k) = (-9..-1,1..9)[NchooseK(18,3)];
              $m = Fraction(($k-$b)/$h);
              $f[0] = Formula("$m x + $b")->reduce;
              $f[1] = Formula("$m(x - $h) + $k")->reduce;
              $dropdown = DropDown(["Zero", "One", "Two", "More than two but finitely many", "Infinitely many"], 4, showInStatic => 0);
              $dropdown2 = DropDown(["Dependent", "Inconsistent", "None of the above"], 0, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
              <p>
                <var name="$dropdown2" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-infinite-solutions-copy">
          <webwork copy="webwork-see-infinite-solutions"/>
        </exercise>
        <exercise label="see-no-solutions">
          <webwork xml:id="webwork-see-no-solutions">
            <pg-macros>
              <macro-file>parserPopUp.pl</macro-file>
            </pg-macros>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              ($b[0], $h[0], $k[0], $b[1]) = (-9..-1,1..9)[NchooseK(18,4)];
              $m = Fraction(($k[0]-$b[0])/$h[0]);
              $f[0] = Formula("$m x + $b[0]")->reduce;
              $f[1] = Formula("$m x + $b[1]")->reduce;
              $dropdown = DropDown(["Zero", "One", "Two", "More than two but finitely many", "Infinitely many"], 0, showInStatic => 0);
              $dropdown2 = DropDown(["Dependent", "Inconsistent", "None of the above"], 1, showInStatic => 0);
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$dropdown" form="popup"/>
              </p>
              <p>
                <var name="$dropdown2" form="popup"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="see-no-solutions-copy">
          <webwork copy="webwork-see-no-solutions"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>Solve a System</title>
        <introduction>
          <p>
            Solve the given system of linear equations graphically.
          </p>
        </introduction>
        <exercise label="solve-system-graphically-slope-intercept">
          <webwork xml:id="webwork-solve-system-graphically-slope-intercept">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($x,$y) = (-8..-1,1..8)[NchooseK(16,2)];
              @b = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              @m = map{Fraction(($y - $_)/$x)} (@b);
              @n = map{($_->value)[0]} (@m);
              @d = map{($_->value)[1]} (@m);
              @f = map{Formula("$m[$_] x + $b[$_]")->reduce} (0,1);
              $gt = GraphTool(
                "{line, solid, (0, $b[0]), ($d[0], $b[0] + $n[0])}",
                "{line, solid, (0, $b[1]), ($d[1], $b[1] + $n[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Point($x,$y)->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$f[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-slope-intercept-copy">
          <webwork copy="webwork-solve-system-graphically-slope-intercept"/>
        </exercise>
        <exercise label="solve-system-graphically-point-slope">
          <webwork xml:id="webwork-solve-system-graphically-point-slope">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($x,$y) = (-8..8)[NchooseK(17,2)];
              do {
                @h = (-9..$x-1,$x+1..9)[NchooseK(18,2)];
                @k = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
                Context("Fraction");
                Context()->noreduce('(-x)+y', '(-x)-y');
                @m = map{Fraction(($y - $k[$_])/($x - $h[$_]))} (0,1);
              } until ($m[0] != 1 &amp;&amp; $m[1] != 1);
              @n = map{($_->value)[0]} (@m);
              @d = map{($_->value)[1]} (@m);
              @f = map{Formula("$m[$_] (x - $h[$_]) + $k[$_]")->reduce} (0,1);
              $gt = GraphTool(
                "{line, solid, ($h[0], $k[0]), ($h[0] + $d[0], $k[0] + $n[0])}",
                "{line, solid, ($h[1], $k[1]), ($h[1] + $d[1], $k[1] + $n[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Point($x,$y)->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$f[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-point-slope-copy">
          <webwork copy="webwork-solve-system-graphically-point-slope"/>
        </exercise>
        <exercise label="solve-system-graphically-point-slope-no-solution">
          <webwork xml:id="webwork-solve-system-graphically-point-slope-no-solution">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              do {
                ($x,$y) = (-8..8)[NchooseK(17,2)];
                @h = (-9..$x-1,$x+1..9)[NchooseK(18,2)];
                @k = (-9..$y-1,$y+1..9)[NchooseK(18,2)];
                $m = Fraction(($y - $k[0])/($x - $h[0]));
                ($n, $d) = $m->value;
              } until ($m != Fraction(($y - $k[1])/($x - $h[1])) &amp;&amp; $m != 1 &amp;&amp; (abs($h[1] + $d) &lt; 10 &amp;&amp; abs($k[1] + $n) &lt; 10 || abs($h[1] - $d) &lt; 10 &amp;&amp; abs($k[1] - $n) &lt; 10));
              @f = map{Formula("$m (x - $h[$_]) + $k[$_]")->reduce} (0,1);
              $gt = GraphTool(
                "{line, solid, ($h[0], $k[0]), ($h[0] + $d, $k[0] + $n)}",
                "{line, solid, ($h[1], $k[1]), ($h[1] + $d, $k[1] + $n)}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("no solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they are parallel and do not cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[xmin=-10, xmax=10, ymin=-10, ymax=10]
                      \addplot[firstcurve,-,domain=-10:10]{$f[0]};
                      \addplot[secondcurve,-,domain=-10:10]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So there are no solutions.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-point-slope-no-solution-copy">
          <webwork copy="webwork-solve-system-graphically-point-slope-no-solution"/>
        </exercise>
        <exercise label="solve-system-graphically-standard">
          <webwork xml:id="webwork-solve-system-graphically-standard">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              # Get first line's intercepts
              ($a[0], $b[0]) = (-5..-1, 1..5)[NchooseK(10,2)];
              # Get first line's slope
              Context("Fraction");
              $m[0] = Fraction(-$b[0]/$a[0]);
              ($n[0], $d[0]) = $m[0]->value;
              # Gather integer points still in the viewing area
              @pts = ();
              for $i (-9..-1,1..9) {
                push(@pts, [$i, $m[0]*$i + $b[0]]) if ($n[0]*$i % $d[0] == 0
                  &amp;&amp; abs($m[0]*$i + $b[0]) &lt;= 9
                  &amp;&amp; $i != $a[0]
                );
              }
              # Gather possible pairs [a,b] for the second line
              @ab = ();
              for $p (@pts) {
                for $b (-9..-1,1..9) {
                  my $m = Fraction(($p->[1] - $b)/($p->[0]));
                  if ($m != 0) {
                    my ($n, $d) = $m->value;
                    push(@ab, [Real(-$b/$m)->value, $b]) if ($b % $n == 0
                      &amp;&amp; abs($b/$m) &lt;= 9
                      &amp;&amp; $b != $b[0]
                    );
                  }
                }
              }
              $ab = list_random(@ab);
              ($a[1], $b[1]) = @{$ab};
              @g = map{gcd($a[$_], $b[$_])} (0,1);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              @f = map{ImplicitPlane("$b[$_]/$g[$_] x + $a[$_]/$g[$_] y =  $a[$_]*$b[$_]/$g[$_]")->reduce} (0,1);
              $gt = GraphTool(
                "{line, solid, ($a[0], 0), (0, $b[0])}",
                "{line, solid, ($a[1], 0), (0, $b[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $x = ($a[1]*$a[0]*$b[0] - $a[0]*$a[1]*$b[1])/($b[0]*$a[1] - $a[0]*$b[1]);
              $y = (-$b[1]*$a[0]*$b[0] + $b[0]*$a[1]*$b[1])/($b[0]*$a[1] - $a[0]*$b[1]);
              $solution = Point($x, $y)->cmp(
                mathQuillOpts => 'disabled'
              );
              @fplot = map{Formula("$b[$_] - $b[$_]/$a[$_] x")->reduce} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp <var name="$f[0]"/>\\
                      \amp <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$fplot[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$fplot[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-standard-copy">
          <webwork copy="webwork-solve-system-graphically-standard"/>
        </exercise>
        <exercise label="solve-system-graphically-standard-slope-intercept">
          <webwork xml:id="webwork-solve-system-graphically-standard-slope-intercept">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              # Get first line's intercepts
              ($a[0], $b[0]) = (-5..-1, 1..5)[NchooseK(10,2)];
              # Get first line's slope
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $m[0] = Fraction(-$b[0]/$a[0]);
              ($n[0], $d[0]) = $m[0]->value;
              # Gather integer points still in the viewing area
              @pts = ();
              for $i (-9..-1,1..9) {
                push(@pts, [$i, $m[0]*$i + $b[0]]) if ($n[0]*$i % $d[0] == 0
                  &amp;&amp; abs($m[0]*$i + $b[0]) &lt;= 9
                  &amp;&amp; $i != $a[0]
                );
              }
              $pt = list_random(@pts);
              $b[1] = list_random(-9..$b[0]-1,$b[0]+1..9);
              $m[1] = Fraction(($pt->[1] - $b[1])/($pt->[0]));
              $f[1] = Formula("$m[1] x + $b[1]")->reduce;
              $g[0] = gcd($a[0], $b[0]);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $f[0] = ImplicitPlane("$b[0]/$g[0] x + $a[0]/$g[0] y =  $a[$0]*$b[$0]/$g[$0]")->reduce;
              $gt = GraphTool(
                "{line, solid, ($a[0], 0), (0, $b[0])}",
                "{line, solid, (@$pt), (0, $b[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Point(@$pt)->cmp(
                mathQuillOpts => 'disabled'
              );
              $solution = Compute("no solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
              $fplot[0] = Formula("$b[0] - $b[0]/$a[0] x")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp y=<var name="$f[1]"/>\\
                      \amp <var name="$f[0]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they are parallel and never cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two parallel lines
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$fplot[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the there are no solutions.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-standard-slope-intercept-copy">
          <webwork copy="webwork-solve-system-graphically-standard-slope-intercept"/>
        </exercise>
        <exercise label="solve-system-graphically-standard-slope-intercept-no-solution">
          <webwork xml:id="webwork-solve-system-graphically-standard-slope-intercept-no-solution">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($a[0], $b[0], $b[1]) = (-5..-1, 1..5)[NchooseK(10,3)];
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $m = Fraction(-$b[0]/$a[0]);
              ($n, $d) = $m->value;
              $f[1] = Formula("$m x + $b[1]")->reduce;
              $g[0] = gcd($a[0], $b[0]);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $f[0] = ImplicitPlane("$b[0]/$g[0] x + $a[0]/$g[0] y =  $a[$0]*$b[$0]/$g[$0]")->reduce;
              $b10 = $b[1] - $b[0];
              $gt = GraphTool(
                "{line, solid, ($a[0], 0), (0, $b[0])}",
                "{line, solid, ($a[0], $b10), (0, $b[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("no solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
              $fplot[0] = Formula("$b[0] - $b[0]/$a[0] x")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp <var name="$f[0]"/>\\
                      \amp y=<var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$fplot[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-standard-slope-intercept-no-solution-copy">
          <webwork copy="webwork-solve-system-graphically-standard-slope-intercept-no-solution"/>
        </exercise>
        <exercise label="solve-system-graphically-standard-point-slope">
          <webwork xml:id="webwork-solve-system-graphically-standard-point-slope">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              # Get first line's intercepts
              ($a[0], $b[0]) = (-5..-1, 1..5)[NchooseK(10,2)];
              # Get first line's slope
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $m[0] = Fraction(-$b[0]/$a[0]);
              ($n[0], $d[0]) = $m[0]->value;
              # Gather integer points still in the viewing area
              @pts = ();
              for $i (-9..-1,1..9) {
                push(@pts, [$i, $m[0]*$i + $b[0]]) if ($n[0]*$i % $d[0] == 0
                  &amp;&amp; abs($m[0]*$i + $b[0]) &lt;= 9
                  &amp;&amp; $i != $a[0]
                );
              }
              $pt = list_random(@pts);
              ($x,$y) = @$pt;
              do {
                $h[1] = list_random(-9..$x-1,$x+1..9);
                $k[1] = list_random(-9..$y-1,$y+1..9);
                $m[1] = Fraction(($k[1] - $y)/($h[1] - $x));
              } until ($m[0] != $m[1] &amp;&amp; $m[1] != 1);
              $f[1] = Formula("$m[1](x - $h[1]) + $k[1]")->reduce;
              $g[0] = gcd($a[0], $b[0]);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $f[0] = ImplicitPlane("$b[0]/$g[0] x + $a[0]/$g[0] y =  $a[$0]*$b[$0]/$g[$0]")->reduce;
              $gt = GraphTool(
                "{line, solid, ($a[0], 0), (0, $b[0])}",
                "{line, solid, ($h[1], $k[1]), ($x, $y)}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Point(@$pt)->cmp(
                mathQuillOpts => 'disabled'
              );
              $fplot[0] = Formula("$b[0] - $b[0]/$a[0] x")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp y=<var name="$f[1]"/>\\
                      \amp <var name="$f[0]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$fplot[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-standard-point-slope-copy">
          <webwork copy="webwork-solve-system-graphically-standard-point-slope"/>
        </exercise>
        <exercise label="solve-system-graphically-standard-point-slope-infinite-solutions">
          <webwork xml:id="webwork-solve-system-graphically-standard-point-slope-infinite-solutions">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              do {
                # Get first line's intercepts
                ($a[0], $b[0]) = (-5..-1, 1..5)[NchooseK(10,2)];
                # Get first line's slope
                Context("Fraction");
                Context()->noreduce('(-x)+y', '(-x)-y');
                $m[0] = Fraction(-$b[0]/$a[0]);
              } until ($m[0] != 1);
              ($n[0], $d[0]) = $m[0]->value;
              # Gather integer points still in the viewing area
              @pts = ();
              for $i (-9..-1,1..9) {
                push(@pts, [$i, $m[0]*$i + $b[0]]) if ($n[0]*$i % $d[0] == 0
                  &amp;&amp; abs($m[0]*$i + $b[0]) &lt;= 9
                  &amp;&amp; $i != $a[0]
                );
              }
              $pt = list_random(@pts);
              ($h[1],$k[1]) = @$pt;
              $m[1] = $m[0];
              $f[1] = Formula("$m[1](x - $h[1]) + $k[1]")->reduce;
              $g[0] = gcd($a[0], $b[0]);
              Context("ImplicitPlane");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $f[0] = ImplicitPlane("$b[0]/$g[0] x + $a[0]/$g[0] y =  $a[$0]*$b[$0]/$g[$0]")->reduce;
              $gt = GraphTool(
                "{line, solid, ($a[0], 0), (0, $b[0])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("infinitely many solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
              $fplot[0] = Formula("$b[0] - $b[0]/$a[0] x")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      \amp <var name="$f[0]"/>\\
                      \amp y=<var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$fplot[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-standard-point-slope-infinite-solutions-copy">
          <webwork copy="webwork-solve-system-graphically-standard-point-slope-infinite-solutions"/>
        </exercise>
        <exercise label="solve-system-graphically-slope-intercept-point-slope">
          <webwork xml:id="webwork-solve-system-graphically-slope-intercept-point-slope">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($x,$y) = (-8..-1,1..8)[NchooseK(16,2)];
              $b[0] = list_random(-9..$y-1,$y+1..9);
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              $m[0] = Fraction(($y - $b[0])/$x);
              $n[0]= ($m[0]->value)[0];
              $d[0]= ($m[0]->value)[1];
              $f[0] = Formula("$m[0] x + $b[0]")->reduce;
              do {
                $h = list_random(-9..$x-1,$x+1..9);
                $k = list_random(-9..$y-1,$y+1..9);
                $m[1] = Fraction(($y - $k)/($x - $h));
              } until ($h != 0 &amp;&amp; $k != 0 &amp;&amp; $m[1] != $m[0] &amp;&amp; $m[1] != 1);
              $n[1]= ($m[1]->value)[0];
              $d[1]= ($m[1]->value)[1];
              $f[1] = Formula("$m[1](x - $h) + $k")->reduce;
              $gt = GraphTool(
                "{line, solid, (0, $b[0]), ($d[0], $b[0] + $n[0])}",
                "{line, solid, ($h, $k), ($h+$d[1], $k + $n[1])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my ($p3x, $p3y) = $correct->[1]->extract(3)->value;
                    my ($p4x, $p4y) = $correct->[1]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                      $p3y - $p4y, $p4x - $p3x, $p3x * $p4y - $p4x * $p3y
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0, 0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      if ($pointOnLine->(@stdform[3..5],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[3..5],$_->extract(4))) {
                        $line[1] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0] &amp;&amp; $line[1]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("infinitely many solutions")->cmp(
                typeMatch => Point(1,2),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$f[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-slope-intercept-point-slope-copy">
          <webwork copy="webwork-solve-system-graphically-slope-intercept-point-slope"/>
        </exercise>
        <exercise label="solve-system-graphically-slope-intercept-point-slope-infinite-solutions">
          <webwork xml:id="webwork-solve-system-graphically-slope-intercept-point-slope-infinite-solutions">
            <pg-macros>
              <macro-file>parserGraphTool.pl</macro-file>
            </pg-macros>
            <pg-code>
              Context("Fraction");
              Context()->noreduce('(-x)+y', '(-x)-y');
              do {
                ($x,$y) = (-8..-1,1..8)[NchooseK(16,2)];
                $b[0] = list_random(-9..$y-1,$y+1..9);
                $m[0] = Fraction(($y - $b[0])/$x);
              } until ($m[0] != 1);
              $n[0]= ($m[0]->value)[0];
              $d[0]= ($m[0]->value)[1];
              $f[0] = Formula("$m[0] x + $b[0]")->reduce;
              $m[1] = $m[0];
              $f[1] = Formula("$m[1](x - $x) + $y")->reduce;
              $gt = GraphTool(
                "{line, solid, (0, $b[0]), ($d[0], $b[0] + $n[0])}",
              )->with(
                availableTools => [ "LineTool" ],
                showInStatic => 0,
                cmpOptions => {
                  list_checker => sub {
                    my ($correct, $student, $ans, $value) = @_;
                    return 0 if $ans->{isPreview};
                    my $score = 0; my @errors; my $count = 1;
                    my ($p1x, $p1y) = $correct->[0]->extract(3)->value;
                    my ($p2x, $p2y) = $correct->[0]->extract(4)->value;
                    my @stdform = (
                      $p1y - $p2y, $p2x - $p1x, $p1x * $p2y - $p2x * $p1y,
                    );
                    my $pointOnLine = sub {
                      my ($a, $b, $c, $point) = @_;  my ($x, $y) = $point->value;
                      return $a * $x + $b * $y + $c == 0;
                    };
                    my @line = (0);
                    for (@$student) {
                      my $nth = Value::List->NameForNumber($count++);
                      if ($pointOnLine->(@stdform[0..2],$_->extract(3)) &amp;&amp; $pointOnLine->(@stdform[0..2],$_->extract(4))) {
                        $line[0] = 1; $score += 1; next
                      }
                      push(@errors, "The $nth line graphed is incorrect.");
                    }
                    return (($line[0]) ? $score : 0, @errors);
                  }
                }
              );
              Context("Point");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Point($x,$y)->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>
                  \left\{
                    \begin{alignedat}{3}
                      y \amp= <var name="$f[0]"/>\\
                      y \amp= <var name="$f[1]"/>
                    \end{alignedat}
                  \right.
                </m>
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
              <instruction>
                Enter the solution here. If there are no solutions, enter <c>no solutions</c>.
                If there are infinitely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$solution" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                If we graph these lines, we find they cross.
              </p>
              <image width="47%">
                <description>
                  a coordinate plot of two lines that cross at (<var name="$x"/>, <var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                    \begin{axis}[]
                      \addplot[firstcurve,-,domain=-7:7]{$f[0]};
                      \addplot[secondcurve,-,domain=-7:7]{$f[1]};
                    \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
              <p>
                So the only solution is <m><var name="$solution->{rh_ans}{correct_ans}"/></m>.
              </p>
            </solution>
          </webwork>
        </exercise>
        <exercise label="solve-system-graphically-slope-intercept-point-slope-infinite-solutions-copy">
          <webwork copy="webwork-solve-system-graphically-slope-intercept-point-slope-infinite-solutions"/>
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Applications</title>
      <exercise label="solve-system-application-party-planning">
        <webwork xml:id="webwork-solve-system-application-party-planning">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>parserGraphTool.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <!-- This code is condensed (less human readable) to keep the URL length low -->
          <pg-code>
            $p2 = random(1,2,0.25);
            $p1 = $p2 + random(0.5,1,0.25);
            $a = 4*$p2/(gcd(4*$p1,4*$p2));
            $b = 4*$p1/(gcd(4*$p1,4*$p2));
            $x = random(3*$a,6*$a,$a);
            $y = random(3*$b,6*$b,$b);
            $t = $p1*$x + $p2*$y;
            $count = ($x + $y)/2;
            @f = (Formula("($t-$p1*x)/$p2"), Formula("2*$count - x"));
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $total = Currency($t);
            $price1 = Currency($p1);
            $price2 = Currency($p2);
            Context("LinearRelation")->variables->are(x=>'Real',y=>'Real');
            @eq=(LinearRelation("$p1 x + $p2 y = $t"),LinearRelation("x + y = 2*$count"));
            $m=MultiAnswer(@eq)->with(singleResult=>0,
            checker=>sub{
            my($c,$s,$self)=@_;
            my @s=@{$s};
            my @c=@{$c};
            if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
            elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
            elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
            else {return [0,0]}
            });
            $ymax=int(max(2*$count, $t/$p2)/10+0.999)*10;
            $xmax=int(max(2*$count, $t/$p1)/10+0.999)*10;
            $gt=GraphTool("{line,solid,(0,$t/$p2),($t/$p1,0)}","{line,solid,(0,2*$count),(2*$count,0)}")->with(
            availableTools=>["LineTool"],showInStatic=>0,bBox=>[-5,$ymax,$xmax,-5],
            ticksDistanceX=>5,ticksDistanceY=>5,minorTicksX=>4,minorTicksY=>4,
            cmpOptions=>{list_checker=>sub{
            my($c,$s,$a,$v)=@_;
            return 0 if $ans->{isPreview};
            my $score=0; my @errors; my $count=1;
            my ($x1,$y1)=$c->[0]->extract(3)->value;
            my ($x2,$y2)=$c->[0]->extract(4)->value;
            my ($x3,$y3)=$c->[1]->extract(3)->value;
            my ($x4,$y4)=$c->[1]->extract(4)->value;
            my @std=($y1-$y2,$x2-$x1,$x1*$y2-$x2*$y1,$y3-$y4,$x4-$x3,$x3*$y4-$x4*$y3);
            my $p=sub{my ($A,$B,$C,$pt)=@_; my ($x,$y)=$pt->value; return $A*$x+$B*$y+$C==0;};
            my @l=(0,0);
            for (@$s) {
            my $nth=Value::List->NameForNumber($count++);
            if ($p->(@std[0..2],$_->extract(3))&amp;&amp;$p->(@std[0..2],$_->extract(4))) {$l[0]=1;$score += 1; next}
            if ($p->(@std[3..5],$_->extract(3))&amp;&amp;$p->(@std[3..5],$_->extract(4))) {$l[1]=1;$score += 1; next}
            push(@errors, "The $nth line graphed is incorrect.");
            }
            return (($l[0]&amp;&amp;$l[1]) ? $score : 0,@errors);
            }});
            $p=randomPerson();
          </pg-code>
          <introduction>
            <p>
              <var name="$p"/> is organizing an office lunch party. <var name="$p->Their"/> budget
              for beverages is <m><var name="$total"/></m> and <var name="$p->they"/> will try to
              spend all of it. <var name="$p->They"/> assume that <m><var name="$count"/></m> people
              will attend, and there should be two beverages avaiable per person. <var name="$p"/>
              has decided to order cans of a fancy beverage that cost <m><var name="$price1"/></m>
              each, and cans of a cheaper beverage that cost <m><var name="$price2"/></m>
              each. How many of each should <var name="$p->they"/> order?
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                Write two equations that form a system for this scenario.
              </p>
              <instruction>
                Use <c>x</c> as the variable representing how many cans of the more expensive
                beverage to buy, and <c>y</c> for the variable representing how many cans of the
                less expensive beverage to buy.
              </instruction>
              <p>
                <var name="$m" width="16"/>
              </p>
              <p>
                <var name="$m" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                Since there are <m><var name="$count"/></m> people and there should be two drinks
                per person, one equation is <m><var name="$eq[0]"/></m>.
              </p>
              <p>
                Since the first type costs <m><var name="$price1"/></m> each, the second type costs
                <m><var name="$price2"/></m> each, and the total should be
                <m><var name="$total"/></m>, another equation is <m><var name="$eq[1]"/></m>.
              </p>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Plot the lines for the system of two equations.
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
            </statement>
            <solution>
              <p>
                Plotting the two slope-intercept equations:
              </p>
              <image width="47%">
                <description>
                  a Cartesian grid with two intersecting lines;
                  one line passes through (0,<var name="$t/$p2"/>) and (<var name="$t/$p1"/>,0);
                  the other line passes through (0,<var name="2*$count"/>) and (<var name="2*$count"/>,0);
                  the lines cross at (<var name="$x"/>,<var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                  \begin{axis}[xmin=-5,xmax=$xmax,ymin=-5,ymax=$ymax,xtick={-100,-95,...,100},ytick={-100,-95,...,100},minor xtick={-100,-99,...,100},minor ytick={-100,-99,...,100}]
                  \addplot[firstcurve,-,domain=-5:$xmax]{$f[0]};
                  \addplot[secondcurve,-,domain=-5:$xmax]{$f[1]};
                  \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Based on the graph, how many of the more expensive beverage should <var name="$p"/> buy?
              </p>
              <p>
                <var name="$x" width="16"/>
              </p>
              <p>
                How many of the less expensive beverage should <var name="$p"/> buy?
              </p>
              <p>
                <var name="$y" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                The lines cross at <m>(<var name="$x"/>,<var name="$y"/>)</m>. So <var name="$p"/>
                should buy <var name="$x"/> of the more expensive drink, and <var name="$y"/>
                of the less expensive drink.
              </p>
            </solution>
          </task>
        </webwork>
      </exercise>
      <exercise label="solve-system-application-hardware-store">
        <webwork xml:id="webwork-solve-system-application-hardware-store">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>parserGraphTool.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <!-- This code is condensed (less human readable) to keep the URL length low -->
          <pg-code>
            $nx = list_random([2,10], [2,30], [2,40], [3,15], [3,30], [3,45], [4,20], [4,40]);
            ($n,$x) = @$nx;
            $y = random(2,5);
            $t = $x + $n*$y;
            $d = $x - $y;
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $total = Currency($t);
            $difference = Currency($d);
            $hammer = Currency($x);
            $nails = Currency($y);
            @f = (Formula("($t-x)/$n"), Formula("x-$d"));
            Context("LinearRelation")->variables->are(x=>'Real',y=>'Real');
            @eq=(LinearRelation("x + $n y = $t"),LinearRelation("x = y + $d"));
            $m=MultiAnswer(@eq)->with(singleResult=>0,
            checker=>sub{
            my($c,$s,$self)=@_;
            my @s=@{$s};
            my @c=@{$c};
            if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
            elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
            elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
            else {return [0,0]}
            });
            $ymax=int(($t/$n)/10+0.999)*10;
            $ymin=int(-$d/10-0.999)*10;
            $xmax=int($t/10+0.999)*10;
            $gt=GraphTool("{line,solid,(0,$t/$n),($t,0)}","{line,solid,(0,-$d),($d,0)}")->with(
            availableTools=>["LineTool"],showInStatic=>0,bBox=>[-5,$ymax,$xmax,$ymin],
            ticksDistanceX=>5,ticksDistanceY=>5,minorTicksX=>4,minorTicksY=>4,
            cmpOptions=>{list_checker=>sub{
            my($c,$s,$a,$v)=@_;
            return 0 if $ans->{isPreview};
            my $score=0; my @errors; my $count=1;
            my ($x1,$y1)=$c->[0]->extract(3)->value;
            my ($x2,$y2)=$c->[0]->extract(4)->value;
            my ($x3,$y3)=$c->[1]->extract(3)->value;
            my ($x4,$y4)=$c->[1]->extract(4)->value;
            my @std=($y1-$y2,$x2-$x1,$x1*$y2-$x2*$y1,$y3-$y4,$x4-$x3,$x3*$y4-$x4*$y3);
            my $p=sub{my ($A,$B,$C,$pt)=@_; my ($x,$y)=$pt->value; return $A*$x+$B*$y+$C==0;};
            my @l=(0,0);
            for (@$s) {
            my $nth=Value::List->NameForNumber($count++);
            if ($p->(@std[0..2],$_->extract(3))&amp;&amp;$p->(@std[0..2],$_->extract(4))) {$l[0]=1;$score += 1; next}
            if ($p->(@std[3..5],$_->extract(3))&amp;&amp;$p->(@std[3..5],$_->extract(4))) {$l[1]=1;$score += 1; next}
            push(@errors, "The $nth line graphed is incorrect.");
            }
            return (($l[0]&amp;&amp;$l[1]) ? $score : 0,@errors);
            }});
            $p=randomPerson();
            $w = numberWord($n);
          </pg-code>
          <introduction>
            <p>
              At the local hardware store, <var name="$p"/> bought a hammer and <var name="$w"/>
              boxes of nails. The total cost was <m><var name="$total"/></m>. The hammer costs
              <m><var name="$difference"/></m> more than a box of nails. How much does a hammer
              cost and how much does one box of nails cost?
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                Write two equations that form a system for this scenario.
              </p>
              <instruction>
                Use <c>x</c> as the variable for the cost of the hammer, and <c>y</c> for the
                variable representing the cost of one box of nails.
              </instruction>
              <p>
                <var name="$m" width="16"/>
              </p>
              <p>
                <var name="$m" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                Since the total cost of the hammer and <var name="$w"/> boxes of nails is
                <m><var name="$total"/></m>, one equation is <m><var name="$eq[0]"/></m>.
              </p>
              <p>
                Since the hammer costs <m><var name="$difference"/></m> more than a box of nails,
                another equation is <m><var name="$eq[1]"/></m>.
              </p>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Plot the lines for the system of two equations.
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
            </statement>
            <solution>
              <p>
                Plotting the two slope-intercept equations:
              </p>
              <image width="47%">
                <description>
                  a Cartesian grid with two intersecting lines;
                  one line passes through (0,<var name="$t/$n"/>) and (<var name="$t"/>,0);
                  the other line passes through (0,<var name="-$d"/>) and (<var name="$d"/>,0);
                  the lines cross at (<var name="$x"/>,<var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                  \begin{axis}[xmin=-5,xmax=$xmax,ymin=$ymin,ymax=$ymax,xtick={-100,-95,...,100},ytick={-100,-95,...,100},minor xtick={-100,-99,...,100},minor ytick={-100,-99,...,100}]
                  \addplot[firstcurve,-,domain=-5:$xmax]{$f[0]};
                  \addplot[secondcurve,-,domain=-5:$xmax]{$f[1]};
                  \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Based on the graph, how much does the hammer cost?
              </p>
              <p>
                <var name="$hammer" width="16"/>
              </p>
              <p>
                How much does a box of nails cost?
              </p>
              <p>
                <var name="$nails" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                The lines cross at <m>(<var name="$x"/>,<var name="$y"/>)</m>. So a hammer costs
                <m><var name="$hammer"/></m>, and a box of nails costs  <var name="$nails"/>.
              </p>
            </solution>
          </task>
        </webwork>
      </exercise>
      <exercise label="solve-system-application-greet-dog">
        <webwork xml:id="webwork-solve-system-application-greet-dog">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>parserGraphTool.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <!-- This code is condensed (less human readable) to keep the URL length low -->
          <pg-code>
            Context("LinearRelation")->variables->are(t=>'Real',d=>'Real');
            $rate[1]=-random(8,12,2);
            $dogspeed=NumberWithUnits("-$rate[1] m/s");
            $x=list_random(5,10);
            $time=NumberWithUnits("$x s");
            $rate[0]=3;
            $speed=NumberWithUnits("$rate[0] m/s");
            $y=$x*$rate[0];
            $distance=NumberWithUnits("$y m");
            $b=$y-$rate[1]*$x;
            $initial=NumberWithUnits("$b ft");
            @eq=(LinearRelation("d=$rate[0]t"),LinearRelation("d=$b+$rate[1]t"));
            Context("Numeric");
            @f = (Formula("$rate[0]*x"), Formula("$b + $rate[1]*x"));
            $m=MultiAnswer(@eq)->with(singleResult=>0,
            checker=>sub{
            my($c,$s,$self)=@_;
            my @s=@{$s};
            my @c=@{$c};
            if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
            elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
            elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
            else {return [0,0]}
            });
            $ymax=int($b/100+0.999)*100;
            $gt=GraphTool("{line,solid,(0,0),(1,$rate[0])}","{line,solid,(0,$b),(1,$b+$rate[1])}")->with(
            availableTools=>["LineTool"],showInStatic=>0,bBox=>[-2,$ymax,12,-20],snapSizeY=>5,gridY=>10,
            ticksDistanceY=>50,minorTicksY=>4,xAxisLabel=>'t',yAxisLabel=>'d',
            cmpOptions=>{list_checker=>sub{
            my($c,$s,$a,$v)=@_;
            return 0 if $ans->{isPreview};
            my $score=0; my @errors; my $count=1;
            my ($x1,$y1)=$c->[0]->extract(3)->value;
            my ($x2,$y2)=$c->[0]->extract(4)->value;
            my ($x3,$y3)=$c->[1]->extract(3)->value;
            my ($x4,$y4)=$c->[1]->extract(4)->value;
            my @std=($y1-$y2,$x2-$x1,$x1*$y2-$x2*$y1,$y3-$y4,$x4-$x3,$x3*$y4-$x4*$y3);
            my $p=sub{my ($A,$B,$C,$pt)=@_; my ($x,$y)=$pt->value; return $A*$x+$B*$y+$C==0;};
            my @l=(0,0);
            for (@$s) {
            my $nth=Value::List->NameForNumber($count++);
            if ($p->(@std[0..2],$_->extract(3))&amp;&amp;$p->(@std[0..2],$_->extract(4))) {$l[0]=1;$score += 1; next}
            if ($p->(@std[3..5],$_->extract(3))&amp;&amp;$p->(@std[3..5],$_->extract(4))) {$l[1]=1;$score += 1; next}
            push(@errors, "The $nth line graphed is incorrect.");
            }
            return (($l[0]&amp;&amp;$l[1]) ? $score : 0,@errors);
            }});
            $p=randomPerson();
          </pg-code>
          <introduction>
            <p>
              <var name="$p"/> enters a grassy field from some dense trees. <var name="$p->Their"/>
              dog is standing out in the field, <m><var name="$initial"/></m> away. As soon as they
              see each other, they start running toward each other. <var name="$p"/> runs with speed
              <m><var name="$speed"/></m> and <var name="$p->their"/> dog runs with speed
              <m><var name="$dogspeed"/></m>. How long will it be until they meet?
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                Write two equations that form a system for this scenario.
              </p>
              <instruction>
                Use <c>t</c> as the variable for how much time has passed, and <c>d</c> for the
                variable representing the distance each person/dog is from where <var name="$p"/>
                started.
              </instruction>
              <p>
                <var name="$m" width="16"/>
              </p>
              <p>
                <var name="$m" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                <var name="$p"/> starts out at position <m>d=0</m>, running with speed
                <m><var name="$speed"/></m>. So one equation is <m><var name="$eq[0]"/></m>.
              </p>
              <p>
                The dog starts running with speed <m><var name="$dogspeed"/></m> but getting closer
                to <var name="$p"/>. So we'll use a negative rate of change. And the dog starts out
                <m><var name="$initial"/></m> away. So the other equation is
                <m><var name="$eq[1]"/></m>.
              </p>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Plot the lines for the system of two equations.
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
            </statement>
            <solution>
              <p>
                Plotting the two slope-intercept equations:
              </p>
              <image width="47%">
                <description>
                  a Cartesian grid with two intersecting lines;
                  one line passes through (0,<var name="$b"/>) with slope <var name="$rate[0]"/>;
                  the other line passes through (0,0) with slope <var name="$rate[1]"/>;
                  the lines cross at (<var name="$x"/>,<var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                  \begin{axis}[xmin=0,xmax=12,ymin=0,ymax=300,xtick={0,4,8,12},ytick={0,50,...,$ymax},minor xtick={0,1,...,12},minor ytick={0,10,...,$ymax},xlabel={\(t\)},ylabel={\(d\)}]
                  \addplot[firstcurve,-{Kite},domain=0:12]{$f[0]};
                  \addplot[secondcurve,-{Kite},domain=0:12]{$f[1]};
                  \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Based on the graph, how long will it be until they meet?
              </p>
              <p>
                <var name="$time" width="16"/>
              </p>
              <p>
                How far will that be from the place where <var name="$p"/> started?
              </p>
              <p>
                <var name="$distance" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                The lines cross at <m>(<var name="$x"/>,<var name="$y"/>)</m>. So after
                <m><var name="$x"/></m> seconds, they will meet <var name="$y"/>
                feet away from where <var name="$p"/> started.
              </p>
            </solution>
          </task>
        </webwork>
      </exercise>
      <exercise label="solve-system-application-dog-cyclist">
        <webwork xml:id="webwork-solve-system-application-dog-cyclist">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>parserGraphTool.pl</macro-file>
          </pg-macros>
          <!-- This code is condensed (less human readable) to keep the URL length low -->
          <pg-code>
            Context("LinearRelation")->variables->are(t=>'Real',d=>'Real');
            $rate[1]=random(30,45,5);
            $dogspeed=NumberWithUnits("$rate[1] ft/s");
            $x=list_random(4,8,10);
            $time=NumberWithUnits("$x s");
            $y=$x*$rate[1];
            $distance=NumberWithUnits("$y ft");
            $b=random(30,50,10);
            $initial=NumberWithUnits("$b ft");
            $rate[0]=($y-$b)/$x;
            $speed=NumberWithUnits("$rate[0] ft/s");
            @eq=(LinearRelation("d=$rate[0]t+$b"),LinearRelation("d=$rate[1]t"));
            Context("Numeric");
            @f = (Formula("$rate[0]*x+$b"), Formula("$rate[1]*x"));
            $m=MultiAnswer(@eq)->with(singleResult=>0,
            checker=>sub{
            my($c,$s,$self)=@_;
            my @s=@{$s};
            my @c=@{$c};
            if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
            elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
            elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
            else {return [0,0]}
            });
            $ymax=int($y/100+0.999)*100;
            $gt=GraphTool("{line,solid,(0,$b),(1,$b+$rate[0])}","{line,solid,(0,0),(1,$rate[1])}")->with(
            availableTools=>["LineTool"],showInStatic=>0,bBox=>[-2,$ymax,12,-20],snapSizeY=>10,gridY=>10,
            ticksDistanceY=>50,minorTicksY=>4,xAxisLabel=>'t',yAxisLabel=>'d',
            cmpOptions=>{list_checker=>sub{
            my($c,$s,$a,$v)=@_;
            return 0 if $ans->{isPreview};
            my $score=0; my @errors; my $count=1;
            my ($x1,$y1)=$c->[0]->extract(3)->value;
            my ($x2,$y2)=$c->[0]->extract(4)->value;
            my ($x3,$y3)=$c->[1]->extract(3)->value;
            my ($x4,$y4)=$c->[1]->extract(4)->value;
            my @std=($y1-$y2,$x2-$x1,$x1*$y2-$x2*$y1,$y3-$y4,$x4-$x3,$x3*$y4-$x4*$y3);
            my $p=sub{my ($A,$B,$C,$pt)=@_; my ($x,$y)=$pt->value; return $A*$x+$B*$y+$C==0;};
            my @l=(0,0);
            for (@$s) {
            my $nth=Value::List->NameForNumber($count++);
            if ($p->(@std[0..2],$_->extract(3))&amp;&amp;$p->(@std[0..2],$_->extract(4))) {$l[0]=1;$score += 1; next}
            if ($p->(@std[3..5],$_->extract(3))&amp;&amp;$p->(@std[3..5],$_->extract(4))) {$l[1]=1;$score += 1; next}
            push(@errors, "The $nth line graphed is incorrect.");
            }
            return (($l[0]&amp;&amp;$l[1]) ? $score : 0,@errors);
            }});
          </pg-code>
          <introduction>
            <p>
              A cyclist riding at <m><var name="$speed"/></m> rides past a dog. A moment later, when
              the bicycle is <m><var name="$initial"/></m> away, the dog begins to chase the bicycle
              at a speed of <m><var name="$dogspeed"/></m>. Assuming the cyclist does not change
              course or speed, how long will it be until the dog catches up to the bicycle?
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                Write two equations that form a system for this scenario.
              </p>
              <instruction>
                Use <c>t</c> as the variable for how much time has passed, and <c>d</c> for the
                variable representing how many feet the bicycle/dog has traveled.
              </instruction>
              <p>
                <var name="$m" width="16"/>
              </p>
              <p>
                <var name="$m" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                The bicycle starts out <m><var name="$initial"/></m> away and is traveling at
                <m><var name="$speed"/></m>. So one equation is <m><var name="$eq[0]"/></m>.
              </p>
              <p>
                The dog starts running at time <m>t=0</m> with speed <m><var name="$dogspeed"/></m>.
                So the other equation is <m><var name="$eq[1]"/></m>.
              </p>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Plot the lines for the system of two equations.
              </p>
              <p>
                <var name="$gt" width="1"/>
              </p>
            </statement>
            <solution>
              <p>
                Plotting the two slope-intercept equations:
              </p>
              <image width="47%">
                <description>
                  a Cartesian grid with two intersecting lines;
                  one line passes through (0,<var name="$b"/>) with slope <var name="$rate[0]"/>;
                  the other line passes through (0,0) with slope <var name="$rate[1]"/>;
                  the lines cross at (<var name="$x"/>,<var name="$y"/>)
                </description>
                <latex-image>
                  \begin{tikzpicture}
                  \begin{axis}[xmin=0,xmax=12,ymin=0,ymax=300,xtick={0,4,8,12},ytick={0,50,...,$ymax},minor xtick={0,1,...,12},minor ytick={0,10,...,$ymax},xlabel={\(t\)},ylabel={\(d\)}]
                  \addplot[firstcurve,-{Kite},domain=0:12]{$f[0]};
                  \addplot[secondcurve,-{Kite},domain=0:12]{$f[1]};
                  \end{axis}
                  \end{tikzpicture}
                </latex-image>
              </image>
            </solution>
          </task>
          <task>
            <statement>
              <p>
                Based on the graph, how long will it be until the dog catches up with the bicycle?
              </p>
              <p>
                <var name="$time" width="16"/>
              </p>
              <p>
                How far will that be from the place where the dog started running?
              </p>
              <p>
                <var name="$distance" width="16"/>
              </p>
            </statement>
            <solution>
              <p>
                The lines cross at <m>(<var name="$x"/>,<var name="$y"/>)</m>. So after
                <m><var name="$x"/></m> seconds, the cyclist and the dog are each <var name="$y"/>
                feet away from where the dog started running.
              </p>
            </solution>
          </task>
        </webwork>
      </exercise>
    </subexercises>
  </exercises>
</section>
