<?xml version="1.0" encoding="UTF-8" ?>

<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- Authors                                                              -->
<!-- Ann Cary, Alex Jordan, Ross Kouzes, Scot Leavitt, Cara Lee,          -->
<!-- Carl Yao, Ralf Youtz                                                 -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Creative Commons BY 4.0 license                                      -->
<!-- https://creativecommons.org/licenses/by/4.0/                         -->
<!-- *********************************************************************-->

<section xml:id="section-comparison-symbols">

    <title>Comparison Symbols</title>

        <objectives>
            <title>PCC Course Content and Outcome Guide</title>
            <ul cols="3">
                <li><xref ref="mth60-order-real-numbers-on-number-line" /></li>
            </ul>
        </objectives>

    <introduction>

        <p>As you know, <m>8</m> is larger than <m>3</m>; that's a specific comparison between two numbers. We can also make a comparison between two less specific numbers, like if we say that average rent in Portland in 2016 is larger than it was in 2009. That makes a comparison using unspecified amounts. This section will go over the mathematical shorthand notation for making these kinds of comparisons.</p>

        <figure>
            <caption>Alternative Video Lesson</caption>
            <video youtubelist="PLmuZCPhWPt-fkLe_JgvfS8l8VO8DuBS4W" />
        </figure>

    </introduction>



        <p>In Oregon, only people who are <m>18</m> years old or older can vote in statewide elections.<fn>Some other states like Washington allow 17-year-olds to vote in primary elections provided they will be 18 by the general election.</fn> Does that seem like a statement about the number <m>18</m>? Maybe. But it's also a statement about numbers like <m>37</m> and <m>62</m>: it says that people of these ages may vote as well.  This section will also get into the mathematical notation for large collections of numbers like this.</p>

        <p>In everyday language you can say something like <q><m>8</m> is larger than <m>3</m>.</q> In mathematical writing, it's not convenient to write that out in English. Instead the symbol <q><m>\gt</m></q> has been adopted, and it's used like this: <me>8\gt3</me> and read out loud as <q><m>8</m> is greater than <m>3</m>.</q> The symbol <q><m>\gt</m></q> is called the <term>greater-than symbol.</term><idx><h>greater-than symbol</h></idx></p>

        <exercise>
            <webwork >
                <setup>
                    <var name="$overage">
                        <static>\text{age}\gt20</static>
                    </var>
                    <pg-code>
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->strings->add('age'=>{isLetter => 1,TeX=>'\text{age}'});
                        Context()->strings->add('a'=>{isLetter => 1,TeX=>'\text{a}'});
                        Context()->strings->add('x'=>{isLetter => 1,TeX=>'\text{x}'});
                        $overage=OneOf(Compute("age>20"),Compute("a>20"),Compute("x>20"));
                    </pg-code>
                </setup>
                <statement>
                    <p><ol label="a.">
                        <li>
                            <p>Use mathematical notation to write <q><m>11.5</m> is greater than <m>4.2</m>.</q></p>
                            <p><var name="'11.5>4.2'" width="15" /></p>
                        </li>
                        <li>
                            <p>Use mathematical notation to write <q>age is greater than <m>20</m>.</q></p>
                            <p><var name="$overage" width="15" /></p>
                        </li>
                    </ol></p>
                </statement>
                <solution>
                    <p><ol label="a.">
                        <li>
                            <p><m>11.5\gt4.2</m></p>
                        </li>
                        <li>
                            <p>We can just write the word <c>age</c> to represent age, and write <m>\text{age}\gt20</m>. Or we could use an abbreviation like <m>a</m> for age, and write <m>a\gt20</m>. Or, it is common to use <m>x</m> as a generic abbreviation, and we could write <m>x\gt20</m>.</p>
                        </li>
                    </ol></p>
                </solution>
            </webwork>
        </exercise>

        <p>At some point in history, someone felt that <m>\gt</m> was a good symbol for <q>is greater than.</q> In <q><m>8\gt3</m>,</q> the tall side of the symbol is with the larger of the two numbers, and the small pointed side is with the smaller of the two numbers. That seems like a good system.</p>

        <aside>
            <title>Alligator Jaws</title>
            <p>Grade school teachers sometimes teach children that <q>the alligator wants to eat the larger number</q> as a way of remembering which direction to write the symbol.</p>
        </aside>

        <p>We have to be careful when negative numbers are part of the comparison though. Is <m>-8</m> larger or smaller than <m>-3</m>? In some sense <m>-8</m> is larger, because if you owe someone <m>8</m> dollars, that's <em>more</em> than owing them <m>3</m> dollars. But that is not how the <m>\gt</m> symbol works. This symbol is meant to tell you which number is farther to the right on a number line. And if that's how it goes, then <m>-3\gt-8</m>.</p>

        <figure>
            <caption>How the <m>\gt</m> symbol works.</caption>
            <image width="50%">
                <description>a number line with marks at -8, -3, and 8; text indicates the numbers to the left are lesser numbers, and numbers to the right are greater numbers; text indicates that -3 > -8 and 8 > -3</description>
                <latex-image>
                    <![CDATA[\begin{tikzpicture}
                        \begin{axis}[numberline,
                                    xtick={-8,-3,3,8},
                                    ]
                            \addplot[soliddot] coordinates {(-8,0)};
                            \addplot[soliddot] coordinates {(-3,0)};
                            \addplot[soliddot] coordinates {(8,0)};
                            \node[above] at (axis cs: -5.5,1) {$-3>-8$};
                                \draw[<-](axis cs: -7.5,0.2) --(axis cs: -5.5,1);
                                \draw[<-](axis cs: -3.5,0.2) --(axis cs: -5.5,1);
                            \node[above] at (axis cs: 2.5,1) {$8>-3$};
                                \draw[<-](axis cs: 6.9,0.2) --(axis cs: 2.5,1);
                                \draw[<-](axis cs: -1.9,0.2) --(axis cs: 2.5,1);
                            \node[above] at (axis cs: 11,0) {\parbox{9ex}{greater numbers}};
                            \node[above] at (axis cs: -11,0) {\parbox{9ex}{lesser numbers}};
                        \end{axis}
                    \end{tikzpicture}]]>
                </latex-image>
            </image>
        </figure>

        <exercise>
            <webwork seed="1">
                <setup>
                    <var name="$as">
                        <static>-7.6\quad6\quad-6\quad9.5\quad8</static>
                    </var>
                    <var name="$comparison">
                        <static>9.5\gt8\gt6\gt-6\gt-7.6</static>
                    </var>
                    <pg-code>
                        @a=(-7.6,6,-6,9.5,8);
                        $as='{'.join('}\quad{',@a).'}';
                        @b=PGsort(sub{$_[0]&gt;$_[1]},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                        $numberline=init_graph(-12,-1,12,1,size=>[400,40]);
                        $numberline->moveTo(-12,0);
                        $numberline->lineTo(12,0,'black');
                        for my$i(-12..12){$numberline->moveTo($i,-0.2);$numberline->lineTo($i,0.2,'black');};
                        $numberline->lb(new Label(0,-0.2,"0",'black','center','top'));
                        for my$i(0,2,4){$numberline->lb(new Label($b[$i],-0.2,"$b[$i]",'blue','center','top'));$numberline->stamps(closed_circle($b[$i],0,'blue'));};
                        for my$i(1,3){$numberline->lb(new Label($b[$i],0.2,"$b[$i]",'blue','center','bottom'));$numberline->stamps(closed_circle($b[$i],0,'blue'));};
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
                <solution>
                    <p>We can order these numbers by placing these numbers on a number line.</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$numberline"/></sidebyside>
                    <p>And so we see the answer is <m><var name="$comparison" /></m>.</p>
                </solution>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-5.2\quad\pi\quad\frac{10}{3}\quad4.6\quad8</static>
                    </var>
                    <var name="$comparison">
                        <static>8\gt4.6\gt\frac{10}{3}\gt\pi\gt-5.2</static>
                    </var>
                    <pg-code>
                        Context("Fraction");
                        Context()->flags->set(reduceConstants=>0);
                        @a=(-5.2,Formula("pi"),Fraction(10,3),4.6,8);
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        @c=map{Real("$_")}(@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                        $comparison=Compute("$bs");
                        $numberline=init_graph(-12,-1,12,1,size=>[400,40]);
                        $numberline->moveTo(-12,0);
                        $numberline->lineTo(12,0,'black');
                        for my$i(-12..12){$numberline->moveTo($i,-0.2);$numberline->lineTo($i,0.2,'black');};
                        $numberline->lb(new Label(0,-0.2,"0",'black','center','top'));
                        for my$i(0,2,4){$numberline->lb(new Label($c[$i],-0.2,"$b[$i]",'blue','center','top'));$numberline->stamps(closed_circle($c[$i],0,'blue'));};
                        for my$i(1,3){$numberline->lb(new Label($c[$i],0.2,"$b[$i]",'blue','center','bottom'));$numberline->stamps(closed_circle($c[$i],0,'blue'));};
                        $refreshCachedImages=1;
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
                <solution>
                    <p>We can order these numbers by placing these numbers on a number line. Knowing or computing their decimals helps with this.</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$numberline"/></sidebyside>
                    <p>And so we see the answer is <m><var name="$comparison" /></m>.</p>
                </solution>
            </webwork>
        </exercise>

        <p>The greater-than symbol has a close relative, the <term>greater-than-or-equal-to symbol</term>, <q><m>\geq</m>.</q><idx><h>greater-than-or-equal-to symbol</h></idx> It means just like it sounds: the first number is either greater than, or equal to, the second number. These are all true statements:<md>
            <mrow>8\amp\geq3\amp3\amp\geq-8\amp3\amp\geq3</mrow>
        </md>but one of these three statements is false:<md>
            <mrow>8\amp\gt3\amp3\amp\gt-8\amp3\amp\stackrel{\text{no}}{\gt}3</mrow>
        </md>
        </p>
        <remark><p>While it may not be that useful that we can write <m>3\geq3</m>, this symbol is quite useful when specific numbers aren't explicitly used on at least one side, like in these examples: <me>(\text{hourly pay rate})\geq(\text{minimum wage})</me> <me>(\text{age of a voter})\geq18</me>
        </p></remark>

        <p>Sometimes you want to emphasize that one number is <em>less than</em> another number instead of emphasizing which number is greater. To do this, we have symbols that are reversed from <m>\gt</m> and <m>\geq</m>. The symbol <q><m>\lt</m></q> is the <term>less-than symbol</term> and it's used like this: <me>3\lt8</me> and read out loud as <q><m>3</m> is less than <m>8</m>.</q><idx><h>less-than symbol</h></idx></p>

        <p><xref ref="table-comparison-symbols">Table</xref> gives the complete list of all six comparison symbols. Note that we've only discussed three in this section so far, but you already know the equals symbol, and we don't want to beat a dead horse with a full discussion of the last two.</p>

        <table xml:id="table-comparison-symbols">
            <caption>Comparison Symbols</caption>
            <tabular valign="top">
                <col />
                <col width="25%" />
                <col/>
                <col/>
                <row bottom="medium">
                    <cell>Symbol</cell>
                    <cell>Means</cell>
                    <cell colspan="2" halign="center">Examples</cell>
                </row>
                <row>
                    <cell><m>=</m></cell>
                    <cell><p>equals</p></cell>
                    <cell><m>13=13\qquad</m></cell>
                    <cell><m>\frac{5}{4}=1.25</m></cell>
                </row>
                <row>
                    <cell><m>\gt</m></cell>
                    <cell><p>is greater than</p></cell>
                    <cell><m>13\gt11</m></cell>
                    <cell><m>\pi\gt3</m></cell>
                </row>
                <row>
                    <cell><m>\geq</m></cell>
                    <cell><p>is greater than or equal to</p></cell>
                    <cell><m>13\geq11</m></cell>
                    <cell><m>3\geq3</m></cell>
                </row>
                <row>
                    <cell><m>\lt</m></cell>
                    <cell><p>is less than</p></cell>
                    <cell><m>-3\lt8</m></cell>
                    <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
                </row>
                <row>
                    <cell><m>\leq</m></cell>
                    <cell><p>is less than or equal to</p></cell>
                    <cell><m>-3\leq8</m></cell>
                    <cell><m>3\leq3</m></cell>
                </row>
                <row>
                    <cell><m>\neq</m></cell>
                    <cell><p>is not equal to</p></cell>
                    <cell><m>10\neq20</m></cell>
                    <cell><m>\frac{1}{2}\neq1.2</m></cell>
                </row>
            </tabular>
        </table>

    <exercises>
        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>3\quad7\quad-2\quad-3\quad4</static>
                    </var>
                    <var name="$comparison">
                        <static>7\gt4\gt3\gt-2\gt-3</static>
                    </var>
                    <pg-code>
                        @a=map{$_-10}NchooseK(21,5);
                        if($envir{problemSeed}==1){@a=(3,7,-2,-3,4)};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>3\quad7\quad-2\quad-3\quad4</static>
                    </var>
                    <var name="$comparison">
                        <static>7\gt4\gt3\gt-2\gt-3</static>
                    </var>
                    <pg-code>
                        @a=map{$_-10}NchooseK(21,5);
                        if($envir{problemSeed}==1){@a=(3,7,-2,-3,4)};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-7.1\quad2.11\quad4.89\quad-3.1\quad-0.07</static>
                    </var>
                    <var name="$comparison">
                        <static>4.89\gt-0.07\gt-2.11\gt-3.1\gt-7.1</static>
                    </var>
                    <pg-code>
                        @a=map{($_-1000)/100}NchooseK(2000,5);
                        if($envir{problemSeed}==1){@a=(-7.1,-2.11,4.89,-3.1,-0.07)};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>2.4\quad-5.83\quad7.67\quad-2.01\quad-5.73</static>
                    </var>
                    <var name="$comparison">
                        <static>7.67\gt2.4\gt-2.01\gt-5.73\gt-5.83</static>
                    </var>
                    <pg-code>
                        @a=map{($_-10)+random(0,0.8,0.2)+random(0,0.09,0.01)}NchooseK(19,4);
                        if($a[1]&lt;0){$a[4]=$a[1]+0.1;}
                        elsif($a[1]=-$a[0]){$a[4]=$a[0]+0.1;}
                        elsif($a[1]=-$a[2]){$a[4]=$a[2]+0.1;}
                        elsif($a[1]=-$a[3]){$a[4]=$a[3]+0.1;};
                        if($envir{problemSeed}==1){@a=(2.4,-5.83,7.67,-2.01,-5.73)};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-8\quad\frac{53}{8}\quad-\frac{17}{3}\quad9\quad8</static>
                    </var>
                    <var name="$comparison">
                        <static>9\gt8\gt\frac{53}{8}\gt-\frac{17}{3}\gt-8</static>
                    </var>
                    <pg-code>
                        @a=map{$_-10}NchooseK(21,5);
                        Context("Fraction");
                        @i=NchooseK(5,2);
                        @d=map{$_+2}NchooseK(7,2);
                        $a[$i[0]]=Fraction($d[0]*$a[$i[0]]+random(1,$d[0]-1,1),$d[0]);
                        $a[$i[1]]=Fraction($d[1]*$a[$i[1]]+random(1,$d[1]-1,1),$d[1]);
                        if($envir{problemSeed}==1){@a=(-8,Fraction(53,8),Fraction(-17,3),9,8)};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-\frac{9}{2}\quad\frac{7}{4}\quad\frac{8}{3}\quad-\frac{4}{3}\quad-\frac{64}{9}</static>
                    </var>
                    <var name="$comparison">
                        <static>\frac{8}{3}\gt\frac{7}{4}\gt-\frac{4}{3}\gt-\frac{9}{2}\gt-\frac{64}{9}</static>
                    </var>
                    <pg-code>
                        @d=(random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1));
                        Context("Fraction");
                        $a[0]=Fraction(random(-1,1,2)*random(1,$d[0]*9,1),$d[0]);
                        do{$a[1]=Fraction(random(-1,1,2)*random(1,$d[1]*9,1),$d[1]);}until($a[1]!=$a[0]);
                        do{$a[2]=Fraction(random(-1,1,2)*random(1,$d[2]*9,1),$d[2]);}until($a[2]!=$a[0] and $a[2]!=$a[1]);
                        do{$a[3]=Fraction(random(-1,1,2)*random(1,$d[3]*9,1),$d[3]);}until($a[3]!=$a[0] and $a[3]!=$a[1] and $a[3]!=$a[2]);
                        do{$a[4]=Fraction(random(-1,1,2)*random(1,$d[4]*9,1),$d[4]);}until($a[4]!=$a[0] and $a[4]!=$a[1] and $a[4]!=$a[2] and $a[4]!=$a[3]);
                        if($envir{problemSeed}==1){@a=(Fraction(-9,2),Fraction(7,4),Fraction(8,3),Fraction(-4,3),Fraction(-64,9))};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-5.2\quad\pi\quad\frac{10}{3}\quad4.6\quad8</static>
                    </var>
                    <var name="$comparison">
                        <static>8\gt4.6\gt\frac{10}{3}\gt\pi\gt-5.2</static>
                    </var>
                    <pg-code>
                        @c=map{$_-10}NchooseK(21,4);
                        Context("Fraction");
                        @d=map{$_+2}NchooseK(7,2);
                        $c[2]=Fraction($d[0]*$a[2]+random(1,$d[0]-1,1),$d[0]);
                        $c[3]=Fraction($d[1]*$a[3]+random(1,$d[1]-1,1),$d[1]);
                        Context()->flags->set(reduceConstants=>0,reduceConstantFunctions=>0);
                        @irrationals=(Formula("pi"),Formula("pi/2"),Formula("sqrt(2)"),Formula("sqrt(3)"));
                        ($c[4],$c[5])=(@irrationals)[NchooseK(4,2)];
                        @a=(@c)[NchooseK(6,6)];
                        if($envir{problemSeed}==1){@a=(6,Fraction(1,2),Formula("pi"),Fraction(3,4),-8,Formula("sqrt(2)"))};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        Context()->functions->add('sqrt' => {class => 'Parser::Function::numeric', braceTeX => 1, TeX => '\sqrt'});
                        Context()->parens->add('(' => {close => ')', type => 'Point', formMatrix => 1, formInterval => ']', formList => 1, removable => 1, emptyOK => 1, function => 1});
                        Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$as">
                        <static>-5.2\quad\pi\quad\frac{10}{3}\quad4.6\quad8</static>
                    </var>
                    <var name="$comparison">
                        <static>8\gt4.6\gt\frac{10}{3}\gt\pi\gt-5.2</static>
                    </var>
                    <pg-code>
                        @c=map{$_-10}NchooseK(21,4);
                        Context("Fraction");
                        @d=map{$_+2}NchooseK(7,2);
                        $c[2]=Fraction($d[0]*$a[2]+random(1,$d[0]-1,1),$d[0]);
                        $c[3]=Fraction($d[1]*$a[3]+random(1,$d[1]-1,1),$d[1]);
                        Context()->flags->set(reduceConstants=>0,reduceConstantFunctions=>0);
                        @irrationals=(Formula("pi"),Formula("pi/2"),Formula("sqrt(2)"),Formula("sqrt(3)"));
                        ($c[4],$c[5])=(@irrationals)[NchooseK(4,2)];
                        @a=(@c)[NchooseK(6,6)];
                        if($envir{problemSeed}==1){@a=(6,Fraction(1,2),Formula("pi"),Fraction(3,4),-8,Formula("sqrt(2)"))};
                        Context()->texStrings;
                        $as='{'.join('}\quad{',@a).'}';
                        Context()->normalStrings;
                        @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                        $bs=join('>',@b);
                        package context::Ordering::BOP::ordering;
                        *isOrdering = sub {
                            my $self = shift; my $obj = shift; my $class = $obj->class;
                            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                        };
                        package main;
                        Context("Ordering");
                        Context()->operators->add(
                        '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                                class => 'Parser::BOP::subtract', rightparens => 'same'},
                        '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                                class => 'Parser::BOP::divide', space => ' /',
                                rightparens => 'all', leftparens => 'extra', fullparens => 1},
                        'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                                class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                        );
                        Context()->functions->add('sqrt' => {class => 'Parser::Function::numeric', braceTeX => 1, TeX => '\sqrt'});
                        Context()->parens->add('(' => {close => ')', type => 'Point', formMatrix => 1, formInterval => ']', formList => 1, removable => 1, emptyOK => 1, function => 1});
                        Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                        $comparison=Compute("$bs");
                    </pg-code>
                </setup>
                <statement>
                    <p>Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least. For example, your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.</p>
                    <p><me><var name="$as" /></me></p>
                    <p><var name="$comparison" width="30" /></p>
                </statement>
            </webwork>
        </exercise>

        <exercisegroup cols="2">
        <exercise>
            <webwork >
                <setup>
                    <var name="$statement[0]"><static>-5\geq-6</static></var>
                    <var name="$TF[0]"><static>True</static></var>
                    <var name="$statement[1]"><static>-3\neq-3</static></var>
                    <var name="$TF[1]"><static>False</static></var>
                    <var name="$statement[2]"><static>-6\geq-6</static></var>
                    <var name="$TF[2]"><static>True</static></var>
                    <var name="$statement[3]"><static>-1=-7</static></var>
                    <var name="$TF[3]"><static>False</static></var>
                    <var name="$statement[4]"><static>-7\gt3</static></var>
                    <var name="$TF[4]"><static>False</static></var>
                    <var name="$statement[5]"><static>-8=-8</static></var>
                    <var name="$TF[5]"><static>True</static></var>
                    <pg-code>
                        #randomizes from 12, only presents 6
                        ($left[1],$left[3],$left[5],$left[7],$left[9],$left[11])=map{$_-10}(NchooseK(20,6));
                        ($right[1],$right[3],$right[5],$right[7],$right[9],$right[11])=($left[1],$left[3],$left[5],$left[7],$left[9],$left[11]);
                        ($left[0],$right[0])=map{$_-10}(NchooseK(20,2));
                        ($left[2],$right[2])=map{$_-10}(NchooseK(20,2));
                        ($left[4],$right[4])=map{$_-10}(NchooseK(20,2));
                        ($left[6],$right[6])=map{$_-10}(NchooseK(20,2));
                        ($left[8],$right[8])=map{$_-10}(NchooseK(20,2));
                        ($left[10],$right[10])=map{$_-10}(NchooseK(20,2));
                        @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                        @j=NchooseK(12,12);
                        @statement=map{$left[$j[$_]].$comp[$j[$_]].$right[$j[$_]]}(0..11);
                        $True=PopUp(["?","True","False"],"True");
                        $False=PopUp(["?","True","False"],"False");
                        for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                        for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                        for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                        for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                        for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                        for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                        for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
                        if($envir{problemSeed}==1){@statement=('-5\geq6','-3\neq-3','-6\geq-6','-1=-7','-7\gt3','-8=-8');@TF=($False,$False,$True,$False,$False,$True);};
                    </pg-code>
                </setup>
                <statement>
                    <p>Decide if each comparison is true or false.</p>
                    <sidebyside margins="0%">
                        <tabular>
                            <row>
                                <cell><m><var name="$statement[0]" /></m></cell>
                                <cell><var name="$TF[0]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[1]" /></m></cell>
                                <cell><var name="$TF[1]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[2]" /></m></cell>
                                <cell><var name="$TF[2]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[3]" /></m></cell>
                                <cell><var name="$TF[3]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[4]" /></m></cell>
                                <cell><var name="$TF[4]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[5]" /></m></cell>
                                <cell><var name="$TF[5]" form="popup"/></cell>
                            </row>
                        </tabular>
                    </sidebyside>
                </statement>
            </webwork>
        </exercise>
        <exercise>
            <webwork >
                <setup>
                    <var name="$statement[0]"><static>-5\neq2</static></var>
                    <var name="$TF[0]"><static>True</static></var>
                    <var name="$statement[1]"><static>8\lt8</static></var>
                    <var name="$TF[1]"><static>False</static></var>
                    <var name="$statement[2]"><static>-8\lt-6</static></var>
                    <var name="$TF[2]"><static>True</static></var>
                    <var name="$statement[3]"><static>7\leq7</static></var>
                    <var name="$TF[3]"><static>True</static></var>
                    <var name="$statement[4]"><static>5\gt5</static></var>
                    <var name="$TF[4]"><static>False</static></var>
                    <var name="$statement[5]"><static>5\leq3</static></var>
                    <var name="$TF[5]"><static>False</static></var>
                    <pg-code>
                        #randomizes from 12, only presents 6
                        ($left[1],$left[3],$left[5],$left[7],$left[9],$left[11])=map{$_-10}(NchooseK(20,6));
                        ($right[1],$right[3],$right[5],$right[7],$right[9],$right[11])=($left[1],$left[3],$left[5],$left[7],$left[9],$left[11]);
                        ($left[0],$right[0])=map{$_-10}(NchooseK(20,2));
                        ($left[2],$right[2])=map{$_-10}(NchooseK(20,2));
                        ($left[4],$right[4])=map{$_-10}(NchooseK(20,2));
                        ($left[6],$right[6])=map{$_-10}(NchooseK(20,2));
                        ($left[8],$right[8])=map{$_-10}(NchooseK(20,2));
                        ($left[10],$right[10])=map{$_-10}(NchooseK(20,2));
                        @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                        @j=NchooseK(12,12);
                        @statement=map{$left[$j[$_]].$comp[$j[$_]].$right[$j[$_]]}(0..11);
                        $True=PopUp(["?","True","False"],"True");
                        $False=PopUp(["?","True","False"],"False");
                        for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                        for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                        for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                        for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                        for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                        for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                        for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
                        if($envir{problemSeed}==1){@statement=('-5\neq2','8\lt8','-8\lt-6','7\leq7','5\gt5','5\leq3');@TF=($True,$False,$True,$True,$False,$False);};
                    </pg-code>
                </setup>
                <statement>
                    <p>Decide if each comparison is true or false.</p>
                    <sidebyside margins="0%">
                        <tabular>
                            <row>
                                <cell><m><var name="$statement[0]" /></m></cell>
                                <cell><var name="$TF[0]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[1]" /></m></cell>
                                <cell><var name="$TF[1]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[2]" /></m></cell>
                                <cell><var name="$TF[2]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[3]" /></m></cell>
                                <cell><var name="$TF[3]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[4]" /></m></cell>
                                <cell><var name="$TF[4]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[5]" /></m></cell>
                                <cell><var name="$TF[5]" form="popup"/></cell>
                            </row>
                        </tabular>
                    </sidebyside>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$statement[0]"><static>\frac{5}{7}\gt\frac{5}{7}</static></var>
                    <var name="$TF[0]"><static>False</static></var>
                    <var name="$statement[1]"><static>-\frac{35}{4}\geq-\frac{12}{9}</static></var>
                    <var name="$TF[1]"><static>False</static></var>
                    <var name="$statement[2]"><static>-\frac{13}{2}\neq\frac{33}{8}</static></var>
                    <var name="$TF[2]"><static>True</static></var>
                    <var name="$statement[3]"><static>-\frac{3}{6}\neq-\frac{3}{6}</static></var>
                    <var name="$TF[3]"><static>False</static></var>
                    <var name="$statement[4]"><static>\frac{7}{7}\leq\frac{21}{21}</static></var>
                    <var name="$TF[4]"><static>True</static></var>
                    <var name="$statement[5]"><static>\frac{11}{3}\lt\frac{42}{5}</static></var>
                    <var name="$TF[5]"><static>True</static></var>
                    <pg-code>
                        #randomizes from 12, only presents 6
                        ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                        Context("Fraction");
                        Context()->flags->set(reduceFractions=>0);
                        for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                            $ld[$i]=random(2,9,1);
                            $left[$i]=Fraction($ln[$i],$ld[$i]);
                            $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                        for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                            $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                            $rd[$i]=random(2,9,1);
                            $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                        @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                        @j=NchooseK(12,12);
                        @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                        $True=PopUp(["?","True","False"],"True");
                        $False=PopUp(["?","True","False"],"False");
                        for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                        for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                        for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                        for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                        for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                        for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                        for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
                        if($envir{problemSeed}==1){@statement=('\frac{5}{7}\gt\frac{5}{7}','-\frac{35}{4}\geq-\frac{12}{9}','-\frac{13}{2}\neq\frac{33}{8}','-\frac{3}{6}\neq-\frac{3}{6}','\frac{7}{7}\leq\frac{21}{21}','\frac{11}{3}\lt\frac{42}{5}');@TF=($False,$False,$True,$False,$True,$True);};
                    </pg-code>
                </setup>
                <statement>
                    <p>Decide if each comparison is true or false.</p>
                    <sidebyside margins="0%">
                        <tabular>
                            <row>
                                <cell><m><var name="$statement[0]" /></m></cell>
                                <cell><var name="$TF[0]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[1]" /></m></cell>
                                <cell><var name="$TF[1]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[2]" /></m></cell>
                                <cell><var name="$TF[2]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[3]" /></m></cell>
                                <cell><var name="$TF[3]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[4]" /></m></cell>
                                <cell><var name="$TF[4]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[5]" /></m></cell>
                                <cell><var name="$TF[5]" form="popup"/></cell>
                            </row>
                        </tabular>
                    </sidebyside>
                </statement>
            </webwork>
        </exercise>

        <exercise>
            <webwork >
                <setup>
                    <var name="$statement[0]"><static>\frac{6}{5}\gt\frac{5}{3}</static></var>
                    <var name="$TF[0]"><static>False</static></var>
                    <var name="$statement[1]"><static>\frac{80}{9}\leq-\frac{17}{4}</static></var>
                    <var name="$TF[1]"><static>False</static></var>
                    <var name="$statement[2]"><static>-\frac{8}{9}=-\frac{16}{18}</static></var>
                    <var name="$TF[2]"><static>True</static></var>
                    <var name="$statement[3]"><static>-\frac{6}{3}\geq-\frac{6}{3}</static></var>
                    <var name="$TF[3]"><static>True</static></var>
                    <var name="$statement[4]"><static>\frac{8}{3}\lt\frac{8}{3}</static></var>
                    <var name="$TF[4]"><static>False</static></var>
                    <var name="$statement[5]"><static>\frac{21}{5}=-\frac{29}{3}</static></var>
                    <var name="$TF[5]"><static>False</static></var>
                    <pg-code>
                        #randomizes from 12, only presents 6
                        ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                        Context("Fraction");
                        Context()->flags->set(reduceFractions=>0);
                        for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                            $ld[$i]=random(2,9,1);
                            $left[$i]=Fraction($ln[$i],$ld[$i]);
                            $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                        for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                            $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                            $rd[$i]=random(2,9,1);
                            $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                        @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                        @j=NchooseK(12,12);
                        @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                        $True=PopUp(["?","True","False"],"True");
                        $False=PopUp(["?","True","False"],"False");
                        for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                        for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                        for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                        for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                        for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                        for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                        for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
                        if($envir{problemSeed}==1){@statement=('\frac{6}{5}\gt\frac{5}{3}','\frac{80}{9}\leq-\frac{17}{4}','-\frac{8}{9}=-\frac{16}{18}','-\frac{6}{3}\geq-\frac{6}{3}','\frac{8}{3}\lt\frac{8}{3}','\frac{21}{5}=-\frac{29}{3}');@TF=($False,$False,$True,$True,$False,$False);};
                    </pg-code>
                </setup>
                <statement>
                    <p>Decide if each comparison is true or false.</p>
                    <sidebyside margins="0%">
                        <tabular>
                            <row>
                                <cell><m><var name="$statement[0]" /></m></cell>
                                <cell><var name="$TF[0]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[1]" /></m></cell>
                                <cell><var name="$TF[1]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[2]" /></m></cell>
                                <cell><var name="$TF[2]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[3]" /></m></cell>
                                <cell><var name="$TF[3]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[4]" /></m></cell>
                                <cell><var name="$TF[4]" form="popup"/></cell>
                            </row>
                            <row>
                                <cell><m><var name="$statement[5]" /></m></cell>
                                <cell><var name="$TF[5]" form="popup"/></cell>
                            </row>
                        </tabular>
                    </sidebyside>
                </statement>
            </webwork>
        </exercise>
        </exercisegroup>

        <exercisegroup cols="2">
        <exercise>
            <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers40.pg" />
        </exercise>
        <exercise>
            <webwork  source="Library/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers40.pg" />
        </exercise>
        </exercisegroup>
    </exercises>
</section>
