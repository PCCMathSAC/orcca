<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="section-substitution">
  <title>Substitution</title>
  <objectives>
    <title>PCC Course Content and Outcome Guide</title>
    <ul>
      <li>
        <xref ref="ccog-solve-system-of-linear-equations" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-model-with-systems" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-properly-define-variables-in-a-system" text="local">MTH 60 CCOG</xref>
      </li>
      <li>
        <xref ref="ccog-conclusions-complete-sentences-in-a-system" text="local">MTH 60 CCOG</xref>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      In <xref ref="section-solving-a-system-by-graphing"/>, we used graphing to solve a system of
      two linear equations. While graphing is insightful, it can be time-consuming. And what happens
      if the actual solution to the system does not have whole number coordinates<mdash/>will you be
      able to see exactly what are the coordinates of the crossing? And what if your hand-drawn
      graph has some small imperfection that makes it look like the lines are crossing at the wrong
      place?
    </p>
    <p>
      There are two main alternatives to graphing that can find the solution to a system of two
      linear equations. They use pencil-and-paper algebra instead of a picture. This section covers
      one of those alternative methods, and the next section covers the other.
    </p>

    <figure>
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-e7mzn96IqkqKBOOrcpG8Cw" />
    </figure>
  </introduction>

  <subsection>
    <title>Substitution</title>                                                                               <idx><h>Systems of linear equations</h><h>solved by substitution</h></idx>
                                                                                                              <idx><h>Substitution method</h></idx>
    <example xml:id="example-systems-of-equations-substitution-intro">                                        <idx><h>Systems of linear equations</h><h>applications</h></idx>
      <title>The Interview</title>
      <p>
        Once upon a time, the
        <url href="https://nyti.ms/2pupebT" visual="nyti.ms/2pupebT"><pubtitle>New York Times</pubtitle></url>
        published an article about the movie, <pubtitle>The Interview</pubtitle>. It included the
        following quote:
      </p>
      <blockquote>
        <p>
          <pubtitle>The Interview</pubtitle> generated roughly <m>\$15</m> million in online sales
          and rentals during its first four days of availability, Sony Pictures said on Sunday.
        </p>
        <p>
          Sony did not say how much of that total represented <m>\$6</m> digital rentals versus
          <m>\$15</m> sales. The studio said there were about two million transactions overall.
        </p>
      </blockquote>

      <p>
        Note the article is suggesting that we do not know how many rentals there were and how many
        sales there were. A few days later, Joey Devilla cleverly pointed out in
        <url href="http://www.joeydevilla.com/2014/12/31/the-new-york-times-unintentionally-provided-the-answer-to-their-question-is-algebra-necessary/" visual="www.joeydevilla.com/2014/12/31/">his blog</url>
        that there is enough information here to use algebra to figure out the number of sales and
        the number of rentals. We can write a system of equations and solve it to find the two
        quantities. (Since the numbers given in the article are only approximations, the solutions
        we find will also only be approximations.)
      </p>

      <p>
        First, we will define variables. There are two unknown quantities: how many sales there were
        and how many rentals there were. Let <m>r</m> be the number of rental transactions and let
        <m>s</m> be the number of sales transactions.
      </p>

      <p>
        If you are unsure how to write an equation from the background information, use the units to
        help you. The units of each term in an equation must match because we can only add like
        quantities. Both <m>r</m> and <m>s</m> are measured in <q>transactions</q>. The article says
        that the total number of transactions is two million. So our first equation will add
        the total number of rental and sales transactions and set that equal to two million.
        Our equation is:
        <me>
          (r\,\text{transactions})+(s\,\text{transactions})=2{,}000{,}000\,\text{transactions}
        </me>
        Without the units:
        <me>
          r+s=2{,}000{,}000
        </me>
      </p>

      <p>
        The price of each rental was <m>\$6</m>. That means the problem has given us a <em>rate</em>
        of <m>6\,\frac{\text{dollars}}{\text{transaction}}</m> to work with. The rate unit suggests
        this should be multiplied by something measured in transactions. It makes sense to multiply
        by <m>r</m>, and that would give us the total number of <em>dollars</em> generated from
        rentals. This is <m>6r</m>. Similarly, the price of each <em>sale</em> was <m>\$15</m>,
        so the revenue from sales was <m>15s</m>. The total revenue was <m>\$15</m> million,
        which we can represent with this equation:
        <me>
          \left(6\,\tfrac{\text{dollars}}{\text{transaction}}\right)(r\,\text{transactions})+\left(15\,\tfrac{\text{dollars}}{\text{transaction}}\right)(s\,\text{transactions})=\$15{,}000{,}000
        </me>
        Without the units:
        <me>
          6r+15s=15{,}000{,}000
        </me>
      </p>

      <p>
        Here is our system of equations, with the commas removed:
        <me>
          \left\{
          \begin{alignedat}{4}
          r\amp+{}\amp s\amp={}\amp2\,000\,000 \\
          6r\amp+{}\amp 15s\amp={}\amp15\,000\,000
          \end{alignedat}
          \right.
        </me>
        To solve the system, we will use a method called <term>substitution</term>. The idea is to
        use one equation to isolate <m>r</m>. Then <em>substitute</em> this for the <q><m>r</m></q>
        that's in the <em>other</em> equation. This leaves you with <em>one</em> equation where the
        only variable is <m>s</m>. And we can handle that directly.
      </p>

      <p>
        The first equation from the system is an easy one to isolate <m>r</m>:
        <md>
          <mrow>r+s \amp=2\,000\,000\amp\text{(the system's first equation)}</mrow>
          <mrow>r \amp=2\,000\,000-s</mrow>
        </md>
        This tells us that the expression <m>2\,000\,000-s</m> is equal to <m>r</m>, so we can
        <em>substitute</em> that in place of <m>r</m> in the second equation:
        <md>
          <mrow>6r+15s \amp=15\,000\,000\amp\text{(the system's second equation)}</mrow>
          <mrow>6(\substitute{2\,000\,000-s})+15s \amp=15\,000\,000</mrow>
          <intertext>Now we have an equation with only one variable, <m>s</m>.</intertext>
          <mrow>6(2\,000\,000-s)+15s \amp=15\,000\,000</mrow>
          <mrow>12\,000\,000-6s+15s \amp=15\,000\,000</mrow>
          <mrow>12\,000\,000+9s \amp= 15\,000\,000</mrow>
          <mrow>9s \amp= 3\,000\,000</mrow>
          <mrow>\divideunder{9s}{9} \amp= \divideunder{3\,000\,000}{9}</mrow>
          <mrow>s \amp= 333\,333.\overline{3}</mrow>
        </md>
      </p>

      <p>
        At this point, we know that <m>s=333\,333.\overline{3}</m>. This tells us that out of the
        <m>2</m> million transactions, roughly <m>333{,}333</m> were from online sales. Recall that
        we isolated <m>r</m> previously and found <m>r=2\,000\,000-s</m>.
        <md>
          <mrow>r \amp=2\,000\,000-s</mrow>
          <mrow>r \amp=2\,000\,000-\substitute{333\,333.\overline{3}}</mrow>
          <mrow>r \amp=1\,666\,666.\overline{6}</mrow>
        </md>
        In summary, there were roughly <m>333{,}333</m> ssales and roughly <m>1{,}666{,}667</m> rentals.
      </p>
    </example>

    <remark>
      <p>
        In <xref ref="example-systems-of-equations-substitution-intro"/>, we rounded the solution
        values because only whole numbers make sense in the context of the problem. It was
        especially acceptable to round because the original numbers we worked with were already
        rounded. In fact, it would be OK to round even more to something like <m>s=330{,}000</m>
        and <m>r=1{,}670{,}000</m> as long as we communicate clearly that we rounded.
      </p>
      <p>
        In other exercises where there is no context, it is not OK to round. Solutions should be
        communicated with their exact values.
      </p>
    </remark>

    <example>
      <statement>
        <p>
          Solve the system of equations using substitution:
          <md>
            <mrow>\left\{
            \begin{alignedat}{4}
            x\amp+{}\amp 2y \amp={}\amp 5 \\
            3x\amp-{}\amp 2y \amp={}\amp 8
            \end{alignedat}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          To use substitution, we need to isolate <em>one</em> of the variables in <em>one</em> of
          our equations. Looking over both equations, it will be easiest to isolate <m>x</m> in the
          first equation:
          <md>
            <mrow>x+2y\amp=5</mrow>
            <mrow>x\amp= 5-2y</mrow>
          </md>
        </p>
        <p>
          Next, we substitute <m>5-2y</m> in for <m>x</m> in the second equation, giving us a linear
          equation in only one variable <m>y</m>. And this is an equation that we may solve using
          skills from <xref ref="section-solving-multistep-linear-equations.ptx"/>.
          <md>
            <mrow>3x-2y\amp=8</mrow>
            <mrow>3(\substitute{5-2y})-2y\amp=8</mrow>
            <mrow>15-6y-2y\amp=8</mrow>
            <mrow>15-8y\amp=8</mrow>
            <mrow>-8y\amp=-7</mrow>
            <mrow>y\amp=\frac{7}{8}</mrow>
          </md>
        </p>

        <p>
          Now that we have the value for <m>y</m>, we need to find the value for <m>x</m>.
          We already isolated <m>x</m>, and it's easiest to just use that equation.
          <md>
            <mrow>x\amp= 5-2y</mrow>
            <mrow>x\amp= 5-2\left(\substitute{\frac{7}{8}}\right)</mrow>
            <mrow>x\amp= 5-\frac{7}{4}</mrow>
            <mrow>x\amp=\frac{20}{4}-\frac{7}{4}=\frac{13}{4}</mrow>
          </md>
        </p>

        <p>
          At this point we think the solution is the point
          <m>\left(\frac{13}{4},\frac{7}{8}\right)</m> or in other words: <m>x=\frac{13}{4}</m>,
          <m>y=\frac{7}{8}</m>. It's only human to make mistakes though, so we should check that the
          solution actually works. To check it, try using <m>x=\frac{13}{4}</m>,
          <m>y=\frac{7}{8}</m> in both of the original equations.
          <md>
            <mrow>x+2y\amp=5\amp3x-2y\amp=8</mrow>
            <mrow>\substitute{\frac{13}{4}}+2\left(\substitute{\frac{7}{8}}\right)\amp\wonder{=}5\amp3\left(\substitute{\frac{13}{4}}\right)-2\left(\substitute{\frac{7}{8}}\right)\amp\wonder{=}8</mrow>
            <mrow>\frac{13}{4}+\frac{7}{4}\amp\wonder{=}5\amp\frac{39}{4}-\frac{7}{4}\amp\wonder{=}8</mrow>
            <mrow>\frac{20}{4}\amp\confirm{=}5\amp\frac{32}{4}\amp\confirm{=}8</mrow>
          </md>
        </p>

        <p>
          We conclude then that this system of equations is true when <m>x=\frac{13}{4}</m> and
          <m>y=\frac{7}{8}</m>. The solution is the point
          <m>\left(\frac{13}{4},\frac{7}{8}\right)</m> and we write the solution set as
          <m>\left\{\left(\frac{13}{4},\frac{7}{8}\right)\right\}</m>.
        </p>
      </solution>
    </example>

    <exercise label="solve-system-using-substitution">
      <webwork xml:id="webwork-solve-system-using-substitution">
        <pg-macros>
          <macro-file>parserLinearRelation.pl</macro-file>
        </pg-macros>
        <pg-code>
          Context("Fraction")->variables->are(x=>'Real',y=>'Real');
          parser::Assignment->Allow;
          @isolations = (
            Formula("x = 3y + 1"),
            Formula("y = (x - 1)/3"),
            Formula("x = (-y - 3)/2"),
            Formula("y = -2x - 3")
          );
          $isolate = OneOf(@isolations);
          $x = Fraction(-8,7);
          $y = Fraction(-5,7);
          $xis = Formula("x = $x");
          $yis = Formula("y = $y");
          $onesolved = OneOf($yis, $xis);
          $othersolved = OneOf($xis, $yis);
          Context("LinearRelation")->variables->are(x=>'Real',y=>'Real');;
          @substitutions = (
            Formula("2(3y+1)+y=-3"),
            Formula("2x+(x - 1)/3=-3"),
            Formula("(-y - 3)/2-3y=1"),
            Formula("x-3(-2x - 3)=1")
          );
          $substituted = OneOf(@substitutions);
          $m = MultiAnswer($isolate, $substituted, $onesolved, $othersolved)->with(
            singleResult => 0,
            allowBlankAnswers => 1,
            checker => sub {
                my ($correct, $student, $self) = @_;
                my ($correct_isolate, $correct_substituted, $correct_onesolved, $correct_othersolved) = @$correct;
                my ($student_isolate, $student_substituted, $student_onesolved, $student_othersolved) = @$student;
                my $isolate_result = $correct_isolate->cmp->evaluate($student_isolate->string);
                $self->setMessage(1,$isolate_result->{message}) if $isolate_result->{message};
                if (!$isolate_result->{score}) {
                  $self->setMessage(2,"Cannot assess this until there is a correct answer to the first part");
                  $self->setMessage(3,"Cannot assess this until there is a correct answer to the first part");
                  $self->setMessage(4,"Cannot assess this until there is a correct answer to the first part");
                  return [0,0,0,0];
                }
                my $index;
                for (0..3) {
                  $index = $_ if ($student_isolate == $isolations[$_]);
                }
                my $substituted_result = $substitutions[$index]->cmp->evaluate($student_substituted->string);
                $self->setMessage(2,$substituted_result->{message}) if $substituted_result->{message};
                if (!$substituted_result->{score}) {
                  $self->setMessage(3,"Cannot assess this until there is a correct answer to the second part");
                  $self->setMessage(4,"Cannot assess this until there is a correct answer to the second part");
                  return [1,0,0,0];
                }
                my $onesolved_result = ($index % 2 == 0) ? $yis->cmp->evaluate($student_onesolved->string) : $xis->cmp->evaluate($student_onesolved->string);
                $self->setMessage(3,$onesolved_result->{message}) if $onesolved_result->{message};
                if (!$onesolved_result->{score}) {
                  $self->setMessage(4,"Cannot assess this until there is a correct answer to the third part");
                  return [1,1,0,0];
                }
                my $othersolved_result = ($index % 2 == 0) ? $xis->cmp->evaluate($student_othersolved->string) : $yis->cmp->evaluate($student_othersolved->string);
                $self->setMessage(4,$othersolved_result->{message}) if $othersolved_result->{message};
                if (!$othersolved_result->{score}) {
                  return [1,1,1,0];
                }
                return [1,1,1,1];
            }
          );
        </pg-code>
        <introduction>
          <p>
            Use substitution to solve the system.
            <md>
              <mrow>\left\{
              \begin{alignedat}{4}
              x\amp-{}\amp 3y \amp={}\amp 1 \\
              2x\amp+{}\amp y \amp={}\amp -3
              \end{alignedat}
              \right.</mrow>
            </md>
          </p>
        </introduction>
        <task>
          <statement>
            <p>
              Isolate one of the variables in one of the equations.
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              We choose to isolate <m>x</m> in the first equation. All we need to do is add <m>3y</m>
              to each side, and then <m>x=3y+1</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Substitute the isolated expression into the other equation.
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              Making the substitution: <m>2\left(3y+1\right)+y=-3</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Solve for the one variable that remains.
            </p>
            <instruction>
              Write the solution in <c>variable = number</c> format.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow>2\left(3y+1\right)+y \amp= -3</mrow>
                <mrow>6y+2+y\amp=-3</mrow>
                <mrow>7y+2\amp=-3</mrow>
                <mrow>7y\amp=-5</mrow>
                <mrow>y\amp=-\frac{5}{7}</mrow>
              </md>
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Solve for the other variable.
            </p>
            <instruction>
              Write the solution in <c>variable = number</c> format.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>x=3y+1
            <p>
              <md>
                <mrow>x \amp= 3y+1</mrow>
                <mrow>x \amp= 3\left(-\frac{5}{7}\right)+1</mrow>
                <mrow>x\amp=-\frac{15}{7}+\frac{7}{7}</mrow>
                <mrow>x\amp=-\frac{8}{7}</mrow>
              </md>
            </p>
          </solution>
        </task>
      </webwork>
    </exercise>

    <p>
      Sometimes it makes more sense to start the process using the second equation instead of the
      first. And sometimes it makes more sense to isolate the second variable instead of the first.
    </p>

    <example>
      <statement>
        <p>
          Solve this system of equations using substitution:
          <md>
            <mrow>\left\{
            \begin{alignedat}{4}
            3x\amp-{}\amp 7y \amp={}\amp 5 \\
            -5x\amp+{}\amp 2y \amp={}\amp 11
            \end{alignedat}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          We need to isolate <em>one</em> of the variables in <em>one</em> of the equations.
          Looking over both equations, it will be easiest to isolate <m>y</m> in the second equation
          because that is where the coefficient is smallest. We are going to have to divide by some
          coefficient; it might as well be the smallest one to keep the fraction arithmetic as
          simple as we can.
          <md>
            <mrow>-5x+2y\amp=11</mrow>
            <mrow>2y\amp=11+5x</mrow>
            <mrow>\divideunder{2y}{2}\amp=\divideunder{11+5x}{2}</mrow>
            <mrow>y\amp=\frac{11}{2}+\frac{5}{2}x</mrow>
          </md>
          Note that there are fractions once we've isolated <m>y</m>. We should take care with the
          steps that follow to make sure that the fraction arithmetic is correct.
        </p>

        <p>
          Substitute <m>\frac{11}{2}+\frac{5}{2}x</m> in for <m>y</m> in the first equation, and that
          leads to having a single linear equation with only one variable. We can solve this as we
          did in <xref ref="section-equations-and-inequalities-with-fractions"/>. Note the
          step in the middle where we clear denominators.
          <md>
            <mrow>3x-7y\amp=5</mrow>
            <mrow>3x-7\left(\frac{11}{2}+\frac{5}{2}x\right)\amp=5</mrow>
            <mrow>3x-\frac{77}{2}-\frac{35}{2}x\amp=5</mrow>
            <mrow>\multiplyleft{2}\left(3x-\frac{77}{2}-\frac{35}{2}x\right)\amp=\multiplyleft{2}(5)</mrow>
            <mrow>6x-77-35x\amp=10</mrow>
            <mrow>-29x-77\amp=10</mrow>
            <mrow>-29x\amp=87</mrow>
            <mrow>x\amp=\divideunder{87}{-29}=-3</mrow>
          </md>
        </p>

        <p>
          Now that we have the value for <m>x</m>, we need to find the value for <m>y</m>.
          We already isolated <m>y</m>, and it's easiest to just use that equation.
          <md>
            <mrow>y\amp=\frac{11}{2}+\frac{5}{2}x</mrow>
            <mrow>y\amp=\frac{11}{2}+\frac{5}{2}(\substitute{-3})</mrow>
            <mrow>y\amp=\frac{11}{2}-\frac{15}{2}</mrow>
            <mrow>y\amp=-\frac{4}{2}=-2</mrow>
          </md>
        </p>

        <p>
          To check the solution we think we've found, try using <m>x=-3</m>, <m>y=-2</m> in both of
          the original equations.
          <md>
            <mrow>3x-7y \amp=5  \amp  -5x+2y \amp= 11</mrow>
            <mrow>3(\substitute{-3})-7(\substitute{-2}) \amp\wonder{=}5  \amp  -5(\substitute{-3})+2(\substitute{-2}) \amp\wonder{=} 11</mrow>
            <mrow>-9+14\amp\confirm{=}5\amp 15-4\amp\confirm{=}11</mrow>
          </md>
        </p>

        <p>
          We conclude then that this system of equations is true when <m>x=-3</m> and <m>y=-2</m>.
          The solution is the point <m>(-3,-2)</m> and we write the solution set as <m>\{(-3,-2)\}</m>.
        </p>
      </solution>
    </example>

    <p>
      A system may start out with fractions among the coefficients. Just as we learned in
      <xref ref="section-equations-and-inequalities-with-fractions"/>, the algebra can go
      more smoothly if we clear the denominators before doing more work.
    </p>

    <example>
      <statement>
        <p>
          Solve the system of equations using the substitution method.
          <md>
            <mrow>\left\{
            \begin{aligned}
            \frac{x}{3} - \frac{1}{2}y \amp= \frac{5}{6} \\
            \frac{1}{4}x \amp = \frac{y}{2} + 1
            \end{aligned}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          When a system of equations has fraction coefficients, it may be helpful to <q>clear the
          denomintors</q>. With each equation, multiply each side by the least common multiple of
          that equation's denominators.
        </p>

        <sidebyside widths="47% 47%" margins="0%">
          <p>
            In the first equation,
            the least common multiple of the denominators is <m>6</m>, so:
            <md>
              <mrow>\frac{x}{3}-\frac{1}{2}y\amp=\frac{5}{6}</mrow>
              <mrow>\multiplyleft{6}\left(\frac{x}{3}-\frac{1}{2}y\right)\amp=\multiplyleft{6}\frac{5}{6}</mrow>
              <mrow>2x-3y\amp=5</mrow>
            </md>
          </p>

          <p>
            In the second equation,
            the least common multiple of the denominators is <m>4</m>, so:
            <md>
              <mrow>\frac{1}{4}x\amp=\frac{y}{2}+1</mrow>
              <mrow>\multiplyleft{4}\frac{1}{4}x\amp=\multiplyleft{4}\left(\frac{y}{2}+1\right)</mrow>
              <mrow>x\amp=2y+4</mrow>
            </md>
          </p>
        </sidebyside>

        <p>
          Now we have a system that is equivalent to the original system of equations, but there are
          no fraction coefficients:
          <md>
            <mrow>\left\{
            \begin{aligned}
            2x-3y\amp=5 \\
            x\amp=2y+4
            \end{aligned}
            \right.</mrow>
          </md>
          The second equation has already isolateed <m>x</m>, so we will substitute <m>2y+4</m>
          in for <m>x</m> in the first equation.
          <md>
            <mrow>2x-3y\amp=5</mrow>
            <mrow>2(\substitute{2y+4})-3y\amp=5</mrow>
            <mrow>4y+8-3y\amp=5</mrow>
            <mrow>y+8\amp=5</mrow>
            <mrow>y\amp=-3</mrow>
          </md>
          And we have solved for <m>y</m>. To find <m>x</m>, we know <m>x=2y+4</m>, so we have:
          <md>
            <mrow>x\amp=2y+4</mrow>
            <mrow>x\amp=2(\substitute{-3})+4</mrow>
            <mrow>x\amp=-6+4=-2</mrow>
          </md>
          The solution is <m>(-2,-3)</m>. (This should be checked in the original two equations
          though.)
        </p>
      </solution>
    </example>

    <p>
      Real world applications can lead to a system where both equations are either in point-slope
      form or slope-intercept form. This is helpful, since it means one variable has already been
      isolated.
    </p>

    <example>
      <statement>
        <p>
          Solve the system of equations using the substitution method.
          <md>
            <mrow>\left\{
            \begin{aligned}
            y \amp= \frac{5}{6}x+3 \\
            y \amp = \frac23x + 1
            \end{aligned}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          In the first equation, <m>y</m> is already isolated. So we can substitute
          <m>\frac{5}{6}x+3</m> in for <m>y</m> in the second equation: <m>\frac{5}{6}x+3 = \frac23x + 1</m>.
        </p>
        <p>
          Some people prefer to think of this as setting the two right sides equal to each other.
          That works too: if <m>\frac{5}{6}x+3</m> is equal to <m>y</m>, and <m>\frac23x + 1</m> is
          also equal to <m>y</m>, then these expressions are equal to each other. Either way:
          <md>
            <mrow>\frac{5}{6}x + 3\amp=\frac23x + 1</mrow>
            <mrow>\multiplyleft{6}\left(\frac{5}{6}x + 3\right)\amp=\multiplyleft{6}\left(\frac23x + 1\right)</mrow>
            <mrow>5x + 18\amp=4x + 6</mrow>
            <mrow>x + 18\amp=6</mrow>
            <mrow>x\amp=-12</mrow>
          </md>
          And then:
          <md>
            <mrow>y \amp= \frac{5}{6}(\substitute{-12})+3</mrow>
            <mrow>y \amp= -10+3=-7</mrow>
          </md>
          And the solution is <m>(-12,-7)</m>.
        </p>
      </solution>
    </example>

    <p>
      For summary reference, here is the general procedure.
    </p>

    <algorithm xml:id="algorithm-solving-systems-of-equations-by-substitution">
      <title>Solving Systems of Equations by Substitution</title>                                             <idx><h>Systems of linear equations</h><h>solved by substitution</h></idx>
                                                                                                              <idx><h>Substitution method</h></idx>
      <p>
        To solve a system of two linear equations in two variables by substitution,
        <ol>
          <li>
            <p>
              If helpful, clear denominators from each equation using the least common multiple of
              each equation's denominators.
            </p>
          </li>
          <li>
            <p>
              Isolate one variable in one of the equations.
            </p>
          </li>
          <li>
            <p>
              Substitute that expression into the <em>other</em> equation. There should now only be
              one variable in that equation.
            </p>
          </li>
          <li>
            <p>
              Solve that equation for the one remaining variable.
            </p>
          </li>
          <li>
            <p>
              Substitute that value into the earlier result where the first variable was isolated,
              and solve for that variable.
            </p>
          </li>
          <li>
            <p>
              Verify your solution using the original two equations.
            </p>
          </li>
        </ol>
      </p>
    </algorithm>
  </subsection>

  <subsection>
    <title>Applications</title>                                                                               <idx><h>Systems of linear equations</h><h>applications</h></idx>

    <example xml:id="example-solving-system-of-equations-interest-application">
      <title>Two Different Interest Rates</title>
      <statement>
        <p>
          Notah made some large purchases with his two credit cards one month and took on a total of
          <m>\$8400</m> in debt from the two cards. He didn't make any payments the first month,
          so the two credit card debts each started accruing interest. That month, his Visa card
          charged <m>2\%</m> interest and his Mastercard charged <m>2.5\%</m> interest. Because of
          this, Notah's total debt grew by <m>\$178</m>. How much money did Notah charge to each
          card?
        </p>
      </statement>
      <solution>
        <p>
          We start by clearly defining two variables for the two unknowns. Let <m>V</m> be the
          amount charged to the Visa card (in dollars) and let <m>M</m> be the amount charged to the
          Mastercard (in dollars).
        </p>
        <p>
          To set up the equations, notice that we are given two different total dollar amounts. One
          is the total debt Notah initially took on, <m>\$8400</m>. So we have:
          <me>
            (V\,\text{dollars})+(M\,\text{dollars})=\$8400
          </me>
          Or without units:
          <me>
            V+M=8400
          </me>
          The other total we were given is the total amount of interest, <m>\$178</m>. The Visa had
          <m>V</m> dollars charged to it and accrues <m>2\%</m> interest. So <m>0.02V</m> is the
          dollar amount of interest that comes from using the Visa card. Similarly, <m>0.025M</m> is
          the dollar amount of interest from using the Mastercard. Together:
          <me>
            0.02(V\,\text{dollars})+0.025(M\,\text{dollars})=\$178
          </me>
          Or without units:
          <me>
            0.02V+0.025M=178
          </me>
          As a system, we write:
          <me>
            \left\{
            \begin{alignedat}{3}
            v\amp+{}\amp m\amp={}8400 \\
            0.02v\amp+{}\amp 0.025m\amp{}=178
            \end{alignedat}
            \right.
          </me>
        </p>

        <p>
          To solve this system by substitution, notice that it will be easier to isolate one of the
          variables in the first equation. We'll isolate <m>V</m>:
          <md>
            <mrow>V+M\amp=8400</mrow>
            <mrow>V\amp=8400-M</mrow>
          </md>
          Now we substitute <m>8400-M</m> in for <m>V</m> in the second equation:
          <md>
            <mrow>0.02V+0.025M\amp=178</mrow>
            <mrow>0.02(\substitute{8400-M})+0.025M\amp=178</mrow>
            <mrow>168-0.02M+0.025M\amp=178</mrow>
            <mrow>168+0.005M\amp=178</mrow>
            <mrow>0.005M\amp=10</mrow>
            <mrow>\divideunder{0.005M}{0.005}\amp=\divideunder{10}{0.005}</mrow>
            <mrow>M\amp=2000</mrow>
          </md>
          And then we can determine the value of <m>V</m> by using the earlier equation where we
          isolated <m>V</m>:
          <md>
            <mrow>V\amp=8400-M</mrow>
            <mrow>V\amp=8400-\substitute{2000}</mrow>
            <mrow>V\amp=6400</mrow>
          </md>
        </p>

        <p>
          In summary, Notah charged <m>\$6400</m> to the Visa and <m>\$2000</m> to the Mastercard.
          We should check that these numbers work as solutions to our original system <em>and</em>
          that they make sense in context. (For instance, if one of these numbers were negative,
          or was something small like <m>\$0.50</m>, they wouldn't make sense as credit card debt.)
        </p>
      </solution>
    </example>

    <p>
      The next two examples are called <term>mixture problems</term>, because they involve mixing
      two quantities together to form a combination and we want to find out how much of each
      quantity to mix.
    </p>

    <example xml:id="example-solving-systems-of-equations-chemistry-solution-application">
      <title>Mixing Solutions with Two Different Concentrations</title>                                       <idx><h>Mixture problems</h></idx>
      <statement>
        <p>
          LaVonda is a meticulous bartender and she needs to serve <m>600</m> milliliters of Rob Roy,
          an alcoholic cocktail that is <m>34\%</m> alcohol by volume. The main ingredients are
          scotch that is <m>42\%</m> alcohol and vermouth that is <m>18\%</m> alcohol. How many
          milliliters of each ingredient should she mix together to make the concentration she needs?
        </p>
      </statement>
      <solution>
        <p>
          The two unknowns are the quantities of each ingredient. Let <m>S</m> be the amount of
          scotch (in <quantity><unit prefix="milli" base="liter"/></quantity>) and let <m>V</m> be
          the amount of vermouth (in <quantity><unit prefix="milli" base="liter"/></quantity>).
        </p>

        <p>
          One quantity given to us in the problem is
          <quantity><mag>600</mag><unit prefix="milli" base="liter"/></quantity>. Since this is the
          total volume of the mixed drink, we must have:
          <me>
            (S\,\text{mL})+(V\,\text{mL})=600\,\text{mL}
          </me>
          Or without units:
          <me>
            S+V=600
          </me>
        </p>

        <p>
          To build the second equation, we have to think about the alcohol concentrations for the
          pure scotch, pure vermouth, and the mixed Rob Roy. It can be tricky to think about
          percentages like these correctly. One strategy is to focus on the <em>amount</em> of
          <em>alcohol</em> (in <quantity><unit prefix="milli" base="liter"/></quantity>).
          If we have <m>S</m> milliliters of scotch that is <m>42\%</m> alcohol, then <m>0.42S</m>
          is the actual <em>amount</em> of alcohol (in
          <quantity><unit prefix="milli" base="liter"/></quantity>) in that scotch. Similarly,
          <m>0.18V</m> is the amount of alcohol in the vermouth. And the final cocktail is
          <quantity><mag>600</mag><unit prefix="milli" base="liter"/></quantity> of liquid that is
          <m>34\%</m> alcohol. So it has <m>0.34(600)=204</m> milliliters of alcohol. This is
          telling us:
          <me>
            0.42(S\,\text{mL})+0.18(V\,\text{mL})=204\,\text{mL}
          </me>
          Or without units:
          <me>
            0.42S+0.18V=204
          </me>
        </p>

        <p>
          So our system is:
          <me>
            \left\{
            \begin{alignedat}{3}
            S\amp+{}\amp V\amp=600 \\
            0.42S\amp+{}\amp0.18V\amp=204
            \end{alignedat}
            \right.
          </me>
        </p>

        <p>
          To solve this system, we'll isolate <m>S</m> in the first equation:
          <md>
            <mrow>S+V\amp=600</mrow>
            <mrow>S\amp=600-V</mrow>
          </md>
          And then substitute <m>600-V</m> in for <m>S</m> in the second equation with :
          <md>
            <mrow>0.42S+0.18v\amp=204</mrow>
            <mrow>0.42(\substitute{600-V})+0.18V\amp=204</mrow>
            <mrow>252-0.42V+0.18V\amp=204</mrow>
            <mrow>252-0.24V\amp=204</mrow>
            <mrow>-0.24V\amp=-48</mrow>
            <mrow>\divideunder{-0.24V}{-0.24}\amp=\divideunder{-48}{-0.24}</mrow>
            <mrow>V\amp=200</mrow>
          </md>
          Now we determine <m>S</m> using the equation where we had isolated <m>S</m>:
          <md>
            <mrow>S\amp=600-V</mrow>
            <mrow>S\amp=600-\substitute{200}</mrow>
            <mrow>S\amp=400</mrow>
          </md>
        </p>

        <p>
          In summary, LaVonda needs to combine
          <quantity><mag>400</mag><unit prefix="milli" base="liter"/></quantity> of scotch with
          <quantity><mag>200</mag><unit prefix="milli" base="liter"/></quantity> of vermouth to
          create <quantity><mag>600</mag><unit prefix="milli" base="liter"/></quantity> of Rob Roy.
        </p>
      </solution>
    </example>

    <p>
      Let's take a moment to consider <term>estimation</term> to ask whether the solution to
      <xref ref="example-solving-systems-of-equations-chemistry-solution-application"/> is
      reasonable. LaVonda will mix scotch (<m>42\%</m> concentration) with vermouth (<m>18\%</m>
      concentration) and wants to end with a <m>34\%</m> concentration. Is <m>34</m> closer to
      <m>42</m> or <m>18</m>? It's closer to <m>42</m> so we should expect there to be more scotch
      than vermouth. This agrees with the solution we found.
    </p>

    <exercise label="solving-system-of-equations-mixing-coffee">
      <title>Mixing a Coffee Blend</title>
      <webwork xml:id="webwork-solving-system-of-equations-mixing-coffee">
        <pg-macros>
          <macro-file>parserLinearRelation.pl</macro-file>
        </pg-macros>
        <pg-code>
          Context("LinearRelation")->variables->are(C=>'Real',H=>'Real');
          @eq=(LinearRelation("C+H=30"),LinearRelation("9C + 14H = 375"));
          $m=MultiAnswer(@eq)->with(singleResult=>0,allowBlankAnswers=>1,
          checker=>sub{
          my($c,$s,$self)=@_;
          my @s=@{$s};
          my @c=@{$c};
          if (($c[0]==$s[0]&amp;&amp;$c[1]==$s[1])||($c[0]==$s[1]&amp;&amp;$c[1]==$s[0])){return [1,1]}
          elsif ($c[0]==$s[0]||$c[1]==$s[0]){return [1,0]}
          elsif ($c[0]==$s[1]||$c[1]==$s[1]){return [0,1]}
          else {return [0,0]}
          });
          Context("Fraction")->variables->are(C=>'Real',H=>'Real');
          parser::Assignment->Allow;
          @i=(
          Formula("C=30-H"),
          Formula("H=30-C"),
          Formula("C=(375-14H)/9"),
          Formula("H=(375-9C)/14")
          );
          $i=OneOf(@i);
          $C=Real(9);
          $H=Real(21);
          $Clb=NumberWithUnits("$C lb");
          $Hlb=NumberWithUnits("$H lb");
          $Cis=Formula("C=$C");
          $His=Formula("H=$H");
          $one=OneOf($His,$Cis);
          $two=OneOf($Cis,$His);
          Context("LinearRelation")->variables->are(C=>'Real',H=>'Real');
          @sb=(
          Formula("9(30-H)+14H=375"),
          Formula("9C+14(30-C)=375"),
          Formula("(375-14H)/9+H=30"),
          Formula("C+(375-9C)/14=30")
          );
          $sb=OneOf(@sb);
          $m2=MultiAnswer($i,$sb)->with(
          singleResult=>0,
          allowBlankAnswers=>1,
          checker=>sub{
          my($c,$s,$self)=@_;
          my($c_i,$c_sb)=@$c;
          my($s_i,$s_sb)=@$s;
          my $i_r=$c_i->cmp->evaluate($s_i->string);
          $self->setMessage(1,$i_r->{message}) if $i_r->{message};
          if (!$i_r->{score}) {
            $self->setMessage(2,"Cannot assess this until there is a correct answer to the first part");
            return [0,0];
          }
          my $index;
          for (0..3) {
            $index = $_ if ($s_i == $i[$_]);
          }
          my $sb_r = $sb[$index]->cmp->evaluate($s_sb->string);
          $self->setMessage(2,$sb_r->{message}) if $sb_r->{message};
          if (!$sb_r->{score}) {
            return [1,0];
          }
          return [1,1];
          }
          );
        </pg-code>
        <introduction>
          <p>
            Desi owns a coffee shop and they want to mix two different types of coffee beans to make
            a blend that sells for <m>\$12.50</m> per pound. They have some coffee beans from
            Columbia that sell for <m>\$9.00</m> per pound and some coffee beans from Honduras that
            sell for <m>\$14.00</m> per pound. How many pounds of each should they mix to make
            <m>30</m> pounds of the blend?
          </p>
        </introduction>
        <task>
          <statement>
            <p>
              Write two equations that form a system for this scenario.
            </p>
            <instruction>
              Use <c>C</c> and <c>H</c> for the variables representing how many pounds of each type
              of coffee bean they should use.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              We have <m>C</m> pounds of Columbian coffee and <m>H</m> pounds of Honduran coffee.
              Since there must be <m>30</m> pounds total, one equation is <m>C+H=30</m>.
            </p>
            <p>
              The total cost of the Colombian coffee in the blend will be <m>9C</m>, and the total
              cost of the Honduran coffee in the blend will be <m>14H</m>. All together, the blend
              has a total cost of <m>12.50\cdot30=375</m> dollars. So another equation is
              <m>9C+14H=375</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Isolate one of the variables in one of the equations.
            </p>
            <p>
              <var name="$m2" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              We choose to isolate <m>C</m> in the first equation. All we need to do subtract
              <m>H</m> from each side, and then <m>C = 30 - H</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Substitute the isolated expression into the other equation.
            </p>
            <p>
              <var name="$m2" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              Making the substitution: <m>9(30 - H) + 14H = 375</m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <p>
              Solve this equation in one variable and then solve for the other variable using the
              isolation from a previous step. Finally, report how much of each type of coffee Desi
              should use.
            </p>
            <instruction>
              How much Colombian coffee should Desi use?
            </instruction>
            <p>
              <var name="$Clb" width="16"/>
            </p>
            <instruction>
              How much Honduran coffee should Desi use?
            </instruction>
            <p>
              <var name="$Hlb" width="16"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow>9(30 - H) + 14H \amp= 375</mrow>
                <mrow>270 - 9H + 14H \amp= 375</mrow>
                <mrow>270 + 5H \amp= 375</mrow>
                <mrow>5H\amp=105</mrow>
                <mrow>H\amp=21</mrow>
              </md>
            </p>
            <p>
              <md>
                <mrow>C \amp= 30 - H</mrow>
                <mrow>C \amp= 30 - 21 = 9</mrow>
              </md>
            </p>
            <p>
              In summary, Desi needs to mix <m>21</m> pounds of the Honduran coffee beans with
              <m>9</m> pounds of the Columbian coffee beans to create this blend.
            </p>
          </solution>
        </task>
      </webwork>
    </exercise>
  </subsection>

  <subsection xml:id="subsection-special-systems-of-equations-substitution">
    <title>Solving Special Systems of Equations with Substitution</title>
    <p>
      Remember the two special cases for a system of two linear equtions? We studied them in
      <xref ref="subsection-special-systems-of-equations"/>. If the two lines have the same slope,
      then they might be distinct lines that never meet, and then the system has no solutions.
      Or they might coincide as the same line, in which case there are infinitely many solutions
      represented by all the points on that line. In these cases, when we try to use substitution,
      interesting things happen.
    </p>

    <example xml:id="example-solving-system-of-equations-substitution-no-solution">
      <title>A System with No Solution</title>                                                                <idx><h>Systems of linear equations</h><h>with no solution</h></idx>
      <statement>
        <p>
          Solve the system of equations using the substitution method:
          <md>
            <mrow>\left\{
            \begin{aligned}
            y \amp= 2x-1 \\
            4x - 2y \amp= 3
            \end{aligned}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          Since the first equation has already isolated <m>y</m>, we will substitute <m>2x-1</m> in
          for <m>y</m> in the second equation, and we have:
          <md>
            <mrow>4x-2y\amp=3</mrow>
            <mrow>4x-2\substitute{(2x-1)}\amp=3</mrow>
            <mrow>4x-4x+2\amp=3</mrow>
            <mrow>2\amp=3</mrow>
          </md>
        </p>

        <p>
          Even though we were only intending to replace <m>y</m> in the second equation, it turned
          out that all instances of <m>x</m> disappear too. There are no variables at all in what
          remains. This will happen whenever the two lines from a system have the same slope. In
          this case, since <m>2=3</m> is false no matter what values <m>x</m> and <m>y</m> might be,
          there can be no solution to the system. If we graphed the two lines from this system, we
          would see them as parallel and <em>distinct</em>. We can say that there are no solutions,
          or that the solution set is empty. The solution set is <m>\{\,\}</m>, or <m>\emptysest</m>.
        </p>

        <p>
          For verification, let's re-write the second equation in slope-intercept form:
          <md>
            <mrow>4x-2y\amp=3</mrow>
            <mrow>-2y\amp=-4x+3</mrow>
            <mrow>\divideunder{-2y}{-2}\amp=\divideunder{-4x+3}{-2}</mrow>
            <mrow>y\amp=\frac{-4x}{-2}+\frac{3}{-2}</mrow>
            <mrow>y\amp=2x-\frac{3}{2}</mrow>
          </md>
          So the system is equivalent to:
          <md>
            <mrow>\left\{
            \begin{aligned}
            y \amp = 2x-1 \\
            y \amp = 2x-\frac{3}{2}
            \end{aligned}
            \right.</mrow>
          </md>
          Now it is easier to see that the two lines have the same slope but different
          <m>y</m>-intercepts. The lines are parallel and distinct confirming that there should
          be no solution to the system.
        </p>
      </solution>
    </example>

    <example xml:id="example-solving-system-of-equations-substitution-infinite-solutions">
      <title>A System with Infinitely Many Solutions</title>                                                  <idx><h>Systems of linear equations</h><h>with infinitely many solutions</h></idx>
      <statement>
        <p>
          Solve the system of equations using the substitution method:
          <md>
            <mrow>\left\{
            \begin{aligned}
            y \amp=2x-1 \\
            4x-2y \amp=2
            \end{aligned}
            \right.</mrow>
          </md>
        </p>
      </statement>
      <solution>
        <p>
          Since <m>y</m> is already isolated in the first line, we will use that and substitute
          <m>2x-1</m> in for <m>y</m> in the second equation:
          <md>
            <mrow>4x-2y\amp=2</mrow>
            <mrow>4x-2\substitute{(2x-1)}\amp=2</mrow>
            <mrow>4x-4x+2\amp=2</mrow>
            <mrow>2\amp=2</mrow>
          </md>
        </p>

        <p>
          Once again, after the substitution we find ourselves with an equation where there are no
          variables. This time, it is an outright true equation; <m>2</m> really does equal <m>2</m>.
          What does this means for the original system of equations though? Apparently as long as
          <m>y</m> equals <m>2x-1</m>, then <em>both</em> of the original equations are true. It's
          obvious that <m>y=2x-1</m> makes the first equation true, but our algebra above shows that
          <m>y=2x-1</m> also makes the second equation true. So there are infinitely many solutions.
          If we want to, we can write the solution set using set-builder notation:
          <m>\{(x,y)\mid y=2x-1\}</m>. Ultimately the <q>two</q> lines from the system were actually
          the same line.
        </p>

        <p>
          For verification, let's re-write the second equation in slope-intercept form:
          <md>
            <mrow>4x-2y\amp=2</mrow>
            <mrow>-2y\amp=-4x+2</mrow>
            <mrow>\frac{-2y}{-2}\amp=\frac{-4x}{-2}+\frac{2}{-2}</mrow>
            <mrow>y\amp=2x-1</mrow>
          </md>
          So the system is equivalent to:
          <md>
            <mrow>\left\{
            \begin{alignedat}{4}
            y \amp {}={} \amp 2x-1 \\
            y \amp {}={} \amp 2x-1
            \end{alignedat}
            \right.</mrow>
          </md>
          Now it is clear that the two equations represent the same line. So every point on that
          line is a solution, and there are infinitely many solutions.
        </p>
      </solution>
    </example>
  </subsection>

  <reading-questions>
    <exercise>
      <statement>
        <p>
          Give an example of a system of two equations in <m>x</m> and <m>y</m>
          where it would be nicer to solve the system using substitution
          than by graphing the two lines that the equations define.
          Explain why substitution would be nicer than graphing for your example system.
        </p>
      </statement>
      <response/>
    </exercise>
    <exercise>
      <statement>
        <p>
          What can be helpful if you have a system of two linear equations in two variables where
          there are fractions appearing in the equations?
        </p>
      </statement>
      <response/>
    </exercise>
    <exercise>
      <statement>
        <p>
          In an application problem, thinking about the <fillin characters="10"/> can help you
          understand how to set up equations.
        </p>
      </statement>
      <response/>
    </exercise>
  </reading-questions>

  <exercises>
    <subexercises>
      <title>Review</title>
      <!-- TODO: This needs more review exercises from chapter 2 once chapter 2 is revised -->
    </subexercises>
    <subexercises>
      <title>Skills Practice</title>
      <exercisegroup cols="2">
        <introduction>
          <p>
            Solve the system of equations using substitution.
          </p>
        </introduction>
        <exercise label="substitution-integer-solutions-integer-coefficients-slope-intercept">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-slope-intercept">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              @m = (-5..-1, 1..5)[NchooseK(10,2)];
              @b = map{$y - $_*$x} (@m);
              @f = map{Formula("$Y = $m[$_] $X + $b[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-slope-intercept-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-slope-intercept"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-point-slope">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              @m = (-5..-1, 1..5)[NchooseK(10,2)];
              @h = (-5..-1, 1..5)[NchooseK(10,2)];
              @k = map{$y - $m[$_]*($x - $h[$_])} (0,1);
              @f = map{Formula("$Y = $m[$_] ($X - $h[$_]) + $k[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-point-slope"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-standard-with-one">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-standard-with-one">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              do {
                @A = (-5..-1, 1..5)[NchooseK(10,2)];
                @B = (-5..-1, 1..5)[NchooseK(10,2)];
                $roll = random(0,3);
                if ($roll == 0) {$A[0] = list_random(-1,1)};
                if ($roll == 1) {$A[1] = list_random(-1,1)};
                if ($roll == 2) {$B[0] = list_random(-1,1)};
                if ($roll == 3) {$B[1] = list_random(-1,1)};
              } until ($A[0]*$B[1] != $A[1]*$B[0]);
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-standard-with-one-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-standard-with-one"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-slope-intercept-standard">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-slope-intercept-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              do {
                @A = (-5..-1, 1..5)[NchooseK(10,2)];
                @B = (-5..-1, 1..5)[NchooseK(10,2)];
                $B[0] = 1;
              } until ($A[0]*$B[1] != $A[1]*$B[0]);
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              $f[0] = Formula("$Y = -$A[0] $X + $C[0]");
              $f[1] = Formula("$A[1] $X + $B[1] $Y = $C[1]");
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-slope-intercept-standard-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-slope-intercept-standard"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope-slope-intercept">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-point-slope-slope-intercept">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              @m = (-5..-1, 1..5)[NchooseK(10,2)];
              @h = (-5..-1, 1..5)[NchooseK(10,2)];
              $h[random(0,1)] = 0;
              @k = map{$y - $m[$_]*($x - $h[$_])} (0,1);
              @f = map{Formula("$Y = $m[$_] ($X - $h[$_]) + $k[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope-slope-intercept-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-point-slope-slope-intercept"/>
        </exercise>
        <exercise label="substitution-no-solution-integer-coefficients-standard-form-with-one">
          <webwork xml:id="webwork-substitution-no-solution-integer-coefficients-standard-form-with-one">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($A[0], $B[0], $C[0]) = (-9..-2,2..9)[NchooseK(18,3)];
              $roll = random(0,1);
              if ($roll == 0) {$A[0] = list_random(-1,1)};
              if ($roll == 1) {$B[0] = list_random(-1,1)};
              $k = list_random(-4..-2,2..4);
              $A[1] = $A[0]*$k;
              $B[1] = $B[0]*$k;
              do {
                $C[1] = list_random(-9..-2,2..9)
              } until ($C[1] != $C[0]*$k);
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("no solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-no-solution-integer-coefficients-standard-form-with-one-copy">
          <webwork copy="webwork-substitution-no-solution-integer-coefficients-standard-form-with-one"/>
        </exercise>
        <exercise label="substitution-infinite-solutions-integer-coefficients-slope-intercept-standard">
          <webwork xml:id="webwork-substitution-infinite-solutions-integer-coefficients-slope-intercept-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              $A[0] = (-5..-1, 1..5)[NchooseK(10,2)];
              $A[1] = $A[0];
              @B = (1, 1);
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              $f[0] = Formula("$Y = -$A[0] $X + $C[0]");
              $f[1] = Formula("$A[1] $X + $B[1] $Y = $C[1]");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("infinitely many solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-infinite-solutions-integer-coefficients-slope-intercept-standard-copy">
          <webwork copy="webwork-substitution-infinite-solutions-integer-coefficients-slope-intercept-standard"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope-standard">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-point-slope-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              do {
                @A = (-5..-2, 2..5)[NchooseK(10,2)];
                @B = (-5..-1, 1..5)[NchooseK(10,2)];
                $B[1] = 1;
              } until ($A[0]*$B[1] != $A[1]*$B[0]);
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              $f[0] = Formula("$A[0] $X + $B[0] $Y = $C[0]");
              $h[1] = non_zero_random(-5, 5);
              $k[1] = $C[1] - $A[1]*$h[1];
              $f[1] = Formula("$Y = -$A[1] ($X - $h[1]) + $k[1]");
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-point-slope-standard-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-point-slope-standard"/>
        </exercise>
        <exercise label="substitution-no-solution-integer-coefficients-point-slope-standard">
          <webwork xml:id="webwork-substitution-no-solution-integer-coefficients-point-slope-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              $A[0] = list_random(-5..-2, 2..5);
              $A[1] = $A[0];
              @B = (1,1);
              @C = (-9..9)[NchooseK(19,2)];
              $f[0] = Formula("$A[0] $X + $B[0] $Y = $C[0]");
              $h[1] = non_zero_random(-5, 5);
              $k[1] = $C[1] - $A[1]*$h[1];
              $f[1] = Formula("$Y = -$A[1] ($X - $h[1]) + $k[1]");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("no solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-no-solution-integer-coefficients-point-slope-standard-copy">
          <webwork copy="webwork-substitution-no-solution-integer-coefficients-point-slope-standard"/>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-standard">
          <webwork xml:id="webwork-substitution-integer-solutions-integer-coefficients-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              do {
                @A = (-5..-2, 2..5)[NchooseK(8,2)];
                @B = (-5..-2, 2..5)[NchooseK(8,2)];
              } until ($A[0]*$B[1] != $A[1]*$B[0]);
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-integer-solutions-integer-coefficients-standard-copy">
          <webwork copy="webwork-substitution-integer-solutions-integer-coefficients-standard"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-slope-intercept">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-slope-intercept">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              @b = (-9..9)[NchooseK(19,2)];
              my @posssible_m;
              for my $m1 (-9..-1,1..9) {
                for my $m2 (-9..-1,1..9) {
                  push(@posssible_m,[$m1,$m2]) if (
                    abs($m2 - $m1) > 1 &amp;&amp;
                    abs($m2 - $m1) &lt; 10 &amp;&amp;
                    ($b[0] - $b[1]) % ($m2 - $m1) != 0 &amp;&amp;
                    ($m2*$b[0] - $m1*$b[1]) % ($m2 - $m1) != 0
                  );
                }
              }
              @m = @{list_random(@posssible_m)};
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $x = Fraction(($b[0] - $b[1])/($m[1] - $m[0]));
              $y = Fraction(($m[1]*$b[0] - $m[0]*$b[1])/($m[1] - $m[0]));
              @f = map{Formula("$Y = $m[$_] $X + $b[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-slope-intercept-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-slope-intercept"/>
        </exercise>
        <exercise label="substitution-infinite-solutions-integer-coefficients-point-slope-standard">
          <webwork xml:id="webwork-substitution-infinite-solutions-integer-coefficients-point-slope-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              ($x, $y) = (-7..-1, 1..7)[NchooseK(14,2)];
              $A[1] = list_random(-5..-2, 2..5);
              $B[1] = 1;
              $k = list_random(-5..-2, 2..5);
              $A[0] = $A[1]*$k;
              $B[0] = $B[1]*$k;
              @C = map{$A[$_]*$x + $B[$_]*$y} (0,1);
              $f[0] = Formula("$A[0] $X + $B[0] $Y = $C[0]");
              $h[1] = non_zero_random(-5, 5);
              $k[1] = $C[1] - $A[1]*$h[1];
              $f[1] = Formula("$Y = -$A[1] ($X - $h[1]) + $k[1]");
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("infinitely many solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-infinite-solutions-integer-coefficients-point-slope-standard-copy">
          <webwork copy="webwork-substitution-infinite-solutions-integer-coefficients-point-slope-standard"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-point-slope">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-point-slope">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              @h = (-9..9)[NchooseK(19,2)];
              @k = (-9..9)[NchooseK(19,2)];
              my @b;
              my @possible_m;
              for my $m1 (-9..-2,2..9) {
                for my $m2 (-9..-2,2..9) {
                  @b = ($k[0] - $m1*$h[0], $k[1] - $m2*$h[1]);
                  push(@possible_m,[$m1,$m2]) if (
                    abs($m2 - $m1) > 1 &amp;&amp;
                    abs($m2 - $m1) &lt; 10 &amp;&amp;
                    ($b[0] - $b[1]) % ($m2 - $m1) != 0 &amp;&amp;
                    ($m2*$b[0] - $m1*$b[1]) % ($m2 - $m1) != 0
                  );
                }
              }
              @m = @{list_random(@possible_m)};
              @b = map {$k[$_] - $m[$_]*$h[$_]} (0,1);
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $x = Fraction(($b[0] - $b[1])/($m[1] - $m[0]));
              $y = Fraction(($m[1]*$b[0] - $m[0]*$b[1])/($m[1] - $m[0]));
              @f = map{Formula("$Y = $m[$_] ($X - $h[$_]) + $k[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-point-slope-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-point-slope"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-standard-with-one">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-standard-with-one">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              do {
                @A = (-9..-1, 1..9)[NchooseK(19,2)];
                @B = (-9..-1, 1..9)[NchooseK(19,2)];
                $roll = random(0,3);
                if ($roll == 0) {$A[0] = list_random(-1,1)};
                if ($roll == 1) {$A[1] = list_random(-1,1)};
                if ($roll == 2) {$B[0] = list_random(-1,1)};
                if ($roll == 3) {$B[1] = list_random(-1,1)};
              } until (abs($A[0]*$B[1] - $A[1]*$B[0]) > 1 &amp;&amp; abs($A[0]*$B[1] - $A[1]*$B[0]) &lt; 10);
              @C = (-9..-1, 1..9)[NchooseK(18,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $x = Fraction(($B[1]*$C[0] - $B[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $y = Fraction((-$A[1]*$C[0] + $A[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-standard-with-one-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-standard-with-one"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-slope-intercept-standard">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-slope-intercept-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                @A = (-9..-1, 1..9)[NchooseK(19,2)];
                @B = (-9..-1, 1..9)[NchooseK(19,2)];
                $B[0] = 1;
                @C = (-9..-1, 1..9)[NchooseK(18,2)];
                $x = Fraction(($B[1]*$C[0] - $B[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
                $y = Fraction((-$A[1]*$C[0] + $A[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              } until (abs($A[0]*$B[1] - $A[1]*$B[0]) > 1 &amp;&amp; abs($A[0]*$B[1] - $A[1]*$B[0]) &lt; 10 &amp;&amp; ($x->value)[1] > 1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              $f[0] = Formula("$Y = -$A[0] $X + $C[0]");
              $f[1] = Formula("$A[1] $X + $B[1] $Y = $C[1]");
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[1]"/> \\
                  \amp <var name="$f[0]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-slope-intercept-standard-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-slope-intercept-standard"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-point-slope-standard">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-point-slope-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                @A = (-9..-2, 2..9)[NchooseK(19,2)];
                @B = (-9..-1, 1..9)[NchooseK(19,2)];
                $B[0] = 1;
                @C = (-9..-1, 1..9)[NchooseK(18,2)];
                $x = Fraction(($B[1]*$C[0] - $B[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
                $y = Fraction((-$A[1]*$C[0] + $A[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              } until (abs($A[0]*$B[1] - $A[1]*$B[0]) > 1 &amp;&amp; abs($A[0]*$B[1] - $A[1]*$B[0]) &lt; 10 &amp;&amp; ($x->value)[1] > 1);
              $h[0] = non_zero_random(-6, 6);
              $k[0] = $C[0] - $A[0]*$h[0];
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              $f[0] = Formula("$Y = -$A[0] ($X - $h[0]) + $k[0]");
              $f[1] = Formula("$A[1] $X + $B[1] $Y = $C[1]");
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-point-slope-standard-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-point-slope-standard"/>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-standard">
          <webwork xml:id="webwork-substitution-fraction-solutions-integer-coefficients-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              do {
                @A = (-9..-2, 2..9)[NchooseK(19,2)];
                @B = (-9..-2, 2..9)[NchooseK(19,2)];
              } until (abs($A[0]*$B[1] - $A[1]*$B[0]) > 1 &amp;&amp; abs($A[0]*$B[1] - $A[1]*$B[0]) &lt; 10);
              @C = (-9..-1, 1..9)[NchooseK(18,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $x = Fraction(($B[1]*$C[0] - $B[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $y = Fraction((-$A[1]*$C[0] + $A[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-solutions-integer-coefficients-standard-copy">
          <webwork copy="webwork-substitution-fraction-solutions-integer-coefficients-standard"/>
        </exercise>
        <exercise label="substitution-decimal-coefficients-slope-intercept">
          <webwork xml:id="webwork-substitution-decimal-coefficients-slope-intercept">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Numeric")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                $m[0] = non_zero_random(-8,8,0.1);
                $m[1] = non_zero_random(-8,8,0.1);
              } until ($m[0] != $m[1]);
              $b[0] = non_zero_random(-8,8,0.1);
              $b[1] = non_zero_random(-8,8,0.1);
              $x = ($b[1] - $b[0])/($m[1] - $m[0]);
              $y = $m[0]*$x + $b[0];
              @f = map{Formula("$Y = $m[$_] $X + $b[$_]")->reduce} (0,1);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-decimal-coefficients-slope-intercept-copy">
          <webwork copy="webwork-substitution-decimal-coefficients-slope-intercept"/>
        </exercise>
        <exercise label="substitution-decimal-coefficients-standard-with-one">
          <webwork xml:id="webwork-substitution-decimal-coefficients-standard-with-one">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              do {
                $A[0] = non_zero_random(0,8,0.1);
                $A[1] = non_zero_random(0,8,0.1);
                $B[0] = non_zero_random(0,8,0.1);
                $B[1] = non_zero_random(0,8,0.1);
                $roll = random(0,3);
                if ($roll == 0) {$A[0] = list_random(-1,1)};
                if ($roll == 1) {$A[1] = list_random(-1,1)};
                if ($roll == 2) {$B[0] = list_random(-1,1)};
                if ($roll == 3) {$B[1] = list_random(-1,1)};
              } until ($A[0]*$B[1] != $A[1]*$B[0]);
              $C[0] = non_zero_random(-8,8,0.1);
              $C[1] = non_zero_random(-8,8,0.1);
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")} (0,1);
              $x = Real(($B[1]*$C[0] - $B[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $y = Real((-$A[1]*$C[0] + $A[0]*$C[1])/($A[0]*$B[1] - $A[1]*$B[0]));
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-decimal-coefficients-standard-with-one-copy">
          <webwork copy="webwork-substitution-decimal-coefficients-standard-with-one"/>
        </exercise>
        <exercise label="substitution-fraction-coefficients-slope-intercept">
          <webwork xml:id="webwork-substitution-fraction-coefficients-slope-intercept">
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                do {
                    $m[0] = Fraction(random_coprime([1..5],[2..6]));
                    $m[1] = Fraction(random_coprime([1..5],[2..6]));
                } until ($m[0] != $m[1]);
                @b = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1);
                $i = random(0,1);
                $b[$i] = Fraction(random_coprime([-5..-1,1..5],[($m[1-$i]->value)[1]]));
                $x = Fraction(($b[0] - $b[1])/($m[1] - $m[0]));
                $y = Fraction(($m[1]*$b[0] - $m[0]*$b[1])/($m[1] - $m[0]));
              } until (($x->value)[1] &lt;= 50 &amp;&amp; ($y->value)[1] &lt;= 50);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              @f = map{Formula("$Y = $m[$_] $X + $b[$_]")} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-coefficients-slope-intercept-copy">
          <webwork copy="webwork-substitution-fraction-coefficients-slope-intercept"/>
        </exercise>
        <exercise label="substitution-fraction-coefficients-point-slope">
          <webwork xml:id="webwork-substitution-fraction-coefficients-point-slope">
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                do {
                    $m[0] = Fraction(random_coprime([1..5],[2..6]));
                    $m[1] = Fraction(random_coprime([1..5],[2..6]));
                } until ($m[0] != $m[1]);
                @b = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1);
                $i = random(0,1);
                $b[$i] = Fraction(random_coprime([-5..-1,1..5],[($m[1-$i]->value)[1]]));
                $x = Fraction(($b[0] - $b[1])/($m[1] - $m[0]));
                $y = Fraction(($m[1]*$b[0] - $m[0]*$b[1])/($m[1] - $m[0]));
              } until (($x->value)[1] &lt;= 50 &amp;&amp; ($y->value)[1] &lt;= 50);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              @h = map{non_zero_random(-5,5)} (0,1);
              @k = map{$b[$_] + $m[$_]*$h[$_]} (0,1);
              @f = map{Formula("$Y = $m[$_] ($X - $h[$_]) + $k[$_]")->reduce} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-coefficients-point-slope-copy">
          <webwork copy="webwork-substitution-fraction-coefficients-point-slope"/>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard">
          <webwork xml:id="webwork-substitution-fraction-coefficients-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                do {
                    $A[0] = Fraction(random_coprime([1..5],[2..6]));
                    $A[1] = Fraction(random_coprime([1..5],[2..6]));
                    $B[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $B[1] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $roll = random(0,3);
                    $A[0] = 1 if ($roll == 0);
                    $A[1] = 1 if ($roll == 1);
                    $B[0] = list_random(-1,1) if ($roll == 2);
                    $B[1] = list_random(-1,1) if ($roll == 3);
                    $D = $A[0]*$B[1] - $A[1]*$B[0];
                } until ($D != 0);
                @C = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1);
                $x = Fraction(( $B[1]*$C[0] - $B[0]*$C[1])/$D);
                $y = Fraction((-$A[1]*$C[0] + $B[1]*$C[1])/$D);
              } until (($x->value)[1] &lt;= 50 &amp;&amp; ($y->value)[1] &lt;= 50);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")->reduce} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard-copy">
          <webwork copy="webwork-substitution-fraction-coefficients-standard"/>
        </exercise>
        <exercise label="substitution-no-solution-fraction-coefficients-standard">
          <webwork xml:id="webwork-substitution-no-solution-fraction-coefficients-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $A[0] = Fraction(random_coprime([1..5],[2..6]));
              $B[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
              $A[1] = Fraction(random_coprime([1..5],[2..6]));
              $B[1] = $B[0]*$A[1]/$A[0];
              do {
                @C = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1)
              } until ($C[1] != $C[0]*$A[1]/$A[0]);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("no solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")->reduce} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-no-solution-fraction-coefficients-standard-copy">
          <webwork copy="webwork-substitution-no-solution-fraction-coefficients-standard"/>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard-slope-intercept">
          <webwork xml:id="webwork-substitution-fraction-coefficients-standard-slope-intercept">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                do {
                    $A[0] = Fraction(random_coprime([1..5],[2..6]));
                    $A[1] = Fraction(random_coprime([1..5],[2..6]));
                    $B[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $B[1] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $roll = random(0,3);
                    $A[0] = 1 if ($roll == 0);
                    $A[1] = 1 if ($roll == 1);
                    $B[0] = list_random(-1,1) if ($roll == 2);
                    $B[1] = list_random(-1,1) if ($roll == 3);
                    $D = $A[0]*$B[1] - $A[1]*$B[0];
                } until ($D != 0);
                @C = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1);
                $x = Fraction(( $B[1]*$C[0] - $B[0]*$C[1])/$D);
                $y = Fraction((-$A[1]*$C[0] + $B[1]*$C[1])/$D);
              } until (($x->value)[1] &lt;= 50 &amp;&amp; ($y->value)[1] &lt;= 50);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")->reduce} (0,1);
              $i = random(0,1);
              $m = -$A[$i]/$B[$i];
              $b = $C[$i]/$B[$i];
              $f[$i] = Formula("$Y = $m $X + $b")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard-slope-intercept-copy">
          <webwork copy="webwork-substitution-fraction-coefficients-standard-slope-intercept"/>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard-point-slope">
          <webwork xml:id="webwork-substitution-fraction-coefficients-standard-point-slope">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              do {
                do {
                    $A[0] = Fraction(random_coprime([1..5],[2..6]));
                    $A[1] = Fraction(random_coprime([1..5],[2..6]));
                    $B[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $B[1] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
                    $roll = random(0,3);
                    $A[0] = 1 if ($roll == 0);
                    $A[1] = 1 if ($roll == 1);
                    $B[0] = list_random(-1,1) if ($roll == 2);
                    $B[1] = list_random(-1,1) if ($roll == 3);
                    $D = $A[0]*$B[1] - $A[1]*$B[0];
                } until ($D != 0);
                @C = map{Fraction(random_coprime([-5..-1,1..5],[2..6]))} (0,1);
                $x = Fraction(( $B[1]*$C[0] - $B[0]*$C[1])/$D);
                $y = Fraction((-$A[1]*$C[0] + $B[1]*$C[1])/$D);
              } until (($x->value)[1] &lt;= 50 &amp;&amp; ($y->value)[1] &lt;= 50);
              $xis = Formula("$X = $x");
              $yis = Formula("$Y = $y");
              $solution = List($xis,$yis);
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $answer = $solution->cmp(
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")->reduce} (0,1);
              $i = random(0,1);
              $m = -$A[$i]/$B[$i];
              $b = $C[$i]/$B[$i];
              $h = non_zero_random(-5,5);
              $k = $b - $m*$h;
              $f[$i] = Formula("$Y = $m ($X - $h) + $k")->reduce;
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write each solution in <c>variable = number</c> format.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
              <p>
                <var name="$string" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-fraction-coefficients-standard-point-slope-copy">
          <webwork copy="webwork-substitution-fraction-coefficients-standard-point-slope"/>
        </exercise>
        <exercise label="substitution-infinite-solutions-fraction-coefficients-standard">
          <webwork xml:id="webwork-substitution-infinite-solutions-fraction-coefficients-standard">
            <pg-macros>
              <macro-file>parserLinearRelation.pl</macro-file>
            </pg-macros>
            <pg-code>
              ($X, $Y) = ('a'..'n','p'..'z','A'..'N','P'..'T','V'..'Z')[NchooseK(49,2)];
              Context("Fraction")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              parser::Assignment->Allow;
              $A[0] = Fraction(random_coprime([1..5],[2..6]));
              $B[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
              $A[1] = Fraction(random_coprime([1..5],[2..6]));
              $B[1] = $B[0]*$A[1]/$A[0];
              $C[0] = Fraction(random_coprime([-5..-1,1..5],[2..6]));
              $C[1] = $C[0]*$A[1]/$A[0];
              Context()->strings->remove("NONE");
              Context()->strings->add(
                "no solutions" => {},
              );
              for (
                "no solution",
                "none",
                "there are no solutions",
                "the solution set is empty",
                "solution set is empty",
                "empty set",
                "∅",
                "{}",
                "{ }",
                "{  }",
                "{   }"
              ) {
                Context()->strings->add($_ => {alias => "no solutions"});
              }
              Context()->strings->add(
                "infinitely many solutions" => {},
              );
              for (
                "infinitely many",
                "infinite solution set",
                "infinite",
                "the solution set is infinite",
                "solution set is infinite"
              ) {
                Context()->strings->add($_ => {alias => "infinitely many solutions"});
              }
              $solution = Compute("infinitely many solutions");
              $answer = $solution->cmp(
                typeMatch => List("$X = 0, $Y = 0"),
                mathQuillOpts => 'disabled'
              );
              Context("LinearRelation")->variables->are($X => 'Real', $Y => 'Real');
              Context()->noreduce('(-x)-y', '(-x)+y');
              @f = map{Formula("$A[$_] $X + $B[$_] $Y = $C[$_]")->reduce} (0,1);
            </pg-code>
            <statement>
              <p>
                <m>\left\{
                  \begin{alignedat}{4}
                  \amp <var name="$f[0]"/> \\
                  \amp <var name="$f[1]"/>
                  \end{alignedat}
                  \right.
                </m>
              </p>
              <instruction>
                Write the solution in the format
                <c><var name="$X"/> = number, <var name="$Y"/> = number</c>.
                If there is no solution, enter <c>no solutions</c>.
                If there are infintely many solutions, enter <c>infinitely many solutions</c>.
              </instruction>
              <p>
                <var name="$answer" width="16"/>
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise label="substitution-infinite-solutions-fraction-coefficients-standard-copy">
          <webwork copy="webwork-substitution-infinite-solutions-fraction-coefficients-standard"/>
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Applications</title>
      <exercise label="rectangle-dimensions">
        <webwork xml:id="webwork-rectangle-dimensions">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $n = random(2,8);
            $w = numberWord($n);
            $d = random(5,10);
            $diff = NumberWithUnits("$d ft");
            $p = random(100,200);
            $perimeter = NumberWithUnits("$p ft");
            Context("LinearRelation")->variables->are(L => 'Real', W => 'Real');
            @eq = (LinearRelation("L = $n W - $d"), LinearRelation("2L + 2W = $p"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            $W = NumberWithUnits(($p+2*$d)/(2*$n+2), "ft");
            $L = NumberWithUnits($n*($p+2*$d)/(2*$n+2) - $d, "ft");
          </pg-code>
          <statement>
            <p>
              A rectangle's length is <m><var name="$diff"/></m> shorter than <var name="$w"/>
              times its width. The rectangle's perimeter is <m><var name="$perimeter"/></m>. Find
              the rectangle's length and width.
            </p>
            <instruction>
              Using <c>L</c> and <c>W</c> as the variables, give two equations that form a system
              of equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the rectangle's length here.
            </instruction>
            <p>
              <var name="$L" width="16"/>
            </p>
            <instruction>
              Enter the width here.
            </instruction>
            <p>
              <var name="$W" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="school-fundraiser">
        <webwork xml:id="webwork-school-fundraiser">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $C = random(40,60);
            $A = random(2*$C - 10, 2*$C + 40);
            $tickets = $A + $C;
            $c = random(1,2.5,0.5);
            $a = random(5,7.5,0.5);
            $r = $c*$C + $a*$A;
            Context("LinearRelation")->variables->are(A => 'Real', C => 'Real');
            @eq = (LinearRelation("A + C = $tickets"), LinearRelation("$a A + $c C = $r"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $revenue = Currency("$r");
            $adult = Currency("$a");
            $child = Currency("$c");
          </pg-code>
          <statement>
            <p>
              A school fund raising event sold a total of <m><var name="$tickets"/></m> tickets and
              generated a total revenue of <m><var name="$revenue"/></m>. Each adult ticket cost
              <m><var name="$adult"/></m>, and each child ticket cost <m><var name="$child"/></m>.
              How many adult tickets and how many child tickets were sold?
            </p>
            <instruction>
              Using <c>A</c> and <c>C</c> as the variables, give two equations that form a system
              of equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the cost of an adult ticket here.
            </instruction>
            <p>
              <var name="$A" width="16"/>
            </p>
            <instruction>
              Enter the cost of a child ticket here.
            </instruction>
            <p>
              <var name="$C" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="telecom-companies">
        <webwork xml:id="webwork-telecom-companies">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $aflat = random(30.95,40.95,2);
            $bflat = $aflat + random(5,10);
            $brate = random(3,4,0.05);
            $arate = random(4.05,5,0.05);
            Context("LinearRelation")->variables->are(D => 'Real', B => 'Real');
            @eq = (LinearRelation("B = $aflat + $arate D"), LinearRelation("B = $bflat + $brate D"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            Context("Numeric");
            $d = ($aflat - $bflat)/($brate - $arate);
            $b = $aflat + $arate*$d;
            $D = NumberWithUnits("$d GB", {newUnit => [{name=>'GB'}]});
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $Aflat = Currency("$aflat");
            $Arate = Currency("$arate");
            $Bflat = Currency("$bflat");
            $Brate = Currency("$brate");
            $B = Currency($b);
          </pg-code>
          <statement>
            <p>
              One telecom company charges a monthly fee of <m><var name="$Aflat"/></m> and
              <m><var name="$Arate"/></m> for each Gigabyte (GB) of data transmitted. A rival
              telecom company charges a monthly fee of <m><var name="$Bflat"/></m> and
              <m><var name="$Brate"/></m> for each GB of data transmitted. How many GB of data would
              you have to use for the monthly bill to be the same for the two providers? And what
              would that monthly bill be?
            </p>
            <instruction>
              Using <c>D</c> (amount data, in GB) and <c>B</c> (bill) as the variables, give two
              equations that form a system of equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount of data here.
            </instruction>
            <p>
              <var name="$D" width="16"/>
            </p>
            <instruction>
              Enter the monthly bill here.
            </instruction>
            <p>
              <var name="$B" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="restaurant-location-revenues">
        <webwork xml:id="webwork-restaurant-location-revenues">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $ainitial = random(80000,100000,1000);
            $binitial = random(40000,60000,1000);
            $brate = random(2000,3000,500);
            $arate = random(3500,5000,500);
            Context("LinearRelation")->variables->are(t => 'Real', R => 'Real');
            @eq = (LinearRelation("R = $ainitial - $arate t"), LinearRelation("R = $binitial + $brate t"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            Context("Numeric");
            $t = ($ainitial - $binitial)/($brate + $arate);
            $r = $aflat - $arate*$d;
            $T = NumberWithUnits("$t months");
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $Ainitial = Currency("$ainitial");
            $Arate = Currency("$arate");
            $Binitial = Currency("$binitial");
            $Brate = Currency("$brate");
            $R = Currency($r);
          </pg-code>
          <statement>
            <p>
              A local restaurant has two locations. At one location, the revenue this month is
              <m><var name="$Ainitial"/></m> but it has been decreasing by
              <m><var name="$Arate"/></m> per month. At the other location, the annual revenue this
              month is <m><var name="$Binitial"/></m> and it has been increasing by
              <m><var name="$Brate"/></m> per month. How long will it be until the two restaurant
              locations are taking in the same monthly revenue? And what will that monthly revenue
              be?
            </p>
            <instruction>
              Using <c>t</c> and <c>R</c> as the variables, give two equations that form a system of
              equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount of time here.
            </instruction>
            <p>
              <var name="$T" width="16"/>
            </p>
            <instruction>
              Enter the monthly revenue here.
            </instruction>
            <p>
              <var name="$R" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="math-exam">
        <webwork xml:id="webwork-math-exam">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            do {
              $sa = random(6,8);
              $S = random(7,10);
              $mcM = 100 - $sa*$S;
            } until ($mcM % 2 == 0 || $mcM % 3 == 0 || $mcM % 4 == 0 || $mcM % 5 == 0);
            @pool;
            for (2..5) {
              push(@pool, $_) if ($mcM % $_ == 0);
            }
            $mc = list_random(@pool);
            $M = $mcM/$mc;
            $total = $S + $M;
            Context("LinearRelation")->variables->are(M => 'Real', S => 'Real');
            @eq = (LinearRelation("M + S = $total"), LinearRelation("$mc M + $sa S = 100"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
          </pg-code>
          <statement>
            <p>
              An algebra exam has <m><var name="$total"/></m> questions, worth a total of 100 points.
              There are two types of question on the exam. There are multiple-choice questions each
              worth <m><var name="$mc"/></m> points, and short-answer questions, each worth
              <m><var name="$sa"/></m> points. How many questions are there of each type?
            </p>
            <instruction>
              Using <c>M</c> and <c>S</c> as the variables, give two equations that form a system of
              equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the number of multiple choice questions here.
            </instruction>
            <p>
              <var name="$M" width="16"/>
            </p>
            <instruction>
              Enter the number of short answer questions here.
            </instruction>
            <p>
              <var name="$S" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="mixed-investments">
        <webwork xml:id="webwork-mixed-investments">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <pg-code>
            $p = randomPerson();
            Context("Percent");
            $r1 = random(0.01, 0.03, 0.005);
            $rate1 = Percent($r1);
            $r2 = random(0.035, 0.07, 0.005);
            $rate2 = Percent($r2);
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $x = random(1000, 2000, 100);
            $y = random(2100, 4000, 100);
            $X = Currency($x);
            $Y = Currency($y);
            $t = $x + $y;
            $total = Currency($t);
            $i = $r1 * $x + $r2 * $y;
            $interest = Currency($i);
            Context("LinearRelation")->variables->are(x => 'Real', y => 'Real');
            @eq = (LinearRelation("x + y = $t"), LinearRelation("$r1 x + $r2 y = $i"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
          </pg-code>
          <statement>
            <p>
              <var name="$p"/> invested a total of <m><var name="$total"/></m> in two investments.
              <var name="$p->Their"/> savings account pays <m><var name="$rate1"/></m> interest
              annually. A riskier stock investment earned <m><var name="$rate2"/></m> at the end of
              the year. At the end of the year, <var name="$p"/> earned a total of
              <m><var name="$interest"/></m> in interest. How much money did <var name="$p->they"/>
              invest in each account?
            </p>
            <instruction>
              Using <c>x</c> (savings investment) and <c>y</c> (stock investment) as the variables,
              give two equations that form a system of equations that is appropriate for this
              exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount invested in savings here.
            </instruction>
            <p>
              <var name="$X" width="16"/>
            </p>
            <instruction>
              Enter the amount invested in stock here.
            </instruction>
            <p>
              <var name="$Y" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="mixed-investments-loss">
        <webwork xml:id="webwork-mixed-investments-loss">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <pg-code>
            $p = randomPerson();
            Context("Percent");
            $r1 = random(0.01, 0.03, 0.005);
            $rate1 = Percent($r1);
            $r2 = random(0.035, 0.07, 0.005);
            $rate2 = Percent($r2);
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $x = random(1000, 2000, 100);
            $y = random(2100, 4000, 100);
            $X = Currency($x);
            $Y = Currency($y);
            $t = $x + $y;
            $total = Currency($t);
            $i = $r1 * $x + $r2 * $y;
            $final = $total - Currency($i);
            Context("LinearRelation")->variables->are(x => 'Real', y => 'Real');
            @eq = (LinearRelation("x + y = $t"), LinearRelation("$r1 x - $r2 y = -$i"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
          </pg-code>
          <statement>
            <p>
              <var name="$p"/> invested a total of <m><var name="$total"/></m> in two investments.
              <var name="$p->Their"/> savings account pays <m><var name="$rate1"/></m> interest
              annually. A riskier stock investment lost <m><var name="$rate2"/></m> at the end of
              the year. At the end of the year, <var name="$p"/>'s total fell from
              <m><var name="$total"/></m> to <m><var name="$final"/></m>. How much money did
              <var name="$p->they"/> invest in each account?
            </p>
            <instruction>
              Using <c>x</c> (savings investment) and <c>y</c> (stock investment) as the variables,
              give two equations that form a system of equations that is appropriate for this
              exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount invested in savings here.
            </instruction>
            <p>
              <var name="$X" width="16"/>
            </p>
            <instruction>
              Enter the amount invested in stock here.
            </instruction>
            <p>
              <var name="$Y" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="town-merger">
        <webwork xml:id="webwork-town-merger">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $group = list_random('Democrats', 'Republicans', 'retirees', 'married');
            $a = random(1000, 2000, 100);
            $b = random(2100, 4000, 100);
            $total = $a + $b;
            Context("Percent");
            $p1 = random(0.40, 0.48, 0.01);
            $P1 = Percent($p1);
            $p2 = random(0.49, 0.55, 0.01);
            $P2 = Percent($p2);
            $pfinal = Round(($p1*$a + $p2*$b)/($a + $b),3);
            $Pfinal = Percent($pfinal);
            Context("LinearRelation")->variables->are(A => 'Real', B => 'Real');
            @eq = (LinearRelation("A + B = $total"), LinearRelation("$p1 A + $p2 B = $pfinal*$total"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            $B = Round(($p1*$total - $pfinal*$total)/($p1 - $p2));
            $A = $total - $B;
          </pg-code>
          <statement>
            <p>
              Asterton and Balsamburg were two towns located close to each other, and recently they
              merged into one city. Asterton had a population with <m><var name="$P1"/></m>
              <var name="$group"/>. Balsamburg had a population with <m><var name="$P2"/></m>
              <var name="$group"/>. After the merge, the new city has a total of
              <m><var name="$total"/></m> residents, with <m><var name="$Pfinal"/></m>
              <var name="$group"/>. How many residents did each town have before the merge?
            </p>
            <instruction>
              Using <c>A</c> and <c>B</c> as the variables, give two equations that form a system of
              equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the population of Asterton here.
            </instruction>
            <p>
              <var name="$A" width="16"/>
            </p>
            <instruction>
              Enter the population of Balsamburg here.
            </instruction>
            <p>
              <var name="$B" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="alcohol-solution-mixture">
        <webwork xml:id="webwork-alcohol-solution-mixture">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
            <macro-file>randomPerson.pl</macro-file>
          </pg-macros>
          <pg-code>
            $p = randomPerson();
            $x = random(300, 400, 25);
            $y = random(100, 200, 10);
            $t = $x + $y;
            $X = NumberWithUnits("$x ml");
            $Y = NumberWithUnits("$y ml");
            $total = NumberWithUnits("$t ml");
            Context("Percent");
            $r1 = random(0.06, 0.12, 0.01);
            $rate1 = Percent($r1);
            $r2 = random(0.15, 0.25, 0.01);
            $rate2 = Percent($r2);
            $r3 = Round(($r1*$x + $r2*$y)/($x+$y),3);
            $rate3 = Percent($r3);
            Context("LinearRelation")->variables->are(x => 'Real', y => 'Real');
            @eq = (LinearRelation("x + y = $t"), LinearRelation("$r1 x + $r2 y = $r3*$t"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
          </pg-code>
          <statement>
            <p>
              <var name="$p"/> poured some <m><var name="$rate1"/></m> alcohol solution and some
              <m><var name="$rate2"/></m> alcohol solution together into a beaker, and then the
              beaker had <m><var name="$total"/></m> of <m><var name="$rate3"/></m> alcohol
              solution. How much of each solution did <var name="$p"/> pour into the beaker?
            </p>
            <instruction>
              Using <c>x</c> (weaker solution) and <c>y</c> (stronger solution) as the variables,
              give two equations that form a system of equations that is appropriate for this
              exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount of the weaker solution here.
            </instruction>
            <p>
              <var name="$X" width="16"/>
            </p>
            <instruction>
              Enter the amount of the stronger solution here.
            </instruction>
            <p>
              <var name="$Y" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="mixed-nuts">
        <webwork xml:id="webwork-mixed-nuts">
          <pg-macros>
            <macro-file>parserLinearRelation.pl</macro-file>
          </pg-macros>
          <pg-code>
            $r1 = random(1.60,1.80,0.01);
            $r2 = random(5.60,6.00,0.01);
            $r3 = random(2.50,3,0.10);
            Context("Currency")->flags->set(trimTrailingZeros => 1);
            $rate1 = Currency($r1);
            $rate2 = Currency($r2);
            $rate3 = Currency($r3);
            Context("LinearRelation")->variables->are(P => 'Real', C => 'Real');
            @eq = (LinearRelation("P + C = 1"), LinearRelation("$r1 P + $r2 C = $r3"));
            $m = MultiAnswer(@eq)->with(
              singleResult => 0,
              checker => sub {
                  my ( $c, $s, $self ) = @_;
                  return [1,1] if ($c->[0] == $s->[0] &amp;&amp; $c->[1] == $s->[1] || $c->[1] == $s->[0] &amp;&amp; $c->[0] == $s->[1]);
                  return [1,0] if ($c->[0] == $s->[0] || $c->[1] == $s->[0]);
                  return [0,1] if ($c->[0] == $s->[1] || $c->[1] == $s->[1]);
                  return [0,0];
              }
            );
            $c = ($r1 - $r3)/($r1 - $r2);
            $p = 1 - $c;
            $C = NumberWithUnits("$c lb");
            $P = NumberWithUnits("$p lb");
          </pg-code>
          <statement>
            <p>
              A snack company will produce and sell 1-lb bags with a mixture of peanuts and cashews.
              Peanuts cost <m><var name="$rate1"/></m> per pound, and cashews cost
              <m><var name="$rate2"/></m> per pound. The company is targeting a product that will
              cost them <m><var name="$rate3"/></m> per pound worth of ingredients. How much of each
              type of nut should go into a bag?
            </p>
            <instruction>
              Using <c>P</c> and <c>C</c> as the variables, give two equations that form a system of
              equations that is appropriate for this exercise.
            </instruction>
            <p>
              <var name="$m" width="16"/>
            </p>
            <p>
              <var name="$m" width="16"/>
            </p>
            <instruction>
              Solve the system and enter the amount of peanuts here.
            </instruction>
            <p>
              <var name="$P" width="16"/>
            </p>
            <instruction>
              Enter the amount cashews here.
            </instruction>
            <p>
              <var name="$C" width="16"/>
            </p>
          </statement>
        </webwork>
      </exercise>
    </subexercises>
  </exercises>


</section>

