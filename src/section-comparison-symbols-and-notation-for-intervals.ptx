<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="section-comparison-symbols-and-notation-for-intervals">
  <title>Comparison Symbols and Notation for Intervals</title>
  <objectives>
    <title>PCC Course Content and Outcome Guide</title>
    <ul>
      <li>
        <xref ref="ccog-interval-notation" text="local">MTH 60 CCOG</xref>
      </li>
    </ul>
  </objectives>

  <introduction>
    <p>
      As you know, <m>8</m> is larger than <m>3</m>;
      that's a specific comparison between two numbers.
      We can also make a comparison between two less specific numbers,
      like if we say that average rent in Portland in 2016 is larger than it was in 2009.
      That makes a comparison using unspecified amounts.
      In the first half of this section,
      we will go over the mathematical shorthand notation for making these kinds of comparisons.
    </p>

    <p>
      In Oregon in 2019, only people who are <m>18</m> years old or older can vote in statewide elections.<fn>
      Some states like Washington allow 17-year-olds to vote in primary elections provided they will be 18 by the general election.
      </fn> Does that seem like a statement about the number <m>18</m>?
      Maybe.
      But it's also a statement about numbers like <m>37</m> and <m>62</m>:
      it says that people of these ages may vote as well.
      So the above is actually a statement about a large collection of numbers, not just <m>18</m>.
      In the second half of this section,
      we will get into the mathematical notation for large collections of numbers like this.
    </p>

    <figure xml:id="video-comparison-symbols-and-notation-for-intervals">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-eG16R-Bwkkcna9LWJrMXho" />
    </figure>

  </introduction>

  <subsection>
    <title>Comparison Symbols</title>
    <p>
      In everyday language you can say something like
      <q><m>8</m> is larger than <m>3</m>.</q> In mathematical writing,
      it's not convenient to write that out in English.
      Instead the symbol <q><m>\gt</m></q>
      has been adopted, and it's used like this:
      <me>
        8\gt3
      </me>
      and read out loud as <q><m>8</m> is greater than <m>3</m>.</q>
      The symbol <q><m>\gt</m></q>
      is called the <term>greater-than symbol.</term>
          <idx><h>greater-than symbol</h></idx>
    </p>

    <exercise>
      <webwork>
        <pg-code>
          package context::Ordering::BOP::ordering;
          *isOrdering = sub {
            my $self = shift; my $obj = shift; my $class = $obj->class;
            return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
          };
          package main;
          Context("Ordering");
          Context()->strings->add('age'=>{isLetter => 1,TeX=>'\text{age}'});
          Context()->strings->add('a'=>{isLetter => 1,TeX=>'\text{a}'});
          Context()->strings->add('x'=>{isLetter => 1,TeX=>'\text{x}'});
          $overage=OneOf(Compute("age>20"),Compute("a>20"),Compute("x>20"));
        </pg-code>
        <task>
          <statement>
            <p>
              Use mathematical notation to write <q><m>11.5</m> is greater than <m>4.2</m>.</q>
            </p>
            <p>
              <var name="'11.5>4.2'" width="15" />
            </p>
          </statement>
        </task>
        <task>
          <statement>
            <p>
              Use mathematical notation to write <q>age is greater than <m>20</m>.</q>
            </p>
            <p>
              <var name="$overage" width="15" />
            </p>
          </statement>
          <solution>
            <p>
              We can just write the word <c>age</c> to represent age,
              and write <m>\text{age}\gt20</m>.
              Or we could use an abbreviation like <m>a</m> for age,
              and write <m>a\gt20</m>.
              Or, it is common to use <m>x</m> as a generic abbreviation,
              and we could write <m>x\gt20</m>.
            </p>
          </solution>
        </task>
      </webwork>
    </exercise>

    <remark>
      <p>
        At some point in history,
        someone felt that <m>\gt</m> was a good symbol for
        <q>is greater than.</q> In <q><m>8\gt3</m>,</q>
        the tall side of the symbol is with the larger of the two numbers,
        and the small pointed side is with the smaller of the two numbers.
      </p>

      <p>
        Another way to remember how the greater-than symbol works is
        to imagine the symbol as the open mouth of an alligator,
        or whatever your favorite animal is.
        And then remind yourself that the alligator is hungry
        and it wants to eat the larger number.
      </p>
    </remark>

    <p>
      We have to be careful when negative numbers are part of the comparison.
      Is <m>-8</m> larger or smaller than <m>-3</m>?
      In some sense <m>-8</m> is larger,
      because if you owe someone <m>8</m> dollars,
      that's <em>more</em> than owing them <m>3</m> dollars.
      But that is not how the <m>\gt</m> symbol works.
      This symbol is meant to tell you which number is farther to the right on a number line.
      And if that's how it goes, then <m>-3</m> is larger.
    </p>

    <figure>
      <caption>How the <m>\gt</m> symbol works.</caption>
      <image width="50%">
        <description>a number line with marks at -8, -3, and 8; text indicates the numbers to the left are lesser numbers, and numbers to the right are greater numbers; text indicates that -3 > -8 and 8 > -3</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xtick={-8,-3,3,8},
                                ]
                        \addplot[soliddot] coordinates {(-8,0)};
                        \addplot[soliddot] coordinates {(-3,0)};
                        \addplot[soliddot] coordinates {(8,0)};
                        \node[above] at (axis cs: -5.5,1) {$-3>-8$};
                            \draw[<-](axis cs: -7.5,0.2) --(axis cs: -5.5,1);
                            \draw[<-](axis cs: -3.5,0.2) --(axis cs: -5.5,1);
                        \node[above] at (axis cs: 2.5,1) {$8>-3$};
                            \draw[<-](axis cs: 6.9,0.2) --(axis cs: 2.5,1);
                            \draw[<-](axis cs: -1.9,0.2) --(axis cs: 2.5,1);
                        \node[above] at (axis cs: 11,0) {\parbox{9ex}{greater numbers}};
                        \node[above] at (axis cs: -11,0) {\parbox{9ex}{lesser numbers}};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
      </image>

    </figure>

    <exercise>
      <webwork seed="1">
        <pg-code>
          @a=(-7.6,6,-6,9.5,8);
          $as='{'.join('}\quad{',@a).'}';
          @b=PGsort(sub{$_[0]&gt;$_[1]},@a);
          $bs=join('>',@b);
          package context::Ordering::BOP::ordering;
          *isOrdering = sub {
              my $self = shift; my $obj = shift; my $class = $obj->class;
              return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
          };
          package main;
          Context("Ordering");
          Context()->operators->add(
          '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                  class => 'Parser::BOP::subtract', rightparens => 'same'},
          '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                  class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
          );
          $comparison=Compute("$bs");
        </pg-code>
        <statement>
          <p>
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4 &gt; 3 &gt; 2 &gt; 1 &gt; 0</c>.
          </p>
          <p>
            <me>
              <var name="$as" />
            </me>
          </p>
          <p>
            <var name="$comparison" width="30" />
          </p>
        </statement>
        <solution>
          <p>
            We can order these numbers by placing these numbers on a number line.
          </p>
          <image width="60%">
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}
                  [
                    numberline,
                    xmin=-12,
                    xmax=12,
                    xlabel={},
                    xtick={-10,-5,...,10},
                    minor xtick={-10,-9,...,10},
                  ]
                  \node[pin=90:{\($b[0]\)}] at (axis cs:$b[0],0) {};
                  \node[pin={[pin distance=5]90:{\($b[1]\)}}] at (axis cs:$b[1],0) {};
                  \node[pin=90:{\($b[2]\)}] at (axis cs:$b[2],0) {};
                  \node[pin={[pin distance=5]90:{\($b[3]\)}}] at (axis cs:$b[3],0) {};
                  \node[pin=90:{\($b[4]\)}] at (axis cs:$b[4],0) {};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            And so we see the answer is <m><var name="$comparison" /></m>.
          </p>
        </solution>
      </webwork>
    </exercise>

    <exercise>
      <webwork>
        <pg-code>
          Context("Fraction");
          Context()->flags->set(reduceConstants=>0);
          @a=(-5.2,Formula("pi"),Fraction(10,3),4.6,8);
          Context()->texStrings;
          $as='{'.join('}\quad{',@a).'}';
          Context()->normalStrings;
          @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
          $bs=join('>',@b);
          @c=map{Real("$_")}(@b);
          package context::Ordering::BOP::ordering;
          *isOrdering = sub {
              my $self = shift; my $obj = shift; my $class = $obj->class;
              return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
          };
          package main;
          Context("Ordering");
          Context()->flags->set(reduceConstants=>0);
          Context()->operators->add(
          '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                  class => 'Parser::BOP::subtract', rightparens => 'same'},
          '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                  class => 'Parser::BOP::divide', space => ' /',
                  rightparens => 'all', leftparens => 'extra', fullparens => 1},
          'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                  class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
          );
          Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
          $comparison=Compute("$bs");
        </pg-code>
        <statement>
          <p>
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4 &gt; 3 &gt; 2 &gt; 1 &gt; 0</c>.
          </p>
          <instruction>
            If you need to enter <m>pi</m>, type <c>pi</c>.
          </instruction>
          <p>
            <me>
              <var name="$as" />
            </me>
          </p>
          <p>
            <var name="$comparison" width="30" />
          </p>
        </statement>
        <solution>
          <p>
            We can order these numbers by placing these numbers on a number line.
            Knowing or computing their decimals helps with this:
            <m>\pi\approx3.141\ldots</m> and <m>\frac{10}{3}\approx3.333\ldots</m>.
          </p>
          <image width="60%">
            <latex-image>
              \begin{tikzpicture}
                \begin{axis}
                  [
                    numberline,
                    xmin=-12,
                    xmax=12,
                    xlabel={},
                    xtick={-10,-5,...,10},
                    minor xtick={-10,-9,...,10},
                  ]
                  \node[pin=90:{\(-5.2\)}] at (axis cs:-5.2,0) {};
                  \node[pin={[pin distance=5]90:{\(\pi\)}}] at (axis cs:3.1415926,0) {};
                  \node[pin=90:{\(\frac{10}{3}\)}] at (axis cs:3.333333,0) {};
                  \node[pin={[pin distance=5]90:{\(4.6\)}}] at (axis cs:4.6,0) {};
                  \node[pin=90:{\(8\)}] at (axis cs:8,0) {};
                \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p>
            And so we see the answer is <m><var name="$comparison" /></m>.
          </p>
        </solution>
      </webwork>
    </exercise>

    <p>
      The greater-than symbol has a close relative,
      the <term>greater-than-or-equal-to symbol</term>,
      <q><m>\geq</m>.</q><idx><h>greater-than-or-equal-to symbol</h></idx> It means just like it sounds:
      the first number is either greater than the second number or equal to it.
      These are all true statements:
      <md>
        <mrow>8\amp\geq3\amp3\amp\geq-8\amp3\amp\geq3</mrow>
      </md>
      but one of these three statements is false:
      <md>
        <mrow>8\amp\gt3\amp3\amp\gt-8\amp3\amp\reject{\gt}3</mrow>
      </md>
    </p>

    <remark>
      <p>
        While it may not seem helpful to write <m>3\geq3</m> when you could write <m>3=3</m>,
        the <m>\geq</m> symbol is quite useful when specific numbers aren't used on at least one side,
        like in these examples:
        <md>
          <mrow>(\text{hourly pay rate})\amp\geq(\text{minimum wage})\amp(\text{age of a voter})\amp\geq18</mrow>
        </md>
      </p>
    </remark>

    <p>
      Sometimes you want to emphasize that one number is <em>less than</em>
      another number instead of emphasizing which number is greater.
      To do this, we have symbols that are reversed from <m>\gt</m> and <m>\geq</m>.
      The symbol <q><m>\lt</m></q> is the
      <term>less-than symbol</term> and it's used like this:
      <me>
        3\lt8
      </me>
      and read out loud as <q><m>3</m> is less than <m>8</m>.</q>
          <idx><h>less-than symbol</h></idx>
      To help remember which symbol is the <q>less than</q> sign and which is the <q>greater than</q> sign,
      notice that you can make a <em>L</em>ess than sign with your <em>L</em>eft hand.
    </p>

    <p>
      <xref ref="table-comparison-symbols">Table</xref>
      gives the complete list of all six comparison symbols.
      Note that we've only discussed three in this section so far,
      but you already know the equals symbol and have likely also seen the symbol <q><m>\neq</m>,</q>
      which means <q>not equal to.</q>
    </p>

    <table xml:id="table-comparison-symbols">
      <title>Comparison Symbols</title>
      <tabular valign="bottom">
        <row bottom="medium">
          <cell>Symbol</cell>
          <cell>Means</cell>
          <cell>True</cell>
          <cell>True</cell>
          <cell>False</cell>
        </row>
        <row>
          <cell><m>=</m></cell>
          <cell>equals</cell>
          <cell><m>13=13</m></cell>
          <cell><m>\frac{5}{4}=1.25</m></cell>
          <cell><m>5\reject{=}6</m></cell>
        </row>
        <row>
          <cell><m>\gt</m></cell>
          <cell>is greater than</cell>
          <cell><m>13\gt11</m></cell>
          <cell><m>\pi\gt3</m></cell>
          <cell><m>9\reject{\gt}9</m></cell>
        </row>
        <row>
          <cell><m>\geq</m></cell>
          <cell>is greater than or equal to</cell>
          <cell><m>13\geq11</m></cell>
          <cell><m>3\geq3</m></cell>
          <cell><m>10.2\reject{\geq}11.2</m></cell>
        </row>
        <row>
          <cell><m>\lt</m></cell>
          <cell>is less than</cell>
          <cell><m>-3\lt8</m></cell>
          <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
          <cell><m>2\reject{\lt}-2</m></cell>
        </row>
        <row>
          <cell><m>\leq</m></cell>
          <cell>is less than or equal to</cell>
          <cell><m>-3\leq8</m></cell>
          <cell><m>3\leq3</m></cell>
          <cell><m>\frac{4}{5}\reject{\leq}\frac{3}{5}</m></cell>
        </row>
        <row>
          <cell><m>\neq</m></cell>
          <cell>is not equal to</cell>
          <cell><m>10\neq20</m></cell>
          <cell><m>\frac{1}{2}\neq1.2</m></cell>
          <cell><m>\frac{3}{8}\reject{\neq}0.375</m></cell>
        </row>
      </tabular>

    </table>
  </subsection>

  <subsection>
    <title>Set-Builder and Interval Notation</title>
    <p>
      If you say
      <me>
        (\text{age of a voter})\geq18
      </me>
      and have a particular voter in mind,
      what is that person's age?
      <em>Maybe</em> they are <m>18</m>, but maybe they are older.
      It's helpful to use a variable <m>a</m> to represent age
      (in years)
      and then to visualize the possibilities with a number line,
      as in <xref ref="figure-voters-age">Figure</xref>.
    </p>

    <figure xml:id="figure-voters-age">
      <caption><m>(\text{age of a voter})\geq18</m></caption>
      <image width="50%">
        <description>a number line, where the number 18 is marked; the portion of the number line to the right of 18 has a thick line overlaying it with an arrow pointing to the right; at 18, there is a left bracket character; text indicates the right area represents possibilities for age</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-5,xmax=35,
                                xtick={18},
                                xlabel={$a$},
                                minor xtick={-5,-4,...,35},
                                ]
                        \addplot+[closedinfiniteinterval] coordinates {(18,0) (36,0)} node[pos=0.5,above] {possibilities for age};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
      </image>

    </figure>

    <p>
      The shaded portion of the number line in <xref ref="figure-voters-age">Figure</xref>
      is a mathematical <term>interval</term>.
      For now, that just means a collection of certain numbers.
      In this case, it's all the numbers <m>18</m> and above.
    </p>

    <p>
      The number line in <xref ref="figure-voters-age">Figure</xref> is a <em>graphical</em>
      representation of a collection of certain numbers.
      We have two notations, set-builder notation and interval notation,
      that we also use to represent such collections of numbers.
    </p>

    <!-- <p>
      It's one thing to say <m>(\text{age of a voter})\geq18</m>,
      and another thing to discuss <em>all the shaded numbers</em>
      in the interval in <xref ref="figure-voters-age">Figure</xref>.
      In mathematics, <me>(\text{age of a voter})\geq18</me> is saying
      that there is <em>one</em> age under consideration and all we know is that it's <em>18</em> or larger.
      It's subtle, but this is not the same thing as the <em>collection</em>
      of <em>all</em> numbers that are <m>18</m> or larger.
      Mathematics has two common ways to write down these kinds of collections.
    </p> -->

    <definition xml:id="definition-set-builder-notation">
      <title>Set-Builder Notation</title>
      <idx><h>set-builder notation</h></idx>
      <statement>
        <p>
          Set-builder notation attempts to directly tell you the condition that numbers in the interval satisfy.
          In general, we write set-builder notation like:
          <me>
            \left\{x\mid\text{condition on }x\right\}
          </me>
          and read it out loud as <q>the set of all <m>x</m> such that <ellipsis />.</q> For example,
          <me>
            \left\{x\mid x\geq18\right\}
          </me>
          is read out loud as <q>the set of all <m>x</m> such that <m>x</m> is greater than or equal to <m>18</m>.</q>
          The breakdown is as follows.
        </p>
        <tabular>
          <row>
            <cell><m>\highlight{\{}\lowlight{x\mid x\geq18}\highlight{\}}</m></cell>
            <cell>the set of</cell>
          </row>
          <row>
            <cell><m>\lowlight{\{}\highlight{x}\lowlight{{}\mid x\geq18\}}</m></cell>
            <cell>all <m>x</m></cell>
          </row>
          <row>
            <cell><m>\lowlight{\{x}\highlight{{}\mid{}}\lowlight{x\geq18\}}</m></cell>
            <cell>such that</cell>
          </row>
          <row>
            <cell><m>\lowlight{\{x\mid{}}\highlight{x\geq18}\lowlight{\}}</m></cell>
            <cell><m>x</m> is greater than or equal to <m>18</m></cell>
          </row>
        </tabular>
      </statement>
    </definition>

    <definition xml:id="definition-interval-notation">
      <title>Interval Notation</title>
      <idx><h>interval notation</h></idx>
      <statement>
        <p>
          Interval notation describes a collection of numbers
          by telling you where the collection <q>starts</q> and <q>stops</q>.
          For example, in <xref ref="figure-voters-age">Figure</xref>,
          the interval starts at <m>18</m>.
          To the right, the interval extends forever and has no end,
          so we use the <m>\infty</m> symbol
          (meaning "infinity").
          This particular interval is denoted:
          <me>
            [18,\infty)
          </me>
          Why use <q><m>[</m></q> on one side and
          <q><m>)</m></q> on the other?
          The square bracket tells us that <m>18</m> <em>is</em>
          part of the interval and the round parenthesis tells us that <m>\infty</m> is <em>not</em>
          part of the interval. 
          (And how could it be, since <m>\infty</m> is not even a number?)
        </p>

        <p>
          There are four types of infinite intervals.
          Take note of the different uses of round parentheses and square brackets.
        </p>

        <sidebyside widths ="23% 23% 23% 23%" margins="0%">
          <figure>
            <caption>An <term>open, infinite</term> interval denoted by <m>(a,\infty)</m> means all numbers <m>a</m> or larger, <em>not</em> including <m>a</m>.</caption>
            <image>
              <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left parenthesis at a and an arrow on the right pointing right</description>

              <latex-image>
                <![CDATA[\begin{tikzpicture}
                  \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                width=100pt, %shrunken, because 4 in a row    
                                ]
                        \addplot[openinfiniteinterval] coordinates {(0,0) (1.5,0)};
                        \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                  \end{axis}
                \end{tikzpicture}]]>
              </latex-image>
            </image>
          </figure>

          <figure>
            <caption>A <term>closed, infinite</term> interval denoted by <m>[a,\infty)</m> means all numbers <m>a</m> or larger, <em>including</em> <m>a</m>.</caption>
            <image>
              <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left bracket at a and an arrow on the right pointing right</description>

              <latex-image>
                <![CDATA[\begin{tikzpicture}
                  \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                width=100pt, %shrunken, because 4 in a row    
                                ]
                        \addplot[closedinfiniteinterval] coordinates {(0,0) (1.5,0)};
                        \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                  \end{axis}
                \end{tikzpicture}]]>
              </latex-image>
            </image>
          </figure>

          <figure>
            <caption>An <term>open, infinite</term> interval denoted by <m>(-\infty,a)</m> means all numbers <m>a</m> or smaller, <em>not</em> including <m>a</m>.</caption>
            <image>
              <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right parenthesis at a and an arrow on the left pointing left</description>

              <latex-image>
                <![CDATA[\begin{tikzpicture}
                  \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                width=100pt, %shrunken, because 4 in a row    
                                ]
                        \addplot[infiniteopeninterval] coordinates {(-0.5,0) (1,0)};
                        \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                  \end{axis}
                \end{tikzpicture}]]>
              </latex-image>
            </image>
          </figure>

          <figure>
            <caption>A <term>closed, infinite</term> interval denoted by <m>(-\infty,a]</m> means all numbers <m>a</m> or smaller, <em>including</em> <m>a</m>.</caption>
            <image>
              <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right bracket at a and an arrow on the left pointing left</description>

              <latex-image>
                <![CDATA[\begin{tikzpicture}
                  \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                width=100pt, %shrunken, because 4 in a row    
                                ]
                        \addplot+[infiniteclosedinterval] coordinates {(-0.5,0) (1,0)};
                        \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                  \end{axis}
                \end{tikzpicture}]]>
              </latex-image>
            </image>
          </figure>
        </sidebyside>
      </statement>
    </definition>

    <exercise>
      <title>Interval and Set-Builder Notation from Number Lines</title>
      <webwork>
        <pg-code>
          InequalitySetBuilder::UseVerticalSuchThat();
          Context("InequalitySetBuilder-Only");
          $sb[0] = Compute("{ x | x &lt;= 2}");
          $sb[1] = Compute("{ x | x &lt;  2}");
          $sb[2] = Compute("{ x | x >=    2}");
          Context("Interval");
          Context()->flags->set("formatStudentAnswer"=>'parsed');
          $in[0] = Compute("(-inf, 2]");
          $in[1] = Compute("(-inf, 2)");
          $in[2] = Compute("[2,  inf)");
        </pg-code>
        <introduction>
          <p>
            For each interval expressed in the number lines,
            give the interval notation and set-builder notation.
          </p>
          <instruction>
            Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
          </instruction>
        </introduction>
        <task>
          <statement>
            <image width="40%">
              <latex-image>
                \begin{tikzpicture}
                  \begin{axis}
                    [
                      numberline,
                      xmin=-6,
                      xmax=6,
                      xlabel={\(x\)},
                    ]
                    \addplot[infiniteclosedinterval] coordinates {(-6,0) (2,0)};
                  \end{axis}
                \end{tikzpicture}
              </latex-image>
            </image>
            <instruction>
              Enter the answer in set-builder notation.
            </instruction>
            <p>
              <var name="$sb[0]" width="20" />
            </p>
            <instruction>
              Enter the answer in interval notation.
            </instruction>
            <p>
              <var name="$in[0]" width="20" />
            </p>
          </statement>
          <solution>
            <p>
              Since all numbers less than or equal to <m>2</m> are shaded,
              the set-builder notation is <m><var name="$sb[0]" /></m>.
              The shaded interval <q>starts</q>
              at <m>-\infty</m> and ends at <m>2</m>
              (including <m>2</m>)
              so the interval notation is <m><var name="$in[0]"/></m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <image width="40%">
              <latex-image>
                \begin{tikzpicture}
                  \begin{axis}
                    [
                      numberline,
                      xmin=-6,
                      xmax=6,
                      xlabel={\(x\)},
                    ]
                    \addplot[infiniteopeninterval] coordinates {(-6,0) (2,0)};
                  \end{axis}
                \end{tikzpicture}
              </latex-image>
            </image>
            <instruction>
              Enter the answer in set-builder notation.
            </instruction>
            <p>
              <var name="$sb[1]" width="20" />
            </p>
            <instruction>
              Enter the answer in interval notation.
            </instruction>
            <p>
              <var name="$in[1]" width="20" />
            </p>
          </statement>
          <solution>
            <p>
              Since all numbers less than to <m>2</m> are shaded,
              the set-builder notation is <m><var name="$sb[1]" /></m>.
              The shaded interval <q>starts</q>
              at <m>-\infty</m> and ends at <m>2</m>
              (excluding <m>2</m>)
              so the interval notation is <m><var name="$in[1]"/></m>.
            </p>
          </solution>
        </task>
        <task>
          <statement>
            <image width="40%">
              <latex-image>
                \begin{tikzpicture}
                  \begin{axis}
                    [
                      numberline,
                      xmin=-6,
                      xmax=6,
                      xlabel={\(x\)},
                    ]
                    \addplot[closedinfiniteinterval] coordinates {(2,0) (6,0)};
                  \end{axis}
                \end{tikzpicture}
              </latex-image>
            </image>
            <instruction>
              Enter the answer in set-builder notation.
            </instruction>
            <p>
              <var name="$sb[2]" width="20" />
            </p>
            <instruction>
              Enter the answer in interval notation.
            </instruction>
            <p>
              <var name="$in[2]" width="20" />
            </p>
          </statement>
          <solution>
            <p>
              Since all numbers greater than or equal to <m>2</m> are shaded,
              the set-builder notation is <m><var name="$sb[2]" /></m>.
              The shaded interval starts at <m>2</m>
              (including <m>2</m>)
              and <q>ends</q> at <m>\infty</m>,
              so the interval notation is <m><var name="$in[2]"/></m>.
            </p>
          </solution>
        </task>
      </webwork>
    </exercise>

    <remark>
      <title>Alternative Convention for Sketching Intervals</title>
      <p>
        When graphing an interval, an alternative convention is to use open circles and filled-in circles. An open circle can be used in place of a round parenthesis, and a filled-in circle can be used in place of a square bracket, as in this example which corresponds to the interval <m>(a,b]</m>.
      </p>

      <image width="47%">
        <description>a number line with marks at a and b; the portion of the number line between a and b has a thick line overlaying it; there is a hollow dot at a and solid dot at b</description>
        <latex-image>
          <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-0.5,xmax=1.5,
                          ticks=none,
                          after end axis/.code={},
                          ]
                  \addplot[closedopeninterval,o-*] coordinates {(-0.5,0) (1,0)};
                  \addplot[mark=none] coordinates {(1,0)} node[below] {$b$};
                  \addplot[mark=none] coordinates {(-0.5,0)} node[below] {$a$};
              \end{axis}
          \end{tikzpicture}]]>
        </latex-image>
      </image>
    </remark>
  </subsection>

  <reading-questions>
    <exercise>
      <statement>
        <p>
          How many inequality symbols are there?
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          What is the difference between the interval <m>[3,\infty)</m>
          and the interval <m>(3,\infty)</m>?
          More generally, what do square brackets and round parentheses mean
          in the context of interval notation?
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The set of numbers <m>\{x\mid x\leq10\}</m> is being expressed
          using <fillin characters="11"/> notation.
        </p>
      </statement>
    </exercise>
  </reading-questions>



  <exercises>
    <subexercises>
      <title>Review and Warmup</title>
      <exercisegroup cols="2">
        <introduction>
          <p>
            Write the decimal number as a fraction.
          </p>
        </introduction>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction30.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction30.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction35.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction35.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction40.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/DecimalToFraction40.pg" />
        </exercise>
      </exercisegroup>
      <exercisegroup cols="2">
        <introduction>
          <p>
            Write the fraction as a decimal number.
          </p>
        </introduction>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/FractionToDecimal60.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/FractionToDecimal60.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/FractionToDecimal70.pg" />
        </exercise>
        <exercise>
          <webwork source="Contrib/PCC/BasicMath/FractionPercentDecimal/FractionToDecimal70.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>

    <subexercises>
      <title>Skills Practice</title>
      <exercisegroup cols="2">
        <title>Ordering Numbers</title>
        <introduction>
          <p>
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <m>4 \gt 3 \gt 2 \gt 1 \gt 0</m>.
          </p>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-ordering-integers">
            <pg-code>
              @a=map{$_-10}NchooseK(21,5);
              Context()->texStrings;
              $as='{'.join('}\quad{',@a).'}';
              Context()->normalStrings;
              @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
              $bs=join('>',@b);
              package context::Ordering::BOP::ordering;
              *isOrdering = sub {
                  my $self = shift; my $obj = shift; my $class = $obj->class;
                  return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
              };
              package main;
              Context("Ordering");
              Context()->operators->add(
              '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                      class => 'Parser::BOP::subtract', rightparens => 'same'},
              '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                      class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
              );
              $comparison=Compute("$bs");
            </pg-code>
            <statement>
              <p>
                <me>
                  <var name="$as" />
                </me>
              </p>
              <p>
                <var name="$comparison" width="30" />
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-ordering-integers"/>
        </exercise>
        <exercise>
          <webwork xml:id="webwork-ordering-decimals">
            <pg-code>
              @a=map{($_-10)+random(0,0.8,0.2)+random(0,0.09,0.01)}NchooseK(19,4);
              if($a[1]&lt;0){$a[4]=$a[1]+0.1;}
              elsif($a[1]=-$a[0]){$a[4]=$a[0]+0.1;}
              elsif($a[1]=-$a[2]){$a[4]=$a[2]+0.1;}
              elsif($a[1]=-$a[3]){$a[4]=$a[3]+0.1;};
              Context()->texStrings;
              $as='{'.join('}\quad{',@a).'}';
              Context()->normalStrings;
              @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
              $bs=join('>',@b);
              package context::Ordering::BOP::ordering;
              *isOrdering = sub {
                  my $self = shift; my $obj = shift; my $class = $obj->class;
                  return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
              };
              package main;
              Context("Ordering");
              Context()->operators->add(
              '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                      class => 'Parser::BOP::subtract', rightparens => 'same'},
              '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                      class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
              );
              $comparison=Compute("$bs");
            </pg-code>
            <statement>
              <p>
                <me>
                  <var name="$as" />
                </me>
              </p>
              <p>
                <var name="$comparison" width="30" />
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-ordering-decimals"/>
        </exercise>
        <exercise>
          <webwork xml:id="webwork-ordering-fractions">
            <pg-code>
              @d=(random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1));
              Context("Fraction");
              $a[0]=Fraction(random(-1,1,2)*random(1,$d[0]*9,1),$d[0]);
              do{$a[1]=Fraction(random(-1,1,2)*random(1,$d[1]*9,1),$d[1]);}until($a[1]!=$a[0]);
              do{$a[2]=Fraction(random(-1,1,2)*random(1,$d[2]*9,1),$d[2]);}until($a[2]!=$a[0] and $a[2]!=$a[1]);
              do{$a[3]=Fraction(random(-1,1,2)*random(1,$d[3]*9,1),$d[3]);}until($a[3]!=$a[0] and $a[3]!=$a[1] and $a[3]!=$a[2]);
              do{$a[4]=Fraction(random(-1,1,2)*random(1,$d[4]*9,1),$d[4]);}until($a[4]!=$a[0] and $a[4]!=$a[1] and $a[4]!=$a[2] and $a[4]!=$a[3]);
              Context()->texStrings;
              $as='{'.join('}\quad{',@a).'}';
              Context()->normalStrings;
              @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
              $bs=join('>',@b);
              package context::Ordering::BOP::ordering;
              *isOrdering = sub {
                  my $self = shift; my $obj = shift; my $class = $obj->class;
                  return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
              };
              package main;
              Context("Ordering");
              Context()->operators->add(
              '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                      class => 'Parser::BOP::subtract', rightparens => 'same'},
              '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                      class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
              );
              $comparison=Compute("$bs");
            </pg-code>
            <statement>
              <p>
                <me>
                  <var name="$as" />
                </me>
              </p>
              <p>
                <var name="$comparison" width="30" />
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-ordering-fractions"/>
        </exercise>
        <exercise>
          <webwork xml:id="webwork-ordering-with-specials">
            <pg-code>
              @c=map{$_-10}NchooseK(21,4);
              Context("Fraction");
              @d=map{$_+3}NchooseK(7,2);
              $c[2]=Fraction($d[0]*$a[2]+random(1,$d[0]-1,1),$d[0]);
              do {$c[3]=Fraction($d[1]*$a[3]+random(1,$d[1]-1,1),$d[1])} until ($c[2] != $c[3]);
              Context()->flags->set(reduceConstants=>0,reduceConstantFunctions=>0);
              @irrationals=(Formula("pi"),Formula("pi/2"),Formula("sqrt(2)"),Formula("sqrt(3)"));
              ($c[4],$c[5])=(@irrationals)[NchooseK(4,2)];
              @a=(@c)[NchooseK(6,6)];
              Context()->texStrings;
              $as='{'.join('}\quad{',@a).'}';
              Context()->normalStrings;
              @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
              $bs=join('>',@b);
              package context::Ordering::BOP::ordering;
              *isOrdering = sub {
                  my $self = shift; my $obj = shift; my $class = $obj->class;
                  return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
              };
              package main;
              Context("Ordering");
              Context()->operators->add(
              '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                      class => 'Parser::BOP::subtract', rightparens => 'same'},
              '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              ' /' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              '/ ' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                      class => 'Parser::BOP::divide', space => ' /',
                      rightparens => 'all', leftparens => 'extra', fullparens => 1},
              'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                      class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
              );
              Context()->functions->add('sqrt' => {class => 'Parser::Function::numeric', braceTeX => 1, TeX => '\sqrt'});
              Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
              $comparison=Compute("$bs");
            </pg-code>
            <statement>
              <p>
                <me>
                  <var name="$as" />
                </me>
              </p>
              <instruction>
                If you need to enter <m>pi</m>, type <c>pi</c>. If you need to enter a square root, such as <m>\sqrt{17}</m>, type it like <c>sqrt(17)</c>.
              </instruction>
              <p>
                <var name="$comparison" width="30" />
              </p>
            </statement>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-ordering-with-specials"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>True/False</title>
        <introduction>
          <p>
            Decide if each comparison is true or false.
          </p>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-true-false-integer-comparisons">
            <pg-code>
              #randomizes from 12, only presents 6
              ($left[1],$left[3],$left[5],$left[7],$left[9],$left[11])=map{$_-10}(NchooseK(20,6));
              ($right[1],$right[3],$right[5],$right[7],$right[9],$right[11])=($left[1],$left[3],$left[5],$left[7],$left[9],$left[11]);
              ($left[0],$right[0])=map{$_-10}(NchooseK(20,2));
              ($left[2],$right[2])=map{$_-10}(NchooseK(20,2));
              ($left[4],$right[4])=map{$_-10}(NchooseK(20,2));
              ($left[6],$right[6])=map{$_-10}(NchooseK(20,2));
              ($left[8],$right[8])=map{$_-10}(NchooseK(20,2));
              ($left[10],$right[10])=map{$_-10}(NchooseK(20,2));
              @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
              @j=NchooseK(12,12);
              @statement=map{$left[$j[$_]].$comp[$j[$_]].$right[$j[$_]]}(0..11);
              $True=PopUp(["?","True","False"],"True");
              $False=PopUp(["?","True","False"],"False");
              for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
              for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
              for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
              for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
              for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
              for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
              for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </statement>
            </task>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-true-false-integer-comparisons"/>
        </exercise>
        <exercise>
          <webwork xml:id="webwork-true-false-fraction-comparisons">
            <pg-code>
              #randomizes from 12, only presents 6
              ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
              Context("Fraction");
              Context()->flags->set(reduceFractions=>0);
              for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                  $ld[$i]=random(2,9,1);
                  $left[$i]=Fraction($ln[$i],$ld[$i]);
                  $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
              for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                  $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                  $rd[$i]=random(2,9,1);
                  $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
              @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
              @j=NchooseK(12,12);
              @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
              $True=PopUp(["?","True","False"],"True");
              $False=PopUp(["?","True","False"],"False");
              for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
              for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
              for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
              for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
              for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
              for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
              for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <p>
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </statement>
            </task>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-true-false-fraction-comparisons"/>
        </exercise>
      </exercisegroup>

      <exercisegroup cols="2">
        <title>Comparisons</title>
        <introduction>
          <p>
            Choose <m>\lt</m>, <m>\gt</m>, or <m>=</m> to make a true statement.
          </p>
        </introduction>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
        </exercise>
      </exercisegroup>

      <exercisegroup>
        <title>Set-builder and Interval Notation</title>
        <introduction>
          <p>
            For each interval expressed in the number lines, give the interval notation and set-builder notation.
          </p>
          <instruction>
            Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
          </instruction>
        </introduction>
        <exercise>
          <webwork xml:id="webwork-read-interval-on-number-line">
            <pg-code>
              ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
              ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
              %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
              %right=(oi=>')',ci=>')',io=>')',ic=>']');
              @type=('oi','ci','io','ic')[NchooseK(4,3)];
              @ticks = ();
              for my $j (-5..5) {push(@ticks,$j);};
              for my$i(0,1,2){
              $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(5.5,0,'black',1);
              $nl[$i]->moveTo(0,0);
              $nl[$i]->arrowTo(-5.5,0,'black',1);
              $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
              for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
              $nl[$i]->h_ticks(0,'black',@ticks);
              };
              $shadingoffset = 0.5;
              @alt = ();
              for my$i(0..2){
              if($type[$i]eq'oi' or $type[$i]eq'ci'){
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($a[$i],$shadingoffset);
                $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                $alt[$i] = "A number line with a shaded part where an arrow extends forever to the right.";
              }else{
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                $nl[$i]->moveTo($b[$i],$shadingoffset);
                $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                $alt[$i] = "A number line with a shaded part where an arrow extends forever to the left.";
              };
              if($type[$i]eq'oi') {
                      $nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));
                      $alt[$i] .= " The shaded part is capped at $a[$i] on the number line with a left parenthesis.";
              } elsif($type[$i]eq'ci') {
                      $nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));
                      $alt[$i] .= " The shaded part is capped at $a[$i] on the number line with a left bracket.";
              } elsif($type[$i]eq'io') {
                      $nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));
                      $alt[$i] .= " The shaded part is capped at $b[$i] on the number line with a right parenthesis.";
              } else {
                      $nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));
                      $alt[$i] .= " The shaded part is capped at $b[$i] on the number line with a right bracket.";
              }
              };
              InequalitySetBuilder::UseVerticalSuchThat();
              Context("InequalitySetBuilder-Only");
              for my$i(0..2){
              if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
              elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
              elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
              else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
              };
              Context("Interval");
              Context()->flags->set("formatStudentAnswer"=>'parsed');
              for my$i(0..2){
              if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
              elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
              elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
              else{$in[$i]=Compute("(-inf,$b[$i]]");}
              };
            </pg-code>
            <task>
              <statement>
                <image pg-name="$nl[0]" width="40%">
                  <description><var name="$alt[0]"/></description>
                </image>
                <p>
                  In set-builder notation: <var name="$sb[0]" width="20" />
                </p>
                <p>
                  In interval notation: <var name="$in[0]" width="20" />
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <image pg-name="$nl[1]" width="40%">
                  <description><var name="$alt[1]"/></description>
                </image>
                <p>
                  In set-builder notation: <var name="$sb[1]" width="20" />
                </p>
                <p>
                  In interval notation: <var name="$in[1]" width="20" />
                </p>
              </statement>
            </task>
            <task>
              <statement>
                <image pg-name="$nl[2]" width="40%">
                  <description><var name="$alt[2]"/></description>
                </image>
                <p>
                  In set-builder notation: <var name="$sb[2]" width="20" />
                </p>
                <p>
                  In interval notation: <var name="$in[2]" width="20" />
                </p>
              </statement>
            </task>
          </webwork>
        </exercise>
        <exercise>
          <webwork copy="webwork-read-interval-on-number-line"/>
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
        </exercise>
      </exercisegroup>

      <exercisegroup cols="4">
        <title>Convert to Interval Notation</title>
        <introduction>
          <p>
            A set is written using set-builder notation. Write it using interval notation.
          </p>
        </introduction>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation110.pg" />
        </exercise>
        <exercise>
          <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation120.pg" />
        </exercise>
      </exercisegroup>
    </subexercises>
  </exercises>

  <!-- <worksheet>
    <author>Ann Cary</author>
    <p>
      This worksheet has the exercises that are worked out in
      <xref ref="video-comparison-symbols-and-notation-for-intervals">Video</xref>.
    </p>
    <exercise workspace="40%">
      <statement>
        <p>
          List the four inequality symbols, write what each means in words, and then list one or two numerical examples showing how each can be used.
        </p>
        <sidebyside widths="33% 33% 33%" margins="0%">
          <p>Inequality Symbol</p>
          <p>Meaning in Words</p>
          <p>Examples</p>
        </sidebyside>
      </statement>
    </exercise>
    <exercise workspace="25%">
      <statement>
        <p>
          What is a linear inequality? How is it different from an equation? How is it similar to an equation?
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          In each blank provided, determine if the symbol <m>\lt</m>, <m>\gt</m>, or <m>=</m> makes the statement true.
          <ol cols="3">
            <li>
              <p>
                <m>\frac{3}{2}<fillin characters="3"/>1.5</m>
              </p>
            </li>
            <li>
              <p>
                <m>-4<fillin characters="3"/>-7</m>
              </p>
            </li>
            <li>
              <p>
                <m>\frac{2}{5}<fillin characters="3"/>\frac{4}{9}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <pagebreak/>
    <exercise>
      <statement>
        <p>
          In each blank provided, determine if the symbol <m>\lt</m>, <m>\gt</m>, or <m>=</m> makes the statement true.
          <ol cols="3">
            <li>
              <p>
                <m>2<fillin characters="3"/>\frac{7}{4}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\abs{-3}<fillin characters="3"/>3</m>
              </p>
            </li>
            <li>
              <p>
                <m>\frac{5}{9}<fillin characters="3"/>\frac{2}{3}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Represent each inequality in various ways.
        </p>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p>Inequality</p>
          <p>Graph</p>
          <p>Interval Notation</p>
          <p>Set-Builder Notation</p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>x\gt-4</m></p>
          <image>
            <latex-image>
              \begin{tikzpicture}
                  \begin{axis}[numberline]
                  \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>x\lt3</m></p>
          <image>
            <latex-image>
              \begin{tikzpicture}
                  \begin{axis}[numberline]
                  \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>x\geq1</m></p>
          <image>
            <latex-image>
              \begin{tikzpicture}
                  \begin{axis}[numberline]
                  \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>x\leq2</m></p>
          <image>
            <latex-image>
              \begin{tikzpicture}
                  \begin{axis}[numberline]
                  \end{axis}
              \end{tikzpicture}
            </latex-image>
          </image>
          <p></p>
          <p></p>
        </sidebyside>
      </statement>
    </exercise>
  </worksheet>

  <worksheet>
    <author>Cara Lee</author>
    <exercise>
      <statement>
        <p>
          Write <m>\lt</m>, <m>\gt</m>, or <m>=</m> to make a true statement.
          <ol cols="3">
            <li>
              <m>1<fillin characters="3"/>-2</m>
            </li>
            <li>
              <m>-\frac{1}{3}<fillin characters="3"/>\frac{2}{5}</m>
            </li>
            <li>
              <m>\frac{1}{3}\cdot\frac{1}{4}<fillin characters="3"/>\frac{1}{3}+\frac{1}{4}</m>
            </li>
            <li>
              <m>\frac{1}{3}<fillin characters="3"/>0.3</m>
            </li>
            <li>
              <m>-\abs{-7}<fillin characters="3"/>\abs{-7}</m>
            </li>
            <li>
              <m>\frac{1}{4}<fillin characters="3"/>0.25</m>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Write whether each comparison is true or false.
          <ol cols="3">
            <li>
              <p><m>-4.5\neq-\frac{9}{2}</m></p>
            </li>
            <li>
              <p><m>-1\leq0</m></p>
            </li>
            <li>
              <p><m>-3\,\frac{1}{4}\leq-3\,\frac{1}{2}</m></p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise workspace="10%">
      <statement>
        <p>
          Use the <m>\gt</m> symbol to arrange the following numbers
          in order from greatest to least: <m>2.5,-\frac{3}{4},\sqrt{16},0,-2</m>.
        </p>
      </statement>
    </exercise>
    <p>
      You buy a lottery ticket for $2.
      Consider your net winnings, including the cost of the ticket.
      What are all the possibilities for your net winnings?
    </p>
    <exercise workspace="20%">
      <statement>
        <p>
          State this in words and symbols. Then define and use a variable.
        </p>
      </statement>
    </exercise>
    <exercise workspace="20%">
      <statement>
        <p>
          Draw a number line representing the quantity.
        </p>
      </statement>
    </exercise>
    <pagebreak/>
    <exercise>
      <statement>
        <p>
          For each inequality, draw the number line graph
          and write the interval and set-builder notation.
        </p>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p>Inequality</p>
          <p>Number Line Graph</p>
          <p>Interval</p>
          <p>Set-Builder Notation</p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>t\lt4</m></p>
          <p></p>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>x\geq-5</m></p>
          <p></p>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>r\gt\frac{1}{2}</m></p>
          <p></p>
          <p></p>
          <p></p>
        </sidebyside>
        <sidebyside margins="0%" widths="12% 48% 15% 15%">
          <p><m>y\leq-2.5</m></p>
          <p></p>
          <p></p>
          <p></p>
        </sidebyside>
      </statement>
    </exercise>
  </worksheet> -->
</section>

