<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section permid="ZZC" xml:id="section-comparison-symbols-and-notation-for-intervals">
  <title>Comparison Symbols and Notation for Intervals</title>
  <objectives permid="DAA">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="AFU">
      <li permid="dSx">
        <xref ref="mth60-order-real-numbers-on-number-line" />
      </li>
    </ul>
  </objectives>

  <introduction permid="jHJ">
    <p permid="YrG">
      As you know, <m>8</m> is larger than <m>3</m>;
      that's a specific comparison between two numbers.
      We can also make a comparison between two less specific numbers,
      like if we say that average rent in Portland in 2016 is larger than it was in 2009.
      That makes a comparison using unspecified amounts.
      This section will go over the mathematical shorthand notation for making these kinds of comparisons.
    </p>

    <figure permid="kFY">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-fkLe_JgvfS8l8VO8DuBS4W" />
    </figure>

    <p permid="EyP">
      In Oregon, only people who are <m>18</m> years old or older can vote in statewide elections.<fn>
      Some other states like Washington allow 17-year-olds to vote in primary elections provided they will be 18 by the general election.
      </fn> Does that seem like a statement about the number <m>18</m>?
      Maybe.
      But it's also a statement about numbers like <m>37</m> and <m>62</m>:
      it says that people of these ages may vote as well.
      This section will also get into the mathematical notation for large collections of numbers like this.
    </p>
  </introduction>

  <subsection permid="GgL">
    <title>Comparison Symbols</title>
    <p permid="ivm">
      In everyday language you can say something like
      <q><m>8</m> is larger than <m>3</m>.</q> In mathematical writing,
      it's not convenient to write that out in English.
      Instead the symbol <q><m>\gt</m></q>
      has been adopted, and it's used like this:
      <me permid="QrI">
        8\gt3
      </me>
      and read out loud as <q><m>8</m> is greater than <m>3</m>.</q>
      The symbol <q><m>\gt</m></q>
      is called the <term>greater-than symbol.</term>
          <idx><h>greater-than symbol</h></idx>
    </p>

    <exercise permid="vHG">
      <webwork >
      <setup>

            <pg-code>
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->strings->add('age'=>{isLetter => 1,TeX=>'\text{age}'});
                Context()->strings->add('a'=>{isLetter => 1,TeX=>'\text{a}'});
                Context()->strings->add('x'=>{isLetter => 1,TeX=>'\text{x}'});
                $overage=OneOf(Compute("age>20"),Compute("a>20"),Compute("x>20"));
            </pg-code>
      </setup>
      <statement>
        <p permid="QNh">
          <ol permid="gNd" label="a.">
            <li permid="JZG">
              <p permid="vAC">
                Use mathematical notation to write
                <q><m>11.5</m> is greater than <m>4.2</m>.</q>
              </p>

              <p permid="bHL">
                <var name="'11.5>4.2'" width="15" />
              </p>
            </li>

            <li permid="qgP">
              <p permid="HOU">
                Use mathematical notation to write
                <q>age is greater than <m>20</m>.</q>
              </p>

              <p permid="nWd">
                <var name="$overage" width="15" />
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="POS">
        <p permid="WCt">
          <ol permid="orC" label="a.">
            <li permid="WnY">
              <p permid="Udm">
                <m>11.5\gt4.2</m>
              </p>
            </li>

            <li permid="Cvh">
              <p permid="Akv">
                We can just write the word <c>age</c> to represent age,
                and write <m>\text{age}\gt20</m>.
                Or we could use an abbreviation like <m>a</m> for age,
                and write <m>a\gt20</m>.
                Or, it is common to use <m>x</m> as a generic abbreviation,
                and we could write <m>x\gt20</m>.
              </p>
            </li>
          </ol>
        </p>
      </solution>
      </webwork>
    </exercise>

    <remark>
      <p permid="OCv">
        At some point in history,
        someone felt that <m>\gt</m> was a good symbol for
        <q>is greater than.</q> In <q><m>8\gt3</m>,</q>
        the tall side of the symbol is with the larger of the two numbers,
        and the small pointed side is with the smaller of the two numbers.
      </p>
    </remark>

    <aside>
      <title>Alligator Jaws</title>
      <p permid="uJE">
        Another visual was of thinking about the greater-than symbol <q><m>\gt</m></q>
        (and, as we will see later,
        the less-than symbol <q><m>\lt</m></q>) is
        <q>the alligator wants to eat the larger number</q>
        as a way of remembering which direction to write the symbol.
      </p>
    </aside>
    <p permid="aQN">
      We have to be careful when negative numbers are part of the comparison though.
      Is <m>-8</m> larger or smaller than <m>-3</m>?
      In some sense <m>-8</m> is larger,
      because if you owe someone <m>8</m> dollars,
      that's <em>more</em> than owing them <m>3</m> dollars.
      But that is not how the <m>\gt</m> symbol works.
      This symbol is meant to tell you which number is farther to the right on a number line.
      And if that's how it goes, then <m>-3\gt-8</m>.
    </p>

    <figure permid="LHP">
      <caption>How the <m>\gt</m> symbol works.</caption>
      <image permid="CXX" width="50%">
        <description>a number line with marks at -8, -3, and 8; text indicates the numbers to the left are lesser numbers, and numbers to the right are greater numbers; text indicates that -3 > -8 and 8 > -3</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xtick={-8,-3,3,8},
                                ]
                        \addplot[soliddot] coordinates {(-8,0)};
                        \addplot[soliddot] coordinates {(-3,0)};
                        \addplot[soliddot] coordinates {(8,0)};
                        \node[above] at (axis cs: -5.5,1) {$-3>-8$};
                            \draw[<-](axis cs: -7.5,0.2) --(axis cs: -5.5,1);
                            \draw[<-](axis cs: -3.5,0.2) --(axis cs: -5.5,1);
                        \node[above] at (axis cs: 2.5,1) {$8>-3$};
                            \draw[<-](axis cs: 6.9,0.2) --(axis cs: 2.5,1);
                            \draw[<-](axis cs: -1.9,0.2) --(axis cs: 2.5,1);
                        \node[above] at (axis cs: 11,0) {\parbox{9ex}{greater numbers}};
                        \node[above] at (axis cs: -11,0) {\parbox{9ex}{lesser numbers}};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
      </image>

    </figure>

    <exercise permid="bOP">
      <webwork seed="1">
          <setup>

            <pg-code>
                @a=(-7.6,6,-6,9.5,8);
                $as='{'.join('}\quad{',@a).'}';
                @b=PGsort(sub{$_[0]&gt;$_[1]},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
                $numberline=init_graph(-12,-1,12,1,size=>[240,60]);
                $numberline->moveTo(-12,0);
                $numberline->lineTo(12,0,'black');
                for my$i(-12..12){$numberline->moveTo($i,-0.2);$numberline->lineTo($i,0.2,'black');};
                $numberline->lb(new Label(0,-0.2,"0",'black','center','top','large'));
                for my$i(0,2,4){$numberline->lb(new Label($b[$i],-0.4,"$b[$i]",'blue','center','top','large'));$numberline->moveTo($b[$i],0);$numberline->lineTo($b[$i],-0.4);};
                for my$i(1,3){$numberline->lb(new Label($b[$i],0.4,"$b[$i]",'blue','center','bottom','large'));$numberline->moveTo($b[$i],0);$numberline->lineTo($b[$i],0.4);};
            </pg-code>
          </setup>
          <statement>
            <p permid="wUq">
              Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
              For example,
              your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
            </p>

            <p permid="dbz">
              <me permid="wyR">
                <var name="$as" />
              </me>
            </p>

            <p permid="JiI">
              <var name="$comparison" width="30" />
            </p>
          </statement>
          <solution permid="vWb">
            <p permid="CJC">
              We can order these numbers by placing these numbers on a number line.
            </p>

            <sidebyside permid="jto" margins="0%" widths="40%">
              <image permid="gkA" pg-name="$numberline"/>
            </sidebyside>

            <p permid="iQL">
              And so we see the answer is <m><var name="$comparison" /></m>.
            </p>
          </solution>
      </webwork>
    </exercise>

    <exercise permid="HVY">
      <webwork >
      <setup>

            <pg-code>
                Context("Fraction");
                Context()->flags->set(reduceConstants=>0);
                @a=(-5.2,Formula("pi"),Fraction(10,3),4.6,8);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                @c=map{Real("$_")}(@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                $comparison=Compute("$bs");
                $numberline=init_graph(-12,-1,12,1,size=>[240,60]);
                $numberline->moveTo(-12,0);
                $numberline->lineTo(12,0,'black');
                for my$i(-12..12){$numberline->moveTo($i,-0.2);$numberline->lineTo($i,0.2,'black');};
                $numberline->lb(new Label(0,-0.2,"0",'black','center','top','large'));
                for my$i(0,2,4){$numberline->lb(new Label($c[$i],-0.4,"$b[$i]",'blue','center','top','large'));$numberline->moveTo($c[$i],0);$numberline->lineTo($c[$i],-0.4);};
                $numberline->lb(new Label($c[1],0.4,"$b[1]",'blue','center','bottom','large'));$numberline->moveTo($c[1],0);$numberline->lineTo($c[1],0.4);
                $numberline->lb(new Label($c[3],0.4,"$b[3]",'blue','right','bottom','large'));$numberline->moveTo($c[3],0);$numberline->lineTo($c[3],0.4);
                $refreshCachedImages=1;
            </pg-code>
      </setup>
      <statement>
        <p permid="ppR">
          Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
          For example,
          your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
        </p>

        <p permid="Vxa">
          <me permid="cGa">
            <var name="$as" />
          </me>
        </p>

        <p permid="BEj">
          <var name="$comparison" width="30" />
        </p>
      </statement>
      <solution permid="cdk">
        <p permid="OXU">
          We can order these numbers by placing these numbers on a number line.
          Knowing or computing their decimals helps with this.
        </p>

        <sidebyside permid="PAx" margins="0%" widths="40%">
          <image pg-name="$numberline"/>
        </sidebyside>

        <p permid="vfd">
          And so we see the answer is <m><var name="$comparison" /></m>.
        </p>
      </solution>
      </webwork>
    </exercise>

    <p permid="GXW">
      The greater-than symbol has a close relative,
      the <term>greater-than-or-equal-to symbol</term>,
      <q><m>\geq</m>.</q><idx><h>greater-than-or-equal-to symbol</h></idx> It means just like it sounds:
      the first number is either greater than,
      or equal to, the second number.
      These are all true statements:
      <md permid="INj">
        <mrow>8\amp\geq3\amp3\amp\geq-8\amp3\amp\geq3</mrow>
      </md>
      but one of these three statements is false:
      <md permid="oUs">
        <mrow>8\amp\gt3\amp3\amp\gt-8\amp3\amp\stackrel{\text{no}}{\gt}3</mrow>
      </md>
    </p>

    <remark>
      <p permid="nff">
        While it may not be that useful that we can write <m>3\geq3</m>,
        this symbol is quite useful when specific numbers aren't explicitly used on at least one side,
        like in these examples:
        <md permid="VbB">
          <mrow>(\text{hourly pay rate})\amp\geq(\text{minimum wage})</mrow>
          <mrow>(\text{age of a voter})\amp\geq18</mrow>
        </md>
      </p>
    </remark>

    <p permid="Tmo">
      Sometimes you want to emphasize that one number is <em>less than</em>
      another number instead of emphasizing which number is greater.
      To do this, we have symbols that are reversed from <m>\gt</m> and <m>\geq</m>.
      The symbol <q><m>\lt</m></q> is the
      <term>less-than symbol</term> and it's used like this:
      <me permid="BiK">
        3\lt8
      </me>
      and read out loud as <q><m>3</m> is less than <m>8</m>.</q>
          <idx><h>less-than symbol</h></idx>
    </p>

    <p permid="ztx">
      <xref ref="table-comparison-symbols">Table</xref>
      gives the complete list of all six comparison symbols.
      Note that we've only discussed three in this section so far,
      but you already know the equals symbol and have likely also seen the symbol <q><m>\neq</m>,</q>
      which means <q>not equal to.</q>
    </p>

    <table permid="TWi" xml:id="table-comparison-symbols">
      <caption>Comparison Symbols</caption>
      <tabular permid="Adr" valign="bottom">
        <row bottom="medium">
          <cell>Symbol</cell>
          <cell>Means</cell>
          <cell colspan="3" halign="center">Examples</cell>
        </row>
        <row>
          <cell><m>=</m></cell>
          <cell>equals</cell>
          <cell><m>13=13\qquad</m></cell>
          <cell><m>\frac{5}{4}=1.25</m></cell>
          <cell><m>5\stackrel{\text{no}}{=}6</m></cell>
        </row>
        <row>
          <cell><m>\gt</m></cell>
          <cell>is greater than</cell>
          <cell><m>13\gt11</m></cell>
          <cell><m>\pi\gt3</m></cell>
          <cell><m>9\stackrel{\text{no}}{\gt}9</m></cell>
        </row>
        <row>
          <cell><m>\geq</m></cell>
          <cell>is greater than or equal to</cell>
          <cell><m>13\geq11</m></cell>
          <cell><m>3\geq3</m></cell>
          <cell><m>11.2\stackrel{\text{no}}{\geq}10.2</m></cell>
        </row>
        <row>
          <cell><m>\lt</m></cell>
          <cell>is less than</cell>
          <cell><m>-3\lt8</m></cell>
          <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
          <cell><m>2\stackrel{\text{no}}{\lt}-2</m></cell>
        </row>
        <row>
          <cell><m>\leq</m></cell>
          <cell>is less than or equal to</cell>
          <cell><m>-3\leq8</m></cell>
          <cell><m>3\leq3</m></cell>
          <cell><m>\frac{4}{5}\stackrel{\text{no}}{\leq}\frac{3}{5}</m></cell>
        </row>
        <row>
          <cell><m>\neq</m></cell>
          <cell>is not equal to</cell>
          <cell><m>10\neq20</m></cell>
          <cell><m>\frac{1}{2}\neq1.2</m></cell>
          <cell><m>\frac{3}{8}\stackrel{\text{no}}{\neq}0.375</m></cell>
        </row>
      </tabular>

    </table>
  </subsection>

  <subsection permid="mnU">
    <title>Set-Builder and Interval Notation</title>
    <p permid="rOY">
      If you say
      <me permid="hpT">
        (\text{age of a voter})\geq18
      </me>
      and have a particular voter in mind,
      what is that person's age?
      There's no way to know for sure. <em>Maybe</em>
      they are <m>18</m>, but maybe they are older.
      It's helpful to use a variable <m>a</m> to represent age
      (in years)
      and then to visualize the possibilities with a number line,
      as in <xref ref="figure-voters-age">Figure</xref>.
    </p>

    <figure permid="kkz" xml:id="figure-voters-age">
      <caption><m>(\text{age of a voter})\geq18</m></caption>
      <image permid="jfg" width="50%">
        <description>a number line, where the number 18 is marked; the portion of the number line to the right of 18 has a thick line overlaying it with an arrow pointing to the right; at 18, there is a left bracket character; text indicates the right area represents possibilities for age</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-5,xmax=35,
                                xtick={18},
                                xlabel={$a$},
                                minor xtick={-5,-4,...,35},
                                ]
                        \addplot+[closedinfiniteinterval] coordinates {(18,0) (36,0)} node[pos=0.5,above] {possibilities for age};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
      </image>

    </figure>

    <p permid="XWh">
      The shaded portion of the number line in <xref ref="figure-voters-age">Figure</xref>
      is a mathematical <term>interval</term>.
      For now, that just means a collection of certain numbers.
      In this case, it's all the numbers <m>18</m> and above.
    </p>

    <p permid="Edq">
      The number line in <xref ref="figure-voters-age">Figure</xref> is a <em>graphical</em>
      representation of a collection of certain numbers.
      We have two notations, set-builder notation and interval notation,
      that we also use to represent such collections of numbers.
    </p>
<!--         <p>It's one thing to say <m>(\text{age of a voter})\geq18</m>, and another thing to discuss <em>all the shaded numbers</em> in the interval in <xref ref="figure-voters-age">Figure</xref>. In mathematics, <me>(\text{age of a voter})\geq18</me> is saying that there is <em>one</em> age under consideration and all we know is that it's <em>18</em> or larger. It's subtle, but this is not the same thing as the <em>collection</em> of <em>all</em> numbers that are <m>18</m> or larger. Mathematics has two common ways to write down these kinds of collections.</p>
 -->
    <definition permid="odh" xml:id="definition-set-builder-notation">
      <title>Set-Builder Notation</title>
      <idx><h>set-builder notation</h></idx>
      <statement>
        <p permid="Htv">
          Set-builder notation attempts to directly say the condition that numbers in the interval satisfy.
          In general, we write set-builder notation like:
          <me permid="Nxc">
            \left\{x\mid\text{condition on }x\right\}
          </me>
          and read it out loud as <q>the set of all <m>x</m> such that <ellipsis />.</q> For example,
          <me permid="tEl">
            \left\{x\mid x\geq18\right\}
          </me>
          is read out loud as <q>the set of all <m>x</m> such that <m>x</m> is greater than or equal to <m>18</m>.</q>
          The breakdown is as follows.
        </p>

        <sidebyside permid="gyI" margins="0%">

          <tabular permid="nOZ">
            <row>
              <cell><m>\highlight{\{}\lowlight{x\mid x\geq18}\highlight{\}}</m></cell>
              <cell>the set of</cell>
            </row>
            <row>
              <cell><m>\lowlight{\{}\highlight{x}\lowlight{{}\mid x\geq18\}}</m></cell>
              <cell>all <m>x</m></cell>
            </row>
            <row>
              <cell><m>\lowlight{\{x}\highlight{{}\mid{}}\lowlight{x\geq18\}}</m></cell>
              <cell>such that</cell>
            </row>
            <row>
              <cell><m>\lowlight{\{x\mid{}}\highlight{x\geq18}\lowlight{\}}</m></cell>
              <cell><m>x</m> is greater than or equal to <m>18</m></cell>
            </row>
          </tabular>

        </sidebyside>
      </statement>
    </definition>
<!--TODO: Maybe. Add a checkpoint that asks a student to write the meaning of, for example, {y|y<4}. Might need to be MC or partial fill in the blank... -->
    <definition permid="Ukq" xml:id="definition-interval-notation">
      <title>Interval Notation</title>
      <idx><h>interval notation</h></idx>
      <statement>
        <p permid="nAE">
          Interval notation represents a collection of numbers by only stating where the collection starts and stops,
          using parentheses and square brackets to show if the end values are included
          (or not).
          For example, in <xref ref="figure-voters-age">Figure</xref>,
          the interval starts at <m>18</m>.
          To the right, the interval extends forever and has no end,
          so we use the <m>\infty</m> symbol
          (meaning "infinity").
          This particular interval is denoted:
          <me permid="ZLu">
            [18,\infty)
          </me>
          Why use <q><m>[</m></q> on one side and
          <q><m>)</m></q> on the other?
          The square bracket tells us that <m>18</m> <em>is</em>
          part of the interval and the round parenthesis tells us that <m>\infty</m> is <em>not</em>
          part of the interval.<fn>
          And how could it be, since <m>\infty</m> is not even a number?
          </fn></p>

        <p permid="THN">
          In general there are four types of infinite intervals.
          Take note of the different uses of round parentheses and square brackets.
        </p>

        <sbsgroup permid="Arz" widths="47% 47%">
          <sidebyside permid="MFR" margins="0%">
            <figure permid="zOW">
              <caption>An <term>open, infinite</term> interval denoted by <m>(a,\infty)</m> means all numbers <m>a</m> or larger, <em>not</em> including <m>a</m>.</caption>
              <image permid="Pmp">
                <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left parenthesis at a and an arrow on the right pointing right</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                ]
                        \addplot[openinfiniteinterval] coordinates {(0,0) (1.5,0)};
                        \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
              </image>

            </figure>

            <figure permid="fWf">
              <caption>A <term>closed, infinite</term> interval denoted by <m>[a,\infty)</m> means all numbers <m>a</m> or larger, <em>including</em> <m>a</m>.</caption>
              <image permid="vty">
                <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left bracket at a and an arrow on the right pointing right</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                ]
                        \addplot[closedinfiniteinterval] coordinates {(0,0) (1.5,0)};
                        \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
              </image>

            </figure>
          </sidebyside>

          <sidebyside permid="sNa" margins="0%">
            <figure permid="Mdo">
              <caption>An <term>open, infinite</term> interval denoted by <m>(-\infty,a)</m> means all numbers <m>a</m> or smaller, <em>not</em> including <m>a</m>.</caption>
              <image permid="bAH">
                <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right parenthesis at a and an arrow on the left pointing left</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                ]
                        \addplot[infiniteopeninterval] coordinates {(-0.5,0) (1,0)};
                        \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
              </image>

            </figure>

            <figure permid="skx">
              <caption>A <term>closed, infinite</term> interval denoted by <m>(-\infty,a]</m> means all numbers <m>a</m> or smaller, <em>including</em> <m>a</m>.</caption>
              <image permid="HHQ">
                <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right bracket at a and an arrow on the left pointing left</description>

            <latex-image>
                <![CDATA[\begin{tikzpicture}
                    \begin{axis}[numberline,
                                xmin=-0.5,xmax=1.5,
                                ticks=none,
                                after end axis/.code={},
                                ]
                        \addplot+[infiniteclosedinterval] coordinates {(-0.5,0) (1,0)};
                        \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                    \end{axis}
                \end{tikzpicture}]]>
            </latex-image>
              </image>

            </figure>
          </sidebyside>
        </sbsgroup>

      </statement>
    </definition>
        <!-- <remark>
            <p>When graphing an interval, an alternative convention is to use open circles and filled-in circles. An open circle can be used in place of a round parenthesis, and a filled-in circle can be used in place of a square bracket, as in <xref ref="figure-alternate-interval">Figure</xref>.</p>

            <figure xml:id="figure-alternate-interval">
                <caption>An alternate notation for graphing the interval <m>(a,b]</m>.</caption>
                <image width="47%">
                    <description>a number line with marks at a and b; the portion of the number line between a and b has a thick line overlaying it; there is a hollow dot at a and solid dot at b</description>
                    <latex-image>
                        <![CDATA[\begin{tikzpicture}
                            \begin{axis}[numberline,
                                        xmin=-0.5,xmax=1.5,
                                        ticks=none,
                                        after end axis/.code={},
                                        ]
                                \addplot[closedopeninterval,o-*] coordinates {(-0.5,0) (1,0)};
                                \addplot[mark=none] coordinates {(1,0)} node[below] {$b$};
                                \addplot[mark=none] coordinates {(-0.5,0)} node[below] {$a$};
                            \end{axis}
                        \end{tikzpicture}]]>
                    </latex-image>
                </image>
            </figure>
        </remark> -->
    <exercise permid="RpK">
      <title>Interval and Set-Builder Notation from Number Lines</title>
      <webwork>
          <setup>

            <pg-code>
                ($a[0],$b[0])=(0,2);#num_sort(map{$_-4}NchooseK(9,2));
                ($a[1],$b[1])=(0,2);#num_sort(map{$_-4}NchooseK(9,2));
                ($a[2],$b[2])=(2,4);#num_sort(map{$_-4}NchooseK(9,2));
                %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                %right=(oi=>')',ci=>')',io=>')',ic=>']');
                @type=('ic','io','ci');#('oi','ci','io','ic')[NchooseK(4,3)];
                @ticks = ();
                for my $j (-5..5) {push(@ticks,$j);};
                for my$i(0,1,2){
                $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(5.5,0,'black',1);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(-5.5,0,'black',1);
                $nl[$i]->lb(new Label(6,10,'x','black','right','middle','large'));
                for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
                $nl[$i]->h_ticks(0,"black",@ticks);
                };
                $shadingoffset = 0.5;
                for my$i(0..2){
                if($type[$i]eq'oi' or $type[$i]eq'ci'){
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                }else{
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                };
                if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                  elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                  elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                  else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
                };

                InequalitySetBuilder::UseVerticalSuchThat();
                Context("InequalitySetBuilder-Only");
                for my$i(0..2){
                if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                };

                Context("Interval");
                Context()->flags->set("formatStudentAnswer"=>'parsed');
                for my$i(0..2){
                if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                else{$in[$i]=Compute("(-inf,$b[$i]]");}
                };
            </pg-code>
          </setup>
          <statement>
            <p permid="hLs">
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p permid="NSB">
              <ol permid="MUm" label="a." cols="3">
                <li permid="iCq">

                  <sidebyside permid="YUj" margins="0%" widths="40%">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>

                  <p permid="grE">
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>

                  <p permid="MyN">
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>

                <li permid="OJz">

                  <sidebyside permid="Fbs" margins="0%" widths="40%">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>

                  <p permid="sFW">
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>

                  <p permid="YNf">
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>

                <li permid="uQI">

                  <sidebyside permid="liB" margins="0%" widths="40%">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>

                  <p permid="EUo">
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>

                  <p permid="lbx">
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution permid="Ikt">
            <p permid="bmm">
              <ol permid="UyL" label="a.">
                <li permid="aXR">
                  <p permid="RiG">
                    Since all numbers less than or equal to <m>2</m> are shaded,
                    the set-builder notation is <var name="$sb[0]" />.
                    The shaded interval <q>starts</q>
                    at <m>-\infty</m> and ends at <m>2</m>
                    (including <m>2</m>)
                    so the interval notation is <var name="$in[0]"/>.
                  </p>
                </li>

                <li permid="Hfa">
                  <p permid="xpP">
                    Since all numbers less than to <m>2</m> are shaded,
                    the set-builder notation is <var name="$sb[1]" />.
                    The shaded interval <q>starts</q>
                    at <m>-\infty</m> and ends at <m>2</m>
                    (excluding <m>2</m>)
                    so the interval notation is <var name="$in[1]"/>
                  </p>
                </li>

                <li permid="nmj">
                  <p permid="dwY">
                    Since all numbers greater than or equal to <m>2</m> are shaded,
                    the set-builder notation is <var name="$sb[2]" />.
                    The shaded interval starts at <m>2</m>
                    (including <m>2</m>)
                    and <q>ends</q> at <m>\infty</m>,
                    so the interval notation is <var name="$in[2]"/>
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>
  </subsection>

  <exercises permid="Svd">
    <exercisegroup permid="yCm" cols="2">
      <title>Review and Warmup</title>
      <exercise permid="inV">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction30.pg" />
      </exercise>

      <exercise permid="Ove">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction30.pg" />
      </exercise>

      <exercise permid="uCn">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction35.pg" />
      </exercise>

      <exercise permid="aJw">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction35.pg" />
      </exercise>

      <exercise permid="GQF">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction40.pg" />
      </exercise>

      <exercise permid="mXO">
        <webwork source="BasicMath/FractionPercentDecimal/DecimalToFraction40.pg" />
      </exercise>

      <exercise permid="TeX">
        <webwork source="BasicMath/FractionPercentDecimal/FractionToDecimal60.pg" />
      </exercise>

      <exercise permid="zmg">
        <webwork source="BasicMath/FractionPercentDecimal/FractionToDecimal60.pg" />
      </exercise>

      <exercise permid="ftp">
        <webwork source="BasicMath/FractionPercentDecimal/FractionToDecimal70.pg" />
      </exercise>

      <exercise permid="rHH">
        <webwork source="BasicMath/FractionPercentDecimal/FractionToDecimal70.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="eJv" cols="2">
      <title>Ordering Numbers</title>
      <exercise permid="XOQ">
        <webwork >
        <setup>

            <pg-code>
                @a=map{$_-10}NchooseK(21,5);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="tZK">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="agT">
            <me permid="FSD">
              <var name="$as" />
            </me>
          </p>

          <p permid="Goc">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="DVZ">
        <webwork >
        <setup>

            <pg-code>
                @a=map{$_-10}NchooseK(21,5);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="mvl">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="SCu">
            <me permid="lZM">
              <var name="$as" />
            </me>
          </p>

          <p permid="yJD">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="kdi">
        <webwork >
        <setup>

            <pg-code>
                @a=map{($_-1000)/100}NchooseK(2000,5);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="eQM">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="KXV">
            <me permid="SgV">
              <var name="$as" />
            </me>
          </p>

          <p permid="rfe">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="Qkr">
        <webwork >
        <setup>

            <pg-code>
                @a=map{($_-10)+random(0,0.8,0.2)+random(0,0.09,0.01)}NchooseK(19,4);
                if($a[1]&lt;0){$a[4]=$a[1]+0.1;}
                elsif($a[1]=-$a[0]){$a[4]=$a[0]+0.1;}
                elsif($a[1]=-$a[2]){$a[4]=$a[2]+0.1;}
                elsif($a[1]=-$a[3]){$a[4]=$a[3]+0.1;};
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="Xmn">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="Dtw">
            <me permid="yoe">
              <var name="$as" />
            </me>
          </p>

          <p permid="jAF">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="wrA">
        <webwork >
        <setup>

            <pg-code>
                @a=map{$_-10}NchooseK(21,5);
                Context("Fraction");
                @i=NchooseK(5,2);
                @d=map{$_+2}NchooseK(7,2);
                $a[$i[0]]=Fraction($d[0]*$a[$i[0]]+random(1,$d[0]-1,1),$d[0]);
                $a[$i[1]]=Fraction($d[1]*$a[$i[1]]+random(1,$d[1]-1,1),$d[1]);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="PHO">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="vOX">
            <me permid="evn">
              <var name="$as" />
            </me>
          </p>

          <p permid="bWg">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="cyJ">
        <webwork >
        <setup>

            <pg-code>
                @d=(random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1),random(2,9,1));
                Context("Fraction");
                $a[0]=Fraction(random(-1,1,2)*random(1,$d[0]*9,1),$d[0]);
                do{$a[1]=Fraction(random(-1,1,2)*random(1,$d[1]*9,1),$d[1]);}until($a[1]!=$a[0]);
                do{$a[2]=Fraction(random(-1,1,2)*random(1,$d[2]*9,1),$d[2]);}until($a[2]!=$a[0] and $a[2]!=$a[1]);
                do{$a[3]=Fraction(random(-1,1,2)*random(1,$d[3]*9,1),$d[3]);}until($a[3]!=$a[0] and $a[3]!=$a[1] and $a[3]!=$a[2]);
                do{$a[4]=Fraction(random(-1,1,2)*random(1,$d[4]*9,1),$d[4]);}until($a[4]!=$a[0] and $a[4]!=$a[1] and $a[4]!=$a[2] and $a[4]!=$a[3]);
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="Idp">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="oky">
            <me permid="KCw">
              <var name="$as" />
            </me>
          </p>

          <p permid="UrH">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="IFS">
        <webwork >
        <setup>

            <pg-code>
                @c=map{$_-10}NchooseK(21,4);
                Context("Fraction");
                @d=map{$_+2}NchooseK(7,2);
                $c[2]=Fraction($d[0]*$a[2]+random(1,$d[0]-1,1),$d[0]);
                $c[3]=Fraction($d[1]*$a[3]+random(1,$d[1]-1,1),$d[1]);
                Context()->flags->set(reduceConstants=>0,reduceConstantFunctions=>0);
                @irrationals=(Formula("pi"),Formula("pi/2"),Formula("sqrt(2)"),Formula("sqrt(3)"));
                ($c[4],$c[5])=(@irrationals)[NchooseK(4,2)];
                @a=(@c)[NchooseK(6,6)];
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                Context()->functions->add('sqrt' => {class => 'Parser::Function::numeric', braceTeX => 1, TeX => '\sqrt'});
                Context()->parens->add('(' => {close => ')', type => 'Point', formMatrix => 1, formInterval => ']', formList => 1, removable => 1, emptyOK => 1, function => 1});
                Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="AyQ">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="gFZ">
            <me permid="qJF">
              <var name="$as" />
            </me>
          </p>

          <p permid="MNi">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="oNb">
        <webwork >
        <setup>

            <pg-code>
                @c=map{$_-10}NchooseK(21,4);
                Context("Fraction");
                @d=map{$_+2}NchooseK(7,2);
                $c[2]=Fraction($d[0]*$a[2]+random(1,$d[0]-1,1),$d[0]);
                $c[3]=Fraction($d[1]*$a[3]+random(1,$d[1]-1,1),$d[1]);
                Context()->flags->set(reduceConstants=>0,reduceConstantFunctions=>0);
                @irrationals=(Formula("pi"),Formula("pi/2"),Formula("sqrt(2)"),Formula("sqrt(3)"));
                ($c[4],$c[5])=(@irrationals)[NchooseK(4,2)];
                @a=(@c)[NchooseK(6,6)];
                Context()->texStrings;
                $as='{'.join('}\quad{',@a).'}';
                Context()->normalStrings;
                @b=PGsort(sub{Real("$_[0]")&gt;Real("$_[1]")},@a);
                $bs=join('>',@b);
                package context::Ordering::BOP::ordering;
                *isOrdering = sub {
                    my $self = shift; my $obj = shift; my $class = $obj->class;
                    return $class;# eq 'Ordering' || $class eq 'Number' || $obj->{def}{isLetter};
                };
                package main;
                Context("Ordering");
                Context()->operators->add(
                '-' => {precedence => 1, associativity => 'left', type => 'both', string => '-',
                        class => 'Parser::BOP::subtract', rightparens => 'same'},
                '/' => {precedence => 3, associativity => 'left', type => 'bin', string => '/',
                        class => 'Parser::BOP::divide', space => ' /',
                        rightparens => 'all', leftparens => 'extra', fullparens => 1},
                'u-'=> {precedence => 6, associativity => 'left', type => 'unary', string => '-',
                        class => 'Parser::UOP::minus', hidden => 1, allowInfinite => 1, nofractionparens => 1},
                );
                Context()->functions->add('sqrt' => {class => 'Parser::Function::numeric', braceTeX => 1, TeX => '\sqrt'});
                Context()->parens->add('(' => {close => ')', type => 'Point', formMatrix => 1, formInterval => ']', formList => 1, removable => 1, emptyOK => 1, function => 1});
                Context()->constants->add('pi' => {value => 4*atan2(1,1), TeX => '\pi ', perl => "pi"});
                $comparison=Compute("$bs");
            </pg-code>
        </setup>
        <statement>
          <p permid="sUr">
            Use the <m>\gt</m> symbol to arrange the following numbers in order from greatest to least.
            For example,
            your answer might look like <c>4&gt;3&gt;2&gt;1&gt;0</c>.
          </p>

          <p permid="ZbA">
            <me permid="WQO">
              <var name="$as" />
            </me>
          </p>

          <p permid="FiJ">
            <var name="$comparison" width="30" />
          </p>
        </statement>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup permid="KQE" cols="2">
      <title>True/False</title>
      <exercise permid="UUk">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($left[1],$left[3],$left[5],$left[7],$left[9],$left[11])=map{$_-10}(NchooseK(20,6));
                ($right[1],$right[3],$right[5],$right[7],$right[9],$right[11])=($left[1],$left[3],$left[5],$left[7],$left[9],$left[11]);
                ($left[0],$right[0])=map{$_-10}(NchooseK(20,2));
                ($left[2],$right[2])=map{$_-10}(NchooseK(20,2));
                ($left[4],$right[4])=map{$_-10}(NchooseK(20,2));
                ($left[6],$right[6])=map{$_-10}(NchooseK(20,2));
                ($left[8],$right[8])=map{$_-10}(NchooseK(20,2));
                ($left[10],$right[10])=map{$_-10}(NchooseK(20,2));
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]].$comp[$j[$_]].$right[$j[$_]]}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="lpS">
            Decide if each comparison is true or false.

            <ol permid="tbv">
              <li permid="Tts">
                <p permid="JEh">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="zAB">
                <p permid="pLq">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="fHK">
                <p permid="VSz">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="LOT">
                <p permid="BZI">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="rWc">
                <p permid="igR">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="Ydl">
                <p permid="Ooa">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="Bbt">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($left[1],$left[3],$left[5],$left[7],$left[9],$left[11])=map{$_-10}(NchooseK(20,6));
                ($right[1],$right[3],$right[5],$right[7],$right[9],$right[11])=($left[1],$left[3],$left[5],$left[7],$left[9],$left[11]);
                ($left[0],$right[0])=map{$_-10}(NchooseK(20,2));
                ($left[2],$right[2])=map{$_-10}(NchooseK(20,2));
                ($left[4],$right[4])=map{$_-10}(NchooseK(20,2));
                ($left[6],$right[6])=map{$_-10}(NchooseK(20,2));
                ($left[8],$right[8])=map{$_-10}(NchooseK(20,2));
                ($left[10],$right[10])=map{$_-10}(NchooseK(20,2));
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]].$comp[$j[$_]].$right[$j[$_]]}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="Rxb">
            Decide if each comparison is true or false.

            <ol permid="ZiE">
              <li permid="Eku">
                <p permid="uvj">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="krD">
                <p permid="aCs">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="QyM">
                <p permid="GJB">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="wFV">
                <p permid="mQK">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="cNe">
                <p permid="SXT">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="IUn">
                <p permid="zfc">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="hiC">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                Context("Fraction");
                Context()->flags->set(reduceFractions=>0);
                for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                    $ld[$i]=random(2,9,1);
                    $left[$i]=Fraction($ln[$i],$ld[$i]);
                    $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                    $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                    $rd[$i]=random(2,9,1);
                    $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="xEk">
            Decide if each comparison is true or false.

            <ol permid="FpN">
              <li permid="pbw">
                <p permid="fml">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="ViF">
                <p permid="Ltu">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="BpO">
                <p permid="rAD">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="hwX">
                <p permid="XHM">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="NEg">
                <p permid="DOV">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="tLp">
                <p permid="jWe">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="NpL">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                Context("Fraction");
                Context()->flags->set(reduceFractions=>0);
                for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                    $ld[$i]=random(2,9,1);
                    $left[$i]=Fraction($ln[$i],$ld[$i]);
                    $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                    $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                    $rd[$i]=random(2,9,1);
                    $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="dLt">
            Decide if each comparison is true or false.

            <ol permid="lwW">
              <li permid="ZSy">
                <p permid="Qdn">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="FZH">
                <p permid="wkw">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="mgQ">
                <p permid="crF">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="SnZ">
                <p permid="IyO">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="yvi">
                <p permid="oFX">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="eCr">
                <p permid="UNg">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup permid="qXN" cols="2">
      <title>Comparisons</title>
      <exercise permid="twU">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
      </exercise>

      <exercise permid="ZEd">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations10.pg" />
      </exercise>

      <exercise permid="FLm">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
      </exercise>

      <exercise permid="lSv">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
      </exercise>

      <exercise permid="RZE">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
      </exercise>

      <exercise permid="ygN">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations30.pg" />
      </exercise>

      <exercise permid="enW">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
      </exercise>

      <exercise permid="Kvf">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers10.pg" />
      </exercise>

      <exercise permid="qCo">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
      </exercise>

      <exercise permid="WJx">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers20.pg" />
      </exercise>

      <exercise permid="CQG">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
      </exercise>

      <exercise permid="iXP">
        <webwork  source="BasicAlgebra/ComparisonsAndBasicInequalities/CompareNumbers30.pg" />
      </exercise>

    </exercisegroup>

    <exercise permid="PeY">
      <webwork>
          <setup>

            <pg-code>
                ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                %right=(oi=>')',ci=>')',io=>')',ic=>']');
                @type=('oi','ci','io','ic')[NchooseK(4,3)];
                @ticks = ();
                for my $j (-5..5) {push(@ticks,$j);};
                for my$i(0,1,2){
                $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(5.5,0,'black',1);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(-5.5,0,'black',1);
                $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
                for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
                $nl[$i]->h_ticks(0,"black",@ticks);
                };
                $shadingoffset = 0.5;
                for my$i(0..2){
                if($type[$i]eq'oi' or $type[$i]eq'ci'){
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                }else{
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                };
                if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                  elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                  elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                  else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
                };

                InequalitySetBuilder::UseVerticalSuchThat();
                Context("InequalitySetBuilder-Only");
                for my$i(0..2){
                if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                };

                Context("Interval");
                Context()->flags->set("formatStudentAnswer"=>'parsed');
                for my$i(0..2){
                if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                else{$in[$i]=Compute("(-inf,$b[$i]]");}
                };
            </pg-code>
          </setup>
          <statement>
            <p permid="JSC">
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p permid="pZL">
              <ol permid="REf" label="a." cols="3">
                <li permid="KJA">

                  <sidebyside permid="xwT" margins="0%" widths="40%">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>

                  <p permid="AUp">
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>

                  <p permid="hby">
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>

                <li permid="qQJ">

                  <sidebyside permid="dEc" margins="0%" widths="40%">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>

                  <p permid="NiH">
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>

                  <p permid="tpQ">
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>

                <li permid="WXS">

                  <sidebyside permid="JLl" margins="0%" widths="40%">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>

                  <p permid="ZwZ">
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>

                  <p permid="FEi">
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
      </webwork>
    </exercise>

    <exercise permid="vmh">
      <webwork>
          <setup>

            <pg-code>
                ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                %right=(oi=>')',ci=>')',io=>')',ic=>']');
                @type=('oi','ci','io','ic')[NchooseK(4,3)];
                @ticks = ();
                for my $j (-5..5) {push(@ticks,$j);};
                for my$i(0,1,2){
                $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(5.5,0,'black',1);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(-5.5,0,'black',1);
                $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
                for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
                $nl[$i]->h_ticks(0,"black",@ticks);
                };
                $shadingoffset = 0.5;
                for my$i(0..2){
                if($type[$i]eq'oi' or $type[$i]eq'ci'){
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                }else{
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                };
                if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                  elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                  elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                  else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
                };

                InequalitySetBuilder::UseVerticalSuchThat();
                Context("InequalitySetBuilder-Only");
                for my$i(0..2){
                if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                };

                Context("Interval");
                Context()->flags->set("formatStudentAnswer"=>'parsed');
                for my$i(0..2){
                if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                else{$in[$i]=Compute("(-inf,$b[$i]]");}
                };
            </pg-code>
          </setup>
          <statement>
            <p permid="WgU">
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p permid="Cod">
              <ol permid="xLo" label="a." cols="3">
                <li permid="Dfb">

                  <sidebyside permid="pSu" margins="0%" widths="40%">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>

                  <p permid="lLr">
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>

                  <p permid="RSA">
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>

                <li permid="jmk">

                  <sidebyside permid="VZD" margins="0%" widths="40%">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>

                  <p permid="xZJ">
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>

                  <p permid="egS">
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>

                <li permid="Ptt">

                  <sidebyside permid="CgM" margins="0%" widths="40%">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>

                  <p permid="Kob">
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>

                  <p permid="qvk">
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
      </webwork>
    </exercise>

    <exercisegroup permid="XeW" cols="3">
      <title>Set-builder and Interval Notation</title>
      <exercise permid="btq">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
      </exercise>

      <exercise permid="HAz">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
      </exercise>

      <exercise permid="nHI">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
      </exercise>

      <exercise permid="TOR">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
      </exercise>

      <exercise permid="zWa">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
      </exercise>

      <exercise permid="gdj">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
      </exercise>

      <exercise permid="Mks">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
      </exercise>

      <exercise permid="srB">
        <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup permid="Dmf" cols="4">
      <title>Convert to Interval Notation</title>
      <exercise permid="YyK">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
      </exercise>

      <exercise permid="EFT">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
      </exercise>

      <exercise permid="kNc">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
      </exercise>

      <exercise permid="QUl">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
      </exercise>

      <exercise permid="xbu">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
      </exercise>

      <exercise permid="diD">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
      </exercise>

      <exercise permid="JpM">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
      </exercise>

      <exercise permid="pwV">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
      </exercise>

      <exercise permid="VEe">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
      </exercise>

      <exercise permid="BLn">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
      </exercise>

      <exercise permid="hSw">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
      </exercise>

      <exercise permid="NZF">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
      </exercise>

      <exercise permid="ugO">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
      </exercise>

      <exercise permid="anX">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
      </exercise>

      <exercise permid="Gvg">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
      </exercise>

      <exercise permid="mCp">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
      </exercise>

      <exercise permid="SJy">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
      </exercise>

      <exercise permid="yQH">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
      </exercise>

      <exercise permid="eXQ">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
      </exercise>

      <exercise permid="LeZ">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
      </exercise>

      <exercise permid="rmi">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation110.pg" />
      </exercise>

      <exercise permid="Xtr">
        <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation120.pg" />
      </exercise>

    </exercisegroup>
  </exercises>
</section>

