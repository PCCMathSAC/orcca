<?xml version="1.0" encoding="UTF-8" ?>

<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- Authors                                                              -->
<!-- Ann Cary, Alex Jordan, Ross Kouzes, Scot Leavitt, Cara Lee,          -->
<!-- Carl Yao, Ralf Youtz                                                 -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Creative Commons BY 4.0 license                                      -->
<!-- https://creativecommons.org/licenses/by/4.0/                         -->
<!-- *********************************************************************-->

<section xml:id="section-notation-for-intervals">

    <title>Notation for Intervals</title>

        <objectives>
            <title>PCC Course Content and Outcome Guide</title>
            <ul cols="3">
                <li><xref ref="mth60-express-inequality-solution-sets" /></li>
            </ul>
        </objectives>
<!--TODO: Add an actual introductory statement-->
    <introduction>
        <figure>
            <caption>Alternative Video Lesson</caption>
            <video youtubelist="PLmuZCPhWPt-dcZAGY0-Ln1ITrF2aZv_H-" />
        </figure>

    </introduction>

        <p>If you say <me>(\text{age of a voter})\geq18</me> and have a particular voter in mind, what is that person's age? There's no way to know for sure. <em>Maybe</em> they are <m>18</m>, but maybe they are older. It's helpful to visualize the possibilities with a number line, as in <xref ref="figure-voters-age">Figure</xref>.</p>

        <figure xml:id="figure-voters-age">
            <caption><m>(\text{age of a voter})\geq18</m></caption>
            <image width="50%">
                <description>a number line, where the number 18 is marked; the portion of the number line to the right of 18 has a thick line overlaying it with an arrow pointing to the right; at 18, there is a left bracket character; text indicates the right area represents possibilities for age</description>
                <latex-image>
                    <![CDATA[\begin{tikzpicture}
                        \begin{axis}[numberline,
                                    xmin=-5,xmax=35,
                                    xtick={18},
                                    minor xtick={-5,-4,...,35},
                                    ]
                            \addplot+[closedinfiniteinterval] coordinates {(18,0) (36,0)} node[pos=0.5,above] {possibilities for age};
                        \end{axis}
                    \end{tikzpicture}]]>
                </latex-image>
            </image>
        </figure>

        <p>The shaded portion of the number line in <xref ref="figure-voters-age">Figure</xref> is a mathematical <term>interval</term>. For now, that just means a collection of certain numbers. In this case, it's all the numbers <m>18</m> and above.</p>

        <p>It's one thing to say <m>(\text{age of a voter})\geq18</m>, and another thing to discuss <em>all the shaded numbers</em> in the interval in <xref ref="figure-voters-age">Figure</xref>. In mathematics, <me>(\text{age of a voter})\geq18</me> is saying that there is <em>one</em> age under consideration and all we know is that it's <em>18</em> or larger. It's subtle, but this is not the same thing as the <em>collection</em> of <em>all</em> numbers that are <m>18</m> or larger. Mathematics has two common ways to write down these kinds of collections.</p>

        <definition xml:id="definition-set-builder-notation"><idx><h>set builder notation</h></idx>
            <title>Set-Builder Notation</title>
            <statement>
                <p>Set-builder notation attempts to directly say the condition that numbers in the interval satisfy. In general, write set-builder notation like: <me>\left\{x\mid\text{condition on }x\right\}</me> and read it out loud as <q>the set of all <m>x</m> such that <ellipsis />.</q> For example, <me>\left\{x\mid x\geq18\right\}</me> is read out loud as <q>the set of all <m>x</m> such that <m>x</m> is greater than or equal to <m>18</m>.</q> The breakdown is as follows.</p>
                <sidebyside margins="0%">
                    <tabular>
                        <row>
                            <cell><m>\highlight{\{}\lowlight{x\mid x\geq18}\highlight{\}}</m></cell>
                            <cell>the set of</cell>
                        </row>
                        <row>
                            <cell><m>\lowlight{\{}\highlight{x}\lowlight{{}\mid x\geq18\}}</m></cell>
                            <cell>all <m>x</m></cell>
                        </row>
                        <row>
                            <cell><m>\lowlight{\{x}\highlight{{}\mid{}}\lowlight{x\geq18\}}</m></cell>
                            <cell>such that</cell>
                        </row>
                        <row>
                            <cell><m>\lowlight{\{x\mid{}}\highlight{x\geq18}\lowlight{\}}</m></cell>
                            <cell><m>x</m> is greater than or equal to <m>18</m></cell>
                        </row>
                    </tabular>
                </sidebyside>
            </statement>
        </definition>

        <definition xml:id="definition-interval-notation"><idx><h>interval notation</h></idx>
            <title>Interval Notation</title>
                <statement>
                <p>Interval notation tries to just say the numbers where the interval starts and stops. For example, in <xref ref="figure-voters-age">Figure</xref>, the interval starts at <m>18</m>. To the right, the interval extends forever and has no end, so we use the <m>\infty</m> symbol (meaning "infinity"). This particular interval is denoted: <me>[18,\infty)</me> Why use <q><m>[</m></q> on one side and <q><m>)</m></q> on the other? The square bracket tells us that <m>18</m> <em>is</em> part of the interval and the round parenthesis tells us that <m>\infty</m> is <em>not</em> part of the interval.<fn>And how could it be, since <m>\infty</m> is not even a number?</fn></p>
                <p>In general there are four types of infinite intervals. Take note of the different uses of round parentheses and square brackets.</p>

                <sbsgroup widths="47% 47%">
                    <sidebyside margins="0%">
                        <figure>
                            <caption>An <term>open, infinite</term> interval denoted by <m>(a,\infty)</m> means all numbers <m>a</m> or larger, <em>not</em> including <m>a</m>.</caption>
                            <image>
                                <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left parenthesis at a and an arrow on the right pointing right</description>
                                <latex-image>
                                    <![CDATA[\begin{tikzpicture}
                                        \begin{axis}[numberline,
                                                    xmin=-0.5,xmax=1.5,
                                                    ticks=none,
                                                    after end axis/.code={},
                                                    ]
                                            \addplot[openinfiniteinterval] coordinates {(0,0) (1.5,0)};
                                            \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                                        \end{axis}
                                    \end{tikzpicture}]]>
                                </latex-image>
                            </image>
                        </figure>
                        <figure>
                            <caption>A <term>closed, infinite</term> interval denoted by <m>[a,\infty)</m> means all numbers <m>a</m> or larger, <em>including</em> <m>a</m>.</caption>
                            <image>
                                <description>a number line with a mark at a; the portion of the number line from a to the right has a thick line overlaying it; there is a left bracket at a and an arrow on the right pointing right</description>
                                <latex-image>
                                    <![CDATA[\begin{tikzpicture}
                                        \begin{axis}[numberline,
                                                    xmin=-0.5,xmax=1.5,
                                                    ticks=none,
                                                    after end axis/.code={},
                                                    ]
                                            \addplot[closedinfiniteinterval] coordinates {(0,0) (1.5,0)};
                                            \addplot[mark=none] coordinates {(0,0)} node[below] {$a$};
                                        \end{axis}
                                    \end{tikzpicture}]]>
                                </latex-image>
                            </image>
                        </figure>
                    </sidebyside>

                    <sidebyside margins="0%">
                        <figure>
                            <caption>An <term>open, infinite</term> interval denoted by <m>(-\infty,a)</m> means all numbers <m>a</m> or smaller, <em>not</em> including <m>a</m>.</caption>
                            <image>
                                <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right parenthesis at a and an arrow on the left pointing left</description>
                                <latex-image>
                                    <![CDATA[\begin{tikzpicture}
                                        \begin{axis}[numberline,
                                                    xmin=-0.5,xmax=1.5,
                                                    ticks=none,
                                                    after end axis/.code={},
                                                    ]
                                            \addplot[infiniteopeninterval] coordinates {(-0.5,0) (1,0)};
                                            \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                                        \end{axis}
                                    \end{tikzpicture}]]>
                                </latex-image>
                            </image>
                        </figure>
                        <figure>
                            <caption>A <term>closed, infinite</term> interval denoted by <m>(-\infty,a]</m> means all numbers <m>a</m> or smaller, <em>including</em> <m>a</m>.</caption>
                            <image>
                                <description>a number line with a mark at a; the portion of the number line from a to the left has a thick line overlaying it; there is a right bracket at a and an arrow on the left pointing left</description>
                                <latex-image>
                                    <![CDATA[\begin{tikzpicture}
                                        \begin{axis}[numberline,
                                                    xmin=-0.5,xmax=1.5,
                                                    ticks=none,
                                                    after end axis/.code={},
                                                    ]
                                            \addplot+[infiniteclosedinterval] coordinates {(-0.5,0) (1,0)};
                                            \addplot[mark=none] coordinates {(1,0)} node[below] {$a$};
                                        \end{axis}
                                    \end{tikzpicture}]]>
                                </latex-image>
                            </image>
                        </figure>
                    </sidebyside>
                </sbsgroup>

<!--                 <p>Also we allow <m>a</m> or <m>b</m> to be the symbols <m>\infty</m> or <m>-\infty</m>. If these symbols are used then the interval extends forever in one direction. Wherever these symbols are used, there has to be a round parenthesis, not a square bracket, since the interval won't actually include these (non-) numbers.</p>
 -->            </statement>
        </definition>

<!--TODO: change this so it is not identical to the exercise at line 628-->
        <exercise>
            <title>Interval and Set-Builder Notation from Number Lines</title>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid x\geq-4\text{ and }x\leq3\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>[-4,3]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\geq-3\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>[-3,4)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid x\gt-1\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>(-1,4)</static>
                    </var>
                    <pg-code>
                        ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                        %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                        %right=(oi=>')',ci=>')',io=>')',ic=>']');
                        @type=('oi','ci','io','ic')[NchooseK(4,3)];
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[240,30]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        $nl[$i]->lb(new Label(5.5,10,'x','black','right','bottom'));
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        for my$i(0..2){
                        if($type[$i]eq'oi' or $type[$i]eq'ci'){
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->lineTo(5.25,0,'blue',5);
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->arrowTo(5.5,0,'blue',3);
                        }else{
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->lineTo(-5.25,0,'blue',5);
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->arrowTo(-5.5,0,'blue',3);
                        };
                        if($type[$i]eq'oi'){$nl[$i]->stamps(open_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'ci'){$nl[$i]->stamps(closed_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'io'){$nl[$i]->stamps(open_circle($b[$i],0,'blue'));}
                          else{$nl[$i]->stamps(closed_circle($b[$i],0,'blue'));}
                        };

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                        elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                        elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                        else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                        };

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                        elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                        elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                        else{$in[$i]=Compute("(-inf,$b[$i]]");}
                        };
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise>



<!--         <example>
            <title>Lifespan</title>
            <p>The person with the oldest verified age at the time of her death was Jeanne Calment of France, who died in 1997 at the precise age of <m>122.45</m> years old.</p>
            <p>Consider a random human being from history. How many years did that person live? We can't be specific if we don't know who we are talking about. But we can give a range of possibilities. If a person was ever alive, they were older than <m>0</m> when they died. And using Jeanne Calment as the upper limit, no one has ever lived beyond <m>122.45</m> years. So <xref ref="figure-possible-ages">Figure</xref> gives a picture of these possible ages.</p>

            <figure xml:id="figure-possible-ages">
                <caption>Possible ages at death of people from history</caption>
                <image width="50%">
                    <description>a number line with marks at 0 and 122.45; the portion of the number line between 0 and 122.45 has a thick line overlaying it; there is a left parenthesis at 0 and a right bracket at 122.45; text indicates the region represents possibilities for age at death</description>
                    <latex-image>
                        <![CDATA[\begin{tikzpicture}
                            \begin{axis}[numberline,
                                        xmin=-5,xmax=130,
                                        xtick={0,122.45},
                                        minor xtick=,
                                        ]
                                \addplot[openclosedinterval] coordinates {(0,0) (122.45,0)} node[pos=0.5,above] {possibilities for age at death};
                            \end{axis}
                        \end{tikzpicture}]]>
                    </latex-image>
                </image>
            </figure>

            <p>This is an interval that starts at <m>0</m> (not including <m>0</m>) and ends at <m>122.45</m> (including <m>122.45</m>). So in interval notation, it's: <me>(0,122.45]</me></p>

            <p>It's an interval where all the numbers are greater than <m>0</m> <em>and</em> less than or equal to <m>122.45</m>. So using set-builder notation, it's: <me>\left\{x\mid x\gt0\text{ and }x\leq122.45\right\}</me> Sometimes people like to combine those last two inequalities and write this like: <me>\left\{x\mid0\lt x\leq122.45\right\}</me></p>
        </example> -->

<!--         <exercise>
            <title>Construction Recycling</title>
            <webwork >
                <setup>
                    <var name="$sb">
                        <static>\{x\mid x\geq25\text{ and }x\leq60\}</static>
                    </var>
                    <var name="$in">
                        <static>[25,60]</static>
                    </var>
                    <pg-code>
                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $sb = Compute("{ x | x>=25 and x&lt;=60}");
                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in = Compute("[25,60]");
                        @ticks = ();
                        for my$j(0..7){push(@ticks,$j*10);};
                        $nl=init_graph(-10,-50,80,50,size=>[400,50]);
                        $nl->moveTo(0,0);
                        $nl->arrowTo(75,0,'black',1);
                        $nl->moveTo(0,0);
                        $nl->arrowTo(-5,0,'black',1);
                        for my$j(@ticks){$nl->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl->h_ticks(0,"black",@ticks);
                        $nl->moveTo(25,0);
                        $nl->lineTo(60,0,'blue',5);
                        $nl->stamps(closed_circle(25,0,'blue'));
                        $nl->stamps(closed_circle(60,0,'blue'));
                    </pg-code>
                </setup>
                <statement>
                    <p>There is a recycling center in town that will take truckloads of construction scrap (framing wood, drywall, etc.) They charge <m>\$0.05</m> per pound of material, but they charge a minimum of <m>\$25</m>. Your truck is only rated to carry <m>1200</m> pounds maximum. If you take a truckload of material to this recycling center, what are the possible amounts (in dollars) that you will be charged? You can leave dollar signs out of your answers below.</p>
                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, and <c>!=</c> for <m>\neq</m>.</instruction>

                    <p>In set-builder notation: <var name="$sb" width="20" /></p>
                    <p>In interval notation: <var name="$in" width="20" /></p>
                </statement>
                <hint>
                    <p>What is the smallest amount you might pay if you only had a small amount in the truck? What is the largest amount you might pay if your truck was full to its capacity?</p>
                </hint>
                <solution>
                    <p>You will definitely pay at least <m>\$25</m>. If you filled your truck to capacity, it would hold <m>1200</m> pounds, and they would charge you <me>1200\,\mathrm{lb}\cdot\frac{\$0.05}{\mathrm{lb}}=\$60</me> so the most you will pay is <m>\$60</m>. Anything in between is possible. The number line image for this situation is:</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$nl"/></sidebyside>
                    <p>The set-builder notation for the interval is <m><var name="$sb" /></m>, and the interval notation for the interval is <m><var name="$in" /></m>.</p>
                </solution>
            </webwork>
        </exercise> -->
<!--         <exercise>
            <title>Interval and Set-Builder Notation from Number Lines</title>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid x\gt1\text{ and }x\leq2\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>(1,2)</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\geq-3\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>[-3,\infty)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid x\lt1\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>(-\infty,1)</static>
                    </var>
                    <pg-code>
                        @a=(1,-3,Compute("-inf"));
                        @b=(2,Compute("inf"),1);
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[400,50]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        $nl[0]->moveTo($a[0],0);
                        $nl[0]->lineTo($b[0],0,'blue',5);
                        $nl[0]->stamps( open_circle($a[0],0,'blue'));
                        $nl[0]->stamps( open_circle($b[0],0,'blue'));

                        $nl[1]->moveTo($a[1],0);
                        $nl[1]->lineTo(5.25,0,'blue',5);
                        $nl[1]->moveTo($a[1],0);
                        $nl[1]->arrowTo(5.5,0,'blue',3);
                        $nl[1]->stamps( closed_circle($a[1],0,'blue'));

                        $nl[2]->moveTo($b[2],0);
                        $nl[2]->lineTo(-5.25,0,'blue',5);
                        $nl[2]->moveTo($b[2],0);
                        $nl[2]->arrowTo(-5.5,0,'blue',3);
                        $nl[2]->stamps(open_circle($b[2],0,'blue'));

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $sb[0] = Compute("{ x | x>$a[0] and x&lt;$b[0]}");
                        $sb[1] = Compute("{ x | x>=$a[1]}");
                        $sb[2] = Compute("{ x | x&lt;$b[2]}");

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in[0] = Compute("($a[0],$b[0])");
                        $in[1] = Compute("[$a[1],inf)");
                        $in[2] = Compute("(-inf,$b[2])");
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, and <c>!=</c> for <m>\neq</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="30" /></p>
                            <p>In interval notation: <var name="$in[0]" width="30" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="30" /></p>
                            <p>In interval notation: <var name="$in[1]" width="30" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="30" /></p>
                            <p>In interval notation: <var name="$in[2]" width="30" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise> -->

<!--         
        <aside>
            <title>Unions and the word <q>or</q></title>

            <p>In mathematics, the union of two things is often associated with the word <q>or</q> instead of the word <q>and.</q> The reason for this is that to be part of a union, something is <em>either</em> in one of the sets <em>or</em> it is in the other. To be inside one set <em>and</em> inside the other set means you are inside <em>both</em> sets at the same time, and that is impossible with the two sets illustrated in <xref ref="figure-interval-union">Figure</xref>. So while the picture of a union looks like one set <em>and</em> another set joined together, mathematicians will often interpret a picture like this as some number being part of one set <em>or</em> the other set.</p>
        </aside>
        <exercise>
            <title>Reduced Price Tickets</title>
            <webwork>
                <setup>
                    <var name="$sb"><static>\{x\mid 6\leq x\leq12 \text{ or }x\ge65\}</static></var>
                    <var name="$in"><static>[6,12]\cup[65,\infty)</static></var>
                    <pg-code>
                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $sb = Compute("{ x | 6&lt;=x&lt;=12 or x>=65}");
                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in = Compute("[6,12]U[65,inf)");
                        @ticks = (6,12,65);
                        $nl=init_graph(-5,-50,100,50,size=>[400,50]);
                        $nl->moveTo(10,0);
                        $nl->arrowTo(95,0,'black',1);
                        $nl->moveTo(10,0);
                        $nl->arrowTo(0,0,'black',1);
                        for my$j(@ticks){$nl->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl->h_ticks(0,"black",@ticks);
                        $nl->moveTo(6,0);
                        $nl->lineTo(12,0,'blue',5);
                        $nl->moveTo(65,0);
                        $nl->lineTo(92.5,0,'blue',5);
                        $nl->moveTo(65,0);
                        $nl->arrowTo(95,0,'blue',3);
                        $nl->stamps(closed_circle(6,0,'blue'));
                        $nl->stamps(closed_circle(12,0,'blue'));
                        $nl->stamps(closed_circle(65,0,'blue'));
                    </pg-code>
                </setup>
                <statement>
                    <p>A general admission ticket to the movies costs <m>\$18</m>. However, children ages <m>6</m> through <m>12</m> are only charged <m>\$10</m>. The same discount is offered to seniors ages <m>65</m> and older. Use mathematical notation to describe the set of possible ages of someone who was eligible for a <m>\$10</m> ticket.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, <c>!=</c> for <m>\neq</m>, and capital letter <c>U</c> for <m>\cup</m>.</instruction>

                    <p>In set-builder notation: <var name="$sb" width="30" /></p>
                    <p>In interval notation: <var name="$in" width="30" /></p>
                </statement>
                <solution>
                    <p>A number line depicting the answer looks like:</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$nl"/></sidebyside>
                    <p>The set-builder notation for the interval is <m><var name="$sb" /></m>, and the interval notation for the interval is <m><var name="$in" /></m>.</p>
                </solution>
            </webwork>
        </exercise> -->
<!--         <exercise>
            <title>Interval and Set-Builder Notation from Number Lines</title>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid -4\ltx\leq 0\text{ or }3\leq x\leq3.5\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>(-4,0]\cup[3,3.5]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\leq2 or x\geq2.5\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>(-\infty,2]U[2.5,\infty)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid x\neq1\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>(-\infty,1)U(1,\infty)</static>
                    </var>
                    <pg-code>
                        @a=(-4,Compute("-inf"),Compute("-inf"));
                        @b=(0,2,1);
                        @c=(3,2.5,1);
                        @d=(3.5,Compute("inf"),Compute("inf"));
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[400,50]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        $nl[0]->moveTo($a[0],0);
                        $nl[0]->lineTo($b[0],0,'blue',5);
                        $nl[0]->moveTo($c[0],0);
                        $nl[0]->lineTo($d[0],0,'blue',5);
                        $nl[0]->stamps( open_circle($a[0],0,'blue'));
                        $nl[0]->stamps( closed_circle($b[0],0,'blue'));
                        $nl[0]->stamps( closed_circle($c[0],0,'blue'));
                        $nl[0]->stamps( closed_circle($d[0],0,'blue'));

                        $nl[1]->moveTo($b[1],0);
                        $nl[1]->lineTo(-5.25,0,'blue',5);
                        $nl[1]->moveTo($b[1],0);
                        $nl[1]->arrowTo(-5.5,0,'blue',3);
                        $nl[1]->moveTo($c[1],0);
                        $nl[1]->lineTo(5.25,0,'blue',5);
                        $nl[1]->moveTo($c[1],0);
                        $nl[1]->arrowTo(5.5,0,'blue',3);
                        $nl[1]->stamps( closed_circle($b[1],0,'blue'));
                        $nl[1]->stamps( closed_circle($c[1],0,'blue'));

                        $nl[2]->moveTo($b[2],0);
                        $nl[2]->lineTo(-5.25,0,'blue',5);
                        $nl[2]->moveTo($b[2],0);
                        $nl[2]->arrowTo(-5.5,0,'blue',3);
                        $nl[2]->moveTo($c[2],0);
                        $nl[2]->lineTo(5.25,0,'blue',5);
                        $nl[2]->moveTo($c[2],0);
                        $nl[2]->arrowTo(5.5,0,'blue',3);
                        $nl[2]->stamps(open_circle($b[2],0,'blue'));
                        $nl[2]->stamps(open_circle($c[2],0,'blue'));

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $sb[0] = Compute("{ x | $a[0]&lt;x&lt;=$b[0] or $c[0]&lt;=x&lt;=$d[0]}");
                        $sb[1] = Compute("{ x | x&lt;=$b[1] or x>=$c[1]}");
                        $sb[2] = Compute("{ x | x!=$b[2]}");

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in[0] = Compute("($a[0],$b[0]]U[$c[0],$d[0]]");
                        $in[1] = Compute("($a[1],$b[1]]U[$c[1],$d[1])");
                        $in[2] = Compute("($a[2],$b[2])U($c[2],$d[2])");
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, <c>!=</c> for <m>\neq</m>, and capital letter <c>U</c> for <m>\cup</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise> -->


     <exercises>
        <exercise>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid x\geq-4\text{ and }x\leq3\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>[-4,3]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\geq-3\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>[-3,4)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid x\gt-1\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>(-1,4)</static>
                    </var>
                    <pg-code>
                        ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                        %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                        %right=(oi=>')',ci=>')',io=>')',ic=>']');
                        @type=('oi','ci','io','ic')[NchooseK(4,3)];
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[240,30]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        $nl[$i]->lb(new Label(5.5,10,'x','black','right','bottom'));
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        for my$i(0..2){
                        if($type[$i]eq'oi' or $type[$i]eq'ci'){
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->lineTo(5.25,0,'blue',5);
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->arrowTo(5.5,0,'blue',3);
                        }else{
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->lineTo(-5.25,0,'blue',5);
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->arrowTo(-5.5,0,'blue',3);
                        };
                        if($type[$i]eq'oi'){$nl[$i]->stamps(open_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'ci'){$nl[$i]->stamps(closed_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'io'){$nl[$i]->stamps(open_circle($b[$i],0,'blue'));}
                          else{$nl[$i]->stamps(closed_circle($b[$i],0,'blue'));}
                        };

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                        elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                        elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                        else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                        };

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                        elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                        elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                        else{$in[$i]=Compute("(-inf,$b[$i]]");}
                        };
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise>
        <exercise>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid x\geq-4\text{ and }x\leq3\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>[-4,3]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\geq-3\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>[-3,4)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid x\gt-1\text{ and }x&lt;4\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>(-1,4)</static>
                    </var>
                    <pg-code>
                        ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                        ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                        %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                        %right=(oi=>')',ci=>')',io=>')',ic=>']');
                        @type=('oi','ci','io','ic')[NchooseK(4,3)];
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[240,30]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        $nl[$i]->lb(new Label(5.5,10,'x','black','right','bottom'));
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        for my$i(0..2){
                        if($type[$i]eq'oi' or $type[$i]eq'ci'){
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->lineTo(5.25,0,'blue',5);
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->arrowTo(5.5,0,'blue',3);
                        }else{
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->lineTo(-5.25,0,'blue',5);
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->arrowTo(-5.5,0,'blue',3);
                        };
                        if($type[$i]eq'oi'){$nl[$i]->stamps(open_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'ci'){$nl[$i]->stamps(closed_circle($a[$i],0,'blue'));}
                          elsif($type[$i]eq'io'){$nl[$i]->stamps(open_circle($b[$i],0,'blue'));}
                          else{$nl[$i]->stamps(closed_circle($b[$i],0,'blue'));}
                        };

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                        elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                        elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                        else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                        };

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        for my$i(0..2){
                        if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                        elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                        elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                        else{$in[$i]=Compute("(-inf,$b[$i]]");}
                        };
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="40%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise>
<!-- 
<webwork-placeholder/>
        <exercise>
            <title>Interval and Set-Builder Notation from Number Lines</title>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid -4\lt x\lt-2\text{ or }3\lt x\leq4\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>(-4,-2)U(3,4]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid -1\leq x\leq0\text{ or }3\lt x\lt4\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>[-1,0]U(3,4)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid -3\leq x\lt-2\text{ or }-1\leq x\lt2\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>[-3,-2)U[-1,2)</static>
                    </var>
                    <pg-code>
                        ($a[0],$b[0],$c[0],$d[0])=num_sort(map{$_-4}NchooseK(9,4));
                        ($a[1],$b[1],$c[1],$d[1])=num_sort(map{$_-4}NchooseK(9,4));
                        ($a[2],$b[2],$c[2],$d[2])=num_sort(map{$_-4}NchooseK(9,4));
                        %left=(op=>'(',cl=>'[',oc=>'(',co=>'[');
                        %right=(op=>')',cl=>']',oc=>']',co=>')');
                        @typea=('op','cl','oc','co')[NchooseK(4,3)];
                        @typeb=('op','cl','oc','co')[NchooseK(4,3)];
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[400,50]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        for my$i(0..2){
                        $nl[$i]->moveTo($a[$i],0);
                        $nl[$i]->lineTo($b[$i],0,'blue',5);
                        if($typea[$i]eq'op' or $typea[$i]eq'oc'){$nl[$i]->stamps(open_circle($a[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($a[$i],0,'blue'));};
                        if($typea[$i]eq'op' or $typea[$i]eq'co'){$nl[$i]->stamps(open_circle($b[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($b[$i],0,'blue'));};
                        $nl[$i]->moveTo($c[$i],0);
                        $nl[$i]->lineTo($d[$i],0,'blue',5);
                        if($typeb[$i]eq'op' or $typeb[$i]eq'oc'){$nl[$i]->stamps(open_circle($c[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($c[$i],0,'blue'));};
                        if($typeb[$i]eq'op' or $typeb[$i]eq'co'){$nl[$i]->stamps(open_circle($d[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($d[$i],0,'blue'));};
                        }

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        for my$i(0..2){
                        if($typea[$i]eq'op'){$sb[$i]=Compute("{ x | x>$a[$i] and x&lt;$b[$i]}");}
                        elsif($typea[$i]eq'cl'){$sb[$i]=Compute("{ x | x>=$a[$i] and x&lt;=$b[$i]}");}
                        elsif($typea[$i]eq'oc'){$sb[$i]=Compute("{ x | x>$a[$i] and x&lt;=$b[$i]}");}
                        else{$sb[$i]=Compute("{ x | x>=$a[$i] and x&lt;$b[$i]}");}
                        if($typeb[$i]eq'op'){$sb[$i]=Union($sb[$i],Compute("{ x | x>$c[$i] and x&lt;$d[$i]}"));}
                        elsif($typeb[$i]eq'cl'){$sb[$i]=Union($sb[$i],Compute("{ x | x>=$c[$i] and x&lt;=$d[$i]}"));}
                        elsif($typeb[$i]eq'oc'){$sb[$i]=Union($sb[$i],Compute("{ x | x>$c[$i] and x&lt;=$d[$i]}"));}
                        else{$sb[$i]=Union($sb[$i],Compute("{ x | x>=$c[$i] and x&lt;$d[$i]}"));}
                        };

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        for my$i(0..2){
                        $in[$i]=Compute("$left{$typea[$i]}$a[$i],$b[$i]$right{$typea[$i]}U$left{$typeb[$i]}$c[$i],$d[$i]$right{$typeb[$i]}");
                        };
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, <c>!=</c> for <m>\neq</m>, and capital letter <c>U</c> for <m>\cup</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise> -->

<!--
<webwork-placeholder/>
         <exercise>
            <title>Interval and Set-Builder Notation from Number Lines</title>
            <webwork >
                <setup>
                    <var name="$sb[0]">
                        <static>\{x\mid x\lt-2\text{ or }3\lt x\leq4\}</static>
                    </var>
                    <var name="$in[0]">
                        <static>(-\infty,-2)\cup(3,4]</static>
                    </var>
                    <var name="$sb[1]">
                        <static>\{x\mid x\leq0\text{ or }x\gt3\}</static>
                    </var>
                    <var name="$in[1]">
                        <static>(-\infty,0]U(3,\infty)</static>
                    </var>
                    <var name="$sb[2]">
                        <static>\{x\mid -3\leq x\lt-2\text{ or }-1\leq x\lt2\}</static>
                    </var>
                    <var name="$in[2]">
                        <static>[-3,-2)U[-1,2)</static>
                    </var>
                    <pg-code>
                        ($a[0],$b[0],$c[0],$d[0])=num_sort(map{$_-4}NchooseK(9,4));
                        ($a[1],$b[1],$c[1],$d[1])=num_sort(map{$_-4}NchooseK(9,4));
                        ($a[2],$b[2],$c[2],$d[2])=num_sort(map{$_-4}NchooseK(9,4));
                        %left=(io=>'(',ic=>'(',oc=>'(',co=>'[',oi=>'(',ci=>'[');
                        %right=(io=>')',ic=>']',oc=>']',co=>')',oi=>')',ci=>')');
                        @typea=('io','ic','oc','co')[NchooseK(4,3)];
                        @typeb=('oi','ci','oc','co')[NchooseK(4,3)];
                        for my$i(0..2){
                          if($typea[$i]eq'io'or$typea[$i]eq'ic'){$a[$i]=Compute("-inf");};
                          if($typeb[$i]eq'oi'or$typeb[$i]eq'ci'){$d[$i]=Compute("inf");};
                        };
                        @ticks = ();
                        for my $j (-5..5) {push(@ticks,$j);};
                        for my$i(0,1,2){
                        $nl[$i]=init_graph(-6,-50,6,50,size=>[400,50]);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(5.5,0,'black',1);
                        $nl[$i]->moveTo(0,0);
                        $nl[$i]->arrowTo(-5.5,0,'black',1);
                        for my$j(@ticks){$nl[$i]->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl[$i]->h_ticks(0,"black",@ticks);
                        };

                        for my$i(0..2){
                        if($typea[$i]eq'oc'or$typea[$i]eq'co'){
                          $nl[$i]->moveTo($a[$i],0);
                          $nl[$i]->lineTo($b[$i],0,'blue',5);
                        }else{
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->lineTo(-5.25,0,'blue',5);
                          $nl[$i]->moveTo($b[$i],0);
                          $nl[$i]->arrowTo(-5.5,0,'blue',3);
                        };
                        if($typeb[$i]eq'oc'or$typeb[$i]eq'co'){
                          $nl[$i]->moveTo($c[$i],0);
                          $nl[$i]->lineTo($d[$i],0,'blue',5);
                        }else{
                          $nl[$i]->moveTo($c[$i],0);
                          $nl[$i]->lineTo(5.25,0,'blue',5);
                          $nl[$i]->moveTo($c[$i],0);
                          $nl[$i]->arrowTo(5.5,0,'blue',3);
                        };
                        if($typea[$i]eq'oc'){$nl[$i]->stamps(open_circle($a[$i],0,'blue'));}elsif($typea[$i]eq'co'){$nl[$i]->stamps(closed_circle($a[$i],0,'blue'));};
                        if($typea[$i]eq'io'or$typea[$i]eq'co'){$nl[$i]->stamps(open_circle($b[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($b[$i],0,'blue'));};
                        if($typeb[$i]eq'oi'or$typeb[$i]eq'oc'){$nl[$i]->stamps(open_circle($c[$i],0,'blue'));}else{$nl[$i]->stamps(closed_circle($c[$i],0,'blue'));};
                        if($typeb[$i]eq'co'){$nl[$i]->stamps(open_circle($d[$i],0,'blue'));}elsif($typeb[$i]eq'oc'){$nl[$i]->stamps(closed_circle($d[$i],0,'blue'));};
                        }

                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        for my$i(0..2){
                        if($typea[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                          elsif($typea[$i]eq'ic'){$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                          elsif($typea[$i]eq'oc'){$sb[$i]=Compute("{ x | x>$a[$i] and x&lt;=$b[$i]}");}
                          else{$sb[$i]=Compute("{ x | x>=$a[$i] and x&lt;$b[$i]}");}
                        if($typeb[$i]eq'oi'){$sb[$i]=Union($sb[$i],Compute("{ x | x>$c[$i]}"));}
                          elsif($typeb[$i]eq'ci'){$sb[$i]=Union($sb[$i],Compute("{ x | x>=$c[$i]}"));}
                          elsif($typeb[$i]eq'oc'){$sb[$i]=Union($sb[$i],Compute("{ x | x>$c[$i] and x&lt;=$d[$i]}"));}
                          else{$sb[$i]=Union($sb[$i],Compute("{ x | x>=$c[$i] and x&lt;$d[$i]}"));}
                        };

                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        for my$i(0..2){
                        $in[$i]=Compute("$left{$typea[$i]}$a[$i],$b[$i]$right{$typea[$i]}U$left{$typeb[$i]}$c[$i],$d[$i]$right{$typeb[$i]}");
                        };
                    </pg-code>
                </setup>
                <statement>
                    <p>For each interval expressed in the number lines, give the interval notation and set-builder notation.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, <c>!=</c> for <m>\neq</m>, and capital letter <c>U</c> for <m>\cup</m>.</instruction>

                    <p><ol label="a.">
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[0]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[0]" width="20" /></p>
                            <p>In interval notation: <var name="$in[0]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[1]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[1]" width="20" /></p>
                            <p>In interval notation: <var name="$in[1]" width="20" /></p>
                        </li>
                        <li>
                            <sidebyside margins="0%" widths="67%"><image pg-name="$nl[2]"/></sidebyside>
                            <p>In set-builder notation: <var name="$sb[2]" width="20" /></p>
                            <p>In interval notation: <var name="$in[2]" width="20" /></p>
                        </li>
                    </ol></p>
                </statement>
            </webwork>
        </exercise> -->
<!--
<webwork-placeholder/>
         <exercise>
            <title>Gas Tank</title>
            <webwork >
                <setup>
                    <var name="$g"><static>13</static></var>
                    <var name="$sb"><static>\{x\mid x\ge0\text{ and }x\le13\}</static></var>
                    <var name="$in"><static>[0,13]</static></var>
                    <pg-code>
                        $g=random(10,18,1);
                        if($envir{problemSeed}==1){$g=13;};
                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $sb = Compute("{ x | x>=0 and x&lt;=$g}");
                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in = Compute("[0,$g]");
                        @ticks = ();
                        for my$j(0..5){push(@ticks,$j*5);};
                        $nl=init_graph(-10,-50,30,50,size=>[400,50]);
                        $nl->moveTo(0,0);
                        $nl->arrowTo(25,0,'black',1);
                        $nl->moveTo(0,0);
                        $nl->arrowTo(-5,0,'black',1);
                        for my$j(@ticks){$nl->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl->h_ticks(0,"black",@ticks);
                        $nl->moveTo(0,0);
                        $nl->lineTo($g,0,'blue',5);
                        $nl->stamps(closed_circle(0,0,'blue'));
                        $nl->stamps(closed_circle($g,0,'blue'));
                    </pg-code>
                </setup>
                <statement>
                    <p>Your car has a gas tank with a maximum capacity of <var name="$g"/> gallons. Use set-builder notation and interval notation to express the possible amounts of gasoline that might be in your tank. You can leave units out of your answers below, and assume that all quantities have gallon units.</p>

                    <p>In set-builder notation: <var name="$sb" width="20" /></p>
                    <p>In interval notation: <var name="$in" width="20" /></p>
                </statement>
                <solution>
                    <p>A number line depicting the answer looks like:</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$nl"/></sidebyside>
                    <p>The set-builder notation for the interval is <m><var name="$sb" /></m>, and the interval notation for the interval is <m><var name="$in" /></m>.</p>
                </solution>
            </webwork>
        </exercise> -->
<!--
<webwork-placeholder/>
         <exercise>
            <title>Reduced Price Tickets</title>
            <webwork>
                <setup>
                    <var name="$p">
                        <static>13</static>
                    </var>
                    <var name="$a">
                        <static>7</static>
                    </var>
                    <var name="$b">
                        <static>14</static>
                    </var>
                    <var name="$c">
                        <static>68</static>
                    </var>
                    <var name="$sb">
                        <static>\left\{x \mid 7\le x\le 14\hbox{ or }x\ge 68\right\}</static>
                    </var>
                    <var name="$in">
                        <static>\left[7,14\right]\cup \left[68,\infty \right)</static>
                    </var>
                    <pg-code>
                        InequalitySetBuilder::UseVerticalSuchThat();
                        Context("InequalitySetBuilder-Only");
                        $a=random(3,7,1);$b=$a+random(6,7,1);$c=random(60,68,1);
                        $sb = Compute("{ x | $a&lt;=x&lt;=$b or x>=$c}");
                        Context("Interval");
                        Context()->flags->set("formatStudentAnswer"=>'parsed');
                        $in = Compute("[$a,$b]U[$c,inf)");
                        @ticks = ($a,$b,$c);
                        $nl=init_graph(-5,-50,100,50,size=>[400,50]);
                        $nl->moveTo(10,0);
                        $nl->arrowTo(95,0,'black',1);
                        $nl->moveTo(10,0);
                        $nl->arrowTo(0,0,'black',1);
                        for my$j(@ticks){$nl->lb(new Label($j,-10,$j,'black','center','top'));};
                        $nl->h_ticks(0,"black",@ticks);
                        $nl->moveTo($a,0);
                        $nl->lineTo($b,0,'blue',5);
                        $nl->moveTo($c,0);
                        $nl->lineTo(92.5,0,'blue',5);
                        $nl->moveTo($c,0);
                        $nl->arrowTo(95,0,'blue',3);
                        $nl->stamps(closed_circle($a,0,'blue'));
                        $nl->stamps(closed_circle($b,0,'blue'));
                        $nl->stamps(closed_circle($c,0,'blue'));
                        $p=random(12,22,1);
                    </pg-code>
                </setup>
                <statement>
                    <p>A general admission ticket to the movies costs <m>\$<var name="$p"/></m>. However, children ages <m><var name="$a" /></m> through <m><var name="$b" /></m> are only charged half price. The same discount is offered to seniors ages <m><var name="$c" /></m> and older. Use mathematical notation to describe the set of possible ages of someone who was eligible for a half-price ticket.</p>

                    <instruction>If needed, type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, <c>&lt;=</c> for <m>\leq</m>, <c>!=</c> for <m>\neq</m>, and capital letter <c>U</c> for <m>\cup</m>.</instruction>

                    <p>In set-builder notation: <var name="$sb" width="30" /></p>
                    <p>In interval notation: <var name="$in" width="30" /></p>
                </statement>
                <solution>
                    <p>A number line depicting the answer looks like:</p>
                    <sidebyside margins="0%" widths="67%"><image pg-name="$nl"/></sidebyside>
                    <p>The set-builder notation for the interval is <m><var name="$sb" /></m>, and the interval notation for the interval is <m><var name="$in" /></m>.</p>
                </solution>
            </webwork>
        </exercise> -->
<!-- <webwork-placeholder/>
         <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics10.pg" />
        </exercise>
<webwork-placeholder/>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics20.pg" />
        </exercise>
<webwork-placeholder/>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics30.pg" />
        </exercise>
<webwork-placeholder/>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics40.pg" />
        </exercise>
<webwork-placeholder/>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics50.pg" />
        </exercise>
<webwork-placeholder/>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/CompoundInequalityBasics60.pg" />
        </exercise> -->
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
        </exercise>
    <exercisegroup cols="2">
        <introduction>
            <p>Convert set-builder notation to interval notation.</p>
        </introduction>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation110.pg" />
        </exercise>
        <exercise>
            <webwork  source="BasicAlgebra/LinearInequalities/IntervalNotation120.pg" />
        </exercise>
    </exercisegroup>
    </exercises>

</section>
