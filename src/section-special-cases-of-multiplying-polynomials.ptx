<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!-- *********************************************************************-->
<section xml:id="section-special-cases-of-multiplying-polynomials" permid="MhK">
  <title>Special Cases of Multiplying Polynomials</title>
  <objectives permid="BXa">
    <title>PCC Course Content and Outcome Guide</title>
    <ul permid="jTw">
      <li permid="Zur">
        <xref ref="mth65-add-subtract-multiply-square-polynomials" />
      </li>
    </ul>
  </objectives>

  <introduction permid="iej">
    <p permid="waK">
      Since we are now able to multiply polynomials together,
      we will look at a few special cases of polynomial multiplication.
    </p>

    <figure permid="chT">
      <caption>Alternative Video Lesson</caption>
      <video youtubeplaylist="PLmuZCPhWPt-cl21nlu-cPnDREmZnzNvOg" />
    </figure>
  </introduction>

  <subsection permid="soT">
    <title>Squaring a Binomial</title>
    <idx><h>squaring a binomial</h></idx>

    <example permid="hPO">
      <p permid="Juv">
        To <q>square a binomial</q> is to take a binomial and multiply it by itself.
        We know that exponent notation means that <m>4^2=4\cdot 4</m>.
        Applying this to a binomial, we'll see that <m>(x+4)^2=(x+4)(x+4)</m>.
        To expand this expression,
        we'll simply distribute <m>(x+4)</m> across <m>(x+4)</m>:
        <md permid="iGZ">
          <mrow>\left( x+4 \right)^2 \amp= \left( x+4 \right)\left( x+4 \right)</mrow>
          <mrow>\amp= x^2 + 4x + 4x + 16</mrow>
          <mrow>\amp= x^2 + 8x + 16</mrow>
        </md>
        Similarly, to expand <m>(y-7)^2</m>, we'll have:
        <md permid="OOi">
          <mrow>\left( y-7 \right)^2 \amp= \left( y-7 \right)\left( y-7 \right)</mrow>
          <mrow>\amp= y^2 -7y -7y + 49</mrow>
          <mrow>\amp= y^2 -14y + 49</mrow>
        </md>
      </p>

      <p permid="pBE">
        These two examples might look like any other example of multiplying binomials,
        but looking closely we can see that something very specific
        (or <em>special</em>)
        happened.
        Focusing on the original expression and the simplified one,
        we can see that a specific pattern occurred in each:
        <md permid="uVr">
          <mrow>\left( x+4 \right)^2 \amp= x^2 + \highlight{4}x + \highlight{4}x + \highlight{4\cdot 4}</mrow>
          <mrow>\left( x+\highlight{4} \right)^2 \amp= x^2 +2(\highlight{4}x) + \highlight{4}^2</mrow>
          <intertext>And:</intertext>
          <mrow>\left( y-7 \right)^2 \amp=  y^2 -\highlight{7}y - \highlight{7}y + \highlight{7\cdot 7}</mrow>
          <mrow>\left( y-\highlight{7} \right)^2 \amp=  y^2 -2(\highlight{7}y) + \highlight{7}^2</mrow>
        </md>
        Notice that the two middle terms are not only the same,
        they are also exactly the product of the two terms in the binomial.
        Furthermore,
        the last term is the square of the second term in each original binomial.
      </p>
    </example>

    <p permid="RIO">
      What we're seeing is a pattern that relates to two important phrases: The process is called
      <term>squaring a binomial</term>,
      and the result is called a <term>perfect square trinomial</term>.
          <idx><h>perfect square trinomial</h></idx>
      The first phrase is a description of what we're doing,
      we are literally squaring a binomial.
      The second phrase is a description of what you end up with.
      This second name will become important in a future chapter.
    </p>

    <example xml:id="example-deriving-formulas-for-squaring-binomials" permid="NWX">
      <p permid="VIN">
        The general way this pattern is presented is by squaring the two most general binomials possible,
        <m>(a+b)</m> and <m>(a-b)</m>.
        We will establish the pattern for <m>(a+b)^2</m> and <m>(a-b)^2</m>.
        Once we have done so,
        we will be able to substitute anything in place of <m>a</m> and <m>b</m> and rely upon the general pattern to simplify squared binomials.
      </p>

      <p permid="BPW">
        We first must expand <m>(a+b)^2</m> as
        <m>(a+b)(a+b)</m> and then we can multiply those binomials:
        <md permid="bcA">
          <mrow>(a+b)^2\amp=(a+b)(a+b)</mrow>
          <mrow>\amp=a^2+ab+ba+b^2</mrow>
          <mrow>\amp=a^2+2ab+b^2</mrow>
        </md>
        Notice the final simplification step was to add <m>ab+ba</m>.
        Since these are like terms, we can combine them into <m>2ab</m>.
      </p>

      <p permid="hXf">
        Similarly, we can find a general formula for <m>(a-b)^2</m>:
        <md permid="HjJ">
          <mrow>(a-b)^2\amp=(a-b)(a-b)</mrow>
          <mrow>\amp=a^2-ab-ba+b^2</mrow>
          <mrow>\amp=a^2-2ab+b^2</mrow>
        </md>
      </p>
    </example>

    <fact xml:id="fact-squaring-a-binomial" permid="ueg">
      <title>Squaring a Binomial Formulas</title>
      <idx><h>squaring a binomial</h></idx>
      <statement>
        <p permid="rqR">
          If <m>a</m> and <m>b</m> are real numbers or variable expressions,
          then we have the following formulas:
          <me permid="nqS">
            (a+b)^2 = a^2+2ab+b^2
          </me>
          <me permid="Tyb">
            (a-b)^2 = a^2-2ab+b^2
          </me>
        </p>
      </statement>
    </fact>

    <p permid="xPX">
      These formulas will allow us to multiply this type of special product more quickly.
    </p>

    <remark permid="alp">
      <p permid="DFj">
        Notice that when both <m>(a+b)^2</m> and <m>(a-b)^2</m> are expanded in <xref ref="example-deriving-formulas-for-squaring-binomials">Example</xref>,
        the last term was a <em>positive</em> <m>b^2</m> in both.
        This is because any number or expression,
        regardless of its sign, is positive after it is squared.
      </p>
    </remark>
  </subsection>

  <subsection permid="Ywc">
    <title>Further Examples of Squaring Binomials</title>
    <example xml:id="example-squaring-binomial-using-formula" permid="Gsy">
      <p permid="Oeo">
        Expand <m>(2x-3)^2</m> using the squaring a binomial formula.
      </p>

      <p permid="ulx">
        For this example we need to recognize that to apply the formula <m>(a-b)^2 = a^2-2ab+b^2</m> in this situation,
        <m>a=2x</m> and <m>b=3</m>.
        Expanding this, we have:
        <md alignment="alignat" permid="zFk">
          <mrow>( a-b)^2 \amp= a^2 \amp \amp- 2ab \amp \amp+ b^2</mrow>
          <mrow>( \highlight{2x} {}-{} \highlight{3})^2 \amp= \highlight{(2x)}^2 \amp \amp- 2\highlight{(2x)}\highlight{(3)} \amp \amp+ \highlight{(3)}^2</mrow>
          <mrow>\amp= 4x^2 \amp \amp- 12x \amp \amp+ 9</mrow>
        </md>
      </p>
    </example>

    <remark permid="yNZ">
      <p permid="jMs">
        While we rely on the formula for squaring a binomial in <xref ref="example-squaring-binomial-using-formula">Example</xref>,
        we will often omit the step of formally writing the formula and jump to the simplification,
        in this way:
        <me permid="fMt">
          (2x-3)^2=4x^2-12x+9
        </me>
      </p>
    </remark>

    <example permid="mzH">
      <statement>
        <p permid="asG">
          Multiply the following using the squaring a binomial formula:

          <ol label="a." cols="2" permid="QaF">
            <li permid="FBA">
              <p permid="jxX">
                <m>(5xy+1)^2</m>
              </p>
            </li>

            <li permid="lIJ">
              <p permid="PFg">
                <m>4(3x-7)^2</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="Ols">
        <p permid="swk">
          <ol label="a." permid="fjD">
            <li permid="RPS">
              <p permid="vMp">
                <m>\begin{aligned}[t]
                (5xy+1)^2 \amp= (5xy)^2+2(5xy)(1)+1^2\\
                \amp= 25x^2y^2+10xy+1\end{aligned}
                </m>
              </p>
            </li>

            <li permid="xXb">
              <p permid="bTy">
                With this expression,
                we will first note that the factor of <m>4</m> is <em>outside</em>
                the portion of the expression that is squared.
                Using the order of operations,
                we will first expand <m>(3x-7)^2</m> and then multiply that expression by <m>4</m>:
                <md permid="LTC">
                  <mrow>4(3x-7)^2 \amp= 4\left((3x)^2-2(3x)(7)+7^2\right)</mrow>
                  <mrow>\amp= 4\left(9x^2-42x+49\right)</mrow>
                  <mrow>\amp= 36x^2-168x+196</mrow>
                </md>
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <example permid="SGQ">
      <statement>
        <p permid="GzP">
          A circle's area can be calculated by the formula
          <me permid="saL">
            A=\pi r^2
          </me>
          where <m>A</m> stands for area,
          and <m>r</m> stands for radius.
          If a certain circle's radius can be modeled by <m>x-5</m> feet,
          use an expanded polynomial to model the circle's area.
        </p>
      </statement>
      <solution permid="usB">
        <p permid="YDt">
          The circle's area would be:
          <md permid="YhU">
            <mrow>A\amp=\pi r^2</mrow>
            <mrow>\amp=\pi (x-5)^2</mrow>
            <mrow>\amp=\pi \left[(x)^2-2(x)(5)+(5)^2\right]</mrow>
            <mrow>\amp=\pi \left[x^2-10x+25\right]</mrow>
            <mrow>\amp=\pi x^2-10\pi x+25\pi</mrow>
          </md>
          The circle's area can be modeled by <m>\pi x^2-10\pi x+25\pi</m> square feet.
        </p>
      </solution>
    </example>
<!--         <exercise>
            <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication195.pg" seed="2"/>
        </exercise>-->
    <exercise permid="eVi">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication215.pg" seed="3"/>
    </exercise>
  </subsection>

  <subsection permid="EDl">
    <title>The Product of the Sum and Difference of Two Terms</title>
    <p permid="dXg">
      To identify the next <q>special case</q>
      for multiplying polynomials,
      we'll look at a couple of examples.
    </p>

    <example permid="Lcr">
      <statement>
        <p permid="mGY">
          Multiply the following binomials:

          <ol label="a." cols="2" permid="whO">
            <li permid="eek">
              <p permid="IaH">
                <m>(x+5)(x-5)</m>
              </p>
            </li>

            <li permid="Klt">
              <p permid="ohQ">
                <m>(y-8)(y+8)</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="azK">
        <p permid="EKC">
          We can approach these as using distribution,
          <acro>FOIL</acro>, or generic rectangles, and obtain the following:

          <ol label="a." cols="2" permid="LqM">
            <li permid="qsC">
              <p permid="UoZ">
                <m>\begin{aligned}[t]
                (x+5)(x-5) \amp= x^2-5x+5x-25\\
                \amp= x^2 -25\end{aligned}
                </m>
              </p>
            </li>

            <li permid="WzL">
              <p permid="Awi">
                <m>\begin{aligned}[t]
                (y+8)(y-8) \amp= y^2-8y+8y-4\\
                \amp= y^2 - 64\end{aligned}
                </m>
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <p permid="Kep">
      Notice that for each of these products,
      we multiplied the sum of two terms by the difference of the
      <em>same</em> two terms.
      Notice also in these three examples that once these expressions were multiplied,
      the two middle terms were opposites and thus canceled to zero.
    </p>

    <p permid="qly">
      These pairs,
      generally written as <m>(a+b)</m> and <m>(a-b)</m>,
      are known as <term>conjugates</term>.
          <idx><h>conjugates</h></idx>
      If we multiply <m>(a+b)(a-b)</m>,
      we can see this general pattern more clearly:
      <md permid="Epd">
        <mrow>(a+b)(a-b) \amp= a^2-ab+ab-b^2</mrow>
        <mrow>\amp= a^2  - b^2</mrow>
      </md>
      As with the previous special case,
      this one also has two names.
      This can be called the <term>product of the sum and difference of two terms</term>,
      because this pattern is built on multiplying two binomials that have the same two terms,
      except one binomial is a sum and the other binomial is a difference.
      The second name is a <term>difference of squares</term>,
          <idx><h>difference of squares</h></idx>
      because the end result of the multiplication is a binomial that is the difference of two perfect squares.
      As before, the second name will become useful in a future chapter when using exactly the technique described in this section will be pertinent.
    </p>

    <fact xml:id="fact-product-of-sum-and-difference" permid="XqJ">
      <title>The Product of the Sum and Difference of Two Terms Formula</title>
      <idx><h>difference of squares</h></idx>
      <idx><h>product of sum and difference of two terms</h></idx>
      <statement>
        <p permid="Xya">
          If <m>a</m> and <m>b</m> are real numbers or variable expressions,
          then we have the following formula:
          <me permid="kwm">
            (a+b)(a-b)=a^2-b^2
          </me>
        </p>
      </statement>
    </fact>

    <exercise permid="PMk">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication165.pg" seed="2"/>
    </exercise>

    <example permid="rjA">
      <statement>
        <p permid="SOh">
          Multiply the following using <xref ref="fact-product-of-sum-and-difference">Fact</xref>.

          <ol label="a." cols="2" permid="coX">
            <li permid="CGU">
              <p permid="gDr">
                <m>(4x-7y)(4x+7y)</m>
              </p>
            </li>

            <li permid="iOd">
              <p permid="MKA">
                <m>-2(3x+1)(3x-1)</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="GGT">
        <p permid="kRL">
          The first step to using this method is to identify the values of <m>a</m> and <m>b</m>.

          <ol label="a." permid="rxV">
            <li permid="OVm">
              <p permid="sRJ">
                In this instance, <m>a=4x</m> and <m>b=7y</m>.
                Using the formula,
                <md permid="QDv">
                  <mrow>(4x-7y)(4x+7y) \amp= (4x)^2-(7y)^2</mrow>
                  <mrow>\amp= 16x^2-49y^2</mrow>
                </md>
              </p>
            </li>

            <li permid="vcv">
              <p permid="YYS">
                In this instance,
                we have a constant factor as well as a product in the form <m>(a+b)(a-b)</m>.
                We will first expand <m>(3x+1)(3x-1)</m> by identifying <m>a=3x</m> and <m>b=1</m> and using the formula.
                Then we will multiply the factor of <m>-2</m> through this expression.
                So,
                <md permid="wKE">
                  <mrow>-2(3x+1)(3x-1)\amp= -2\left((3x)^2-1^2\right)</mrow>
                  <mrow>\amp= -2\left(9x^2-1\right)</mrow>
                  <mrow>\amp= -18x^2+2</mrow>
                </md>
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <exercise permid="vTt">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication175.pg" seed="2"/>
    </exercise>
<!--         <exercise>
                <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar130.pg" seed="2"/>
        </exercise>-->
    <list xml:id="list-special-cases-of-multiplication-formulas" permid="DxS">
      <caption>Special Cases of Multiplication Formulas</caption>
      <idx><h>special cases of multiplication formulas</h></idx>

      <introduction permid="jFb">
        <p permid="PTB">
          If <m>a</m> and <m>b</m> are real numbers or variable expressions,
          then we have the following formulas:
        </p>
      </introduction>

      <dl permid="Iwg">
        <li xml:id="item-squaring-a-binomial-sum-formula" permid="rcw">
          <title>Squaring a Binomial (Sum)</title>
          <p permid="Fgb">
            <m>(a+b)^2 = a^2+2ab+b^2 </m>
          </p>
        </li>

        <li xml:id="item-squaring-a-binomial-difference-formula" permid="XjF">
          <title>Squaring a Binomial (Difference)</title>
          <p permid="lnk">
            <m>(a-b)^2 = a^2-2ab+b^2</m>
          </p>
        </li>

        <li xml:id="item-product-of-the-sum-and-difference-of-two-terms" permid="DqO">
          <title>Product of the Sum and Difference of Two Terms</title>
          <p permid="Rut">
            <m>(a+b)(a-b)=a^2-b^2</m>
          </p>
        </li>
      </dl>
    </list>

    <warning permid="zcu">
      <title>Common Mistakes</title>
      <p permid="dnm">
        We've found that
        <me permid="cRN">
          (a+b)(a-b)=a^2-b^2
        </me>
        However,
        <me permid="IYW">
          (a-b)^2\neq a^2-b^2\text{ because }(a-b)^2=a^2\highlight{{}-{}2ab{}+{}}b^2
        </me>
        Similarly,
        <me permid="pgf">
          (a+b)^2\neq a^2+b^2\text{ because }(a+b)^2=a^2\highlight{{}+{}2ab}+b^2
        </me>
      </p>
    </warning>
  </subsection>

  <subsection permid="kKu">
    <title>Binomials Raised to Other Powers</title>
    <example permid="caC">
      <p permid="yVq">
        Simplify the expression <m>(x+5)^3</m> into an expanded polynomial.
      </p>

      <p permid="fcz">
        Before we start expanding this expression,
        it is important to recognize that <m>(x+5)^3\neq x^3+ 5^3</m>.
        We can see that this doesn't work by inputting <m>1</m> for <m>x</m> and applying the order of operations:
        <md permid="Vno">
          <mrow>(\substitute{1}+5)^3\amp=6^3\amp \substitute{1}^3+5^3\amp=1+125</mrow>
          <mrow>\amp=216\amp\amp=126</mrow>
        </md>
      </p>

      <p permid="LjI">
        With this in mind,
        we will need to rely on distribution to expand this expression.
        The first step in expanding <m>(x+5)^3</m> is to remember that the exponent of <m>3</m> indicates that
        <me permid="Bux">
          (x+5)^3=\overbrace{(x+5)(x+5)(x+5)}^{3\text{ times }}
        </me>
        Once we rewrite this in an expanded form,
        we next multiply the two binomials on the left and then finish by multiplying that result by the remaining binomial:
        <md permid="hBG">
          <mrow>(x+5)^3\amp=\highlight{\left[(x+5)(x+5)\right]}(x+5)</mrow>
          <mrow>\amp=\highlight{\left[x^2+10x+25\right]}(x+5)</mrow>
          <mrow>\amp=x^3 + 5x^2 + 10x^2 +50x+25x+125</mrow>
          <mrow>\amp=x^3 + 15x^2  + 75x + 125</mrow>
        </md>
      </p>
    </example>

    <exercise permid="IhL">
      <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication245.pg" seed="3"/>
    </exercise>

    <p permid="WsH">
      If we wanted to expand a binomial raised to any power,
      we always start by rewriting the expression without an exponent.
    </p>

    <p permid="CzQ">
      To multiply <m>(x-3)^4</m>,
      we'd start by rewriting <m>(x-3)^4</m> in expanded form as:
      <me permid="NIP">
        (x-3)^4=\overbrace{(x-3)(x-3)(x-3)(x-3)}^{4\text{ times}}
      </me>
      We will then multiply pairs of polynomials from the left to the right.
      <md permid="tPY">
        <mrow>(x-3)^4\amp=\highlight{\left[(x-3)(x-3)\right]}(x-3)(x-3)</mrow>
        <mrow>\amp=\highlight{\left[(x^2-6x+9)(x-3)\right]}(x-3)</mrow>
        <mrow>\amp= \left[x^3-9x^2+27x-27\right](x-3)</mrow>
        <mrow>\amp=x^2-9x^3+27x^2-27x-3x^3+27x^2-81x+81</mrow>
        <mrow>\amp=x^4 - 12 x^3 + 54 x^2- 108 x + 81</mrow>
      </md>
    </p>
  </subsection>

  <exercises permid="QRD">
    <exercisegroup cols="4" permid="wYM">
      <title>Review and Warmup</title>
      <exercise permid="ooU">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication25.pg" />
      </exercise>

      <exercise permid="Uwd">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication25.pg" />
      </exercise>

      <exercise permid="ADm">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication23.pg" />
      </exercise>

      <exercise permid="gKv">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication23.pg" />
      </exercise>

      <exercise permid="MRE">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication45.pg" />
      </exercise>

      <exercise permid="sYN">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication45.pg" />
      </exercise>

      <exercise permid="ZfW">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication50.pg" />
      </exercise>

      <exercise permid="Fnf">
        <webwork source="BasicAlgebra/Exponents/exponentsMultiplication50.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="4" permid="dfV">

      <exercise permid="luo">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="Ipc">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="owl">
                <ol label="a." permid="oDp">
                  <li permid="bjE">
                    <p permid="xBC">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="dIL">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="HqN">
                    <p permid="JPU">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="pXd">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="nxW">
                    <p permid="Wem">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Clv">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="TFf">
                    <p permid="isE">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="OzN">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="RBx">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,2,2,2,2,2)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="UDu">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="AKD">
                <ol label="a." permid="UKy">
                  <li permid="zMo">
                    <p permid="uGW">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="aOf">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="fTx">
                    <p permid="GVo">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="ncx">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="MaG">
                    <p permid="TjG">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="zqP">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="shP">
                    <p permid="fxY">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="LFh">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
            <!-- 2 to 4 terms -->
      <exercise permid="xIG">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="gRM">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="MYV">
                <ol label="a." permid="ARH">
                  <li permid="YoY">
                    <p permid="rMq">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="XTz">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Ewh">
                    <p permid="EaI">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="khR">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="kDq">
                    <p permid="Qpa">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="wwj">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="QKz">
                    <p permid="cDs">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="IKB">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="dPP">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '+' => {class => 'bizarro::BOP::add', isCommand => 1},
                    '-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'+'.
                            $expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'x+'.
                            $expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'y+'.
                            $expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'z+'.
                            $expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'s+'.
                            $expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'t+'.
                            $expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2x^2+'.
                            $expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2y^2+'.
                            $expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2z^2+'.
                            $expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2s^2+'.
                            $expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0).'/2t^2')->reduce->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroAdd=>1,bizarroSub=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroAdd=>0,bizarroSub=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="tge">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="Znn">
                <ol label="a." permid="gYQ">
                  <li permid="wRI">
                    <p permid="oRK">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="UYT">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="cYR">
                    <p permid="Bgc">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="hnl">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="Jga">
                    <p permid="Nuu">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="tBD">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="pnj">
                    <p permid="ZIM">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="FPV">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2" permid="Jne">

      <exercise permid="JWY">
        <webwork>
            <setup>

            <pg-code>
                $yes=PopUp(['?','True', 'False'],1);
                $no=PopUp(['?','True', 'False'],2);
            </pg-code>
            </setup>
            <statement>
              <p permid="Fuw">
                Determine if the following statements are true or false.

                <ol label="a." permid="NfZ">
                  <li permid="Vus">
                    <p permid="lXe">
                      <m>(a-b)^2=a^2-b^2</m>
                    </p>

                    <p permid="Sen">
                      <var name="$no" form="popup"/>
                    </p>
                  </li>

                  <li permid="BBB">
                    <p permid="ylw">
                      <m>(a+b)^2=a^2+b^2</m>
                    </p>

                    <p permid="esF">
                      <var name="$no" form="popup"/>
                    </p>
                  </li>

                  <li permid="hIK">
                    <p permid="KzO">
                      <m>(a+b)(a-b)=a^2-b^2</m>
                    </p>

                    <p permid="qGX">
                      <var name="$yes" form="popup"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="mOc">
              <p permid="QYU">
                <ol label="a." permid="XFe">
                  <li permid="NPT">
                    <p permid="WOg">
                      False, as <m>(a-b)^2=a^2-2ab+b^2</m>.
                    </p>
                  </li>

                  <li permid="tXc">
                    <p permid="CVp">
                      False, as <m>(a+b)^2=a^2+2ab+b^2</m>.
                    </p>
                  </li>

                  <li permid="ael">
                    <p permid="jcy">
                      True.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="qeh">
        <webwork>
            <setup>

            <pg-code>
                $yes=PopUp(['?','True', 'False'],1);
                $no=PopUp(['?','True', 'False'],2);
            </pg-code>
            </setup>
            <statement>
              <p permid="lBF">
                Determine if the following statements are true or false.

                <ol label="a." permid="tni">
                  <li permid="Glu">
                    <p permid="PjH">
                      <m>(2(a-b))^2=4(a-b)^2</m>
                    </p>

                    <p permid="vqQ">
                      <var name="$yes" form="popup"/>
                    </p>
                  </li>

                  <li permid="msD">
                    <p permid="bxZ">
                      <m>2(a+b)^2=2a^2+2b^2</m>
                    </p>

                    <p permid="HFi">
                      <var name="$no" form="popup"/>
                    </p>
                  </li>

                  <li permid="SzM">
                    <p permid="nMr">
                      <m>2(a+b)(a-b)=2a^2-2b^2</m>
                    </p>

                    <p permid="TTA">
                      <var name="$yes" form="popup"/>
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="SVl">
              <p permid="xgd">
                <ol label="a." permid="DMn">
                  <li permid="yGV">
                    <p permid="AaJ">
                      True, as
                      <md permid="ZXh">
                        <mrow>(2(a-b))^2\amp=2^2(a-b)^2</mrow>
                        <mrow>\amp=4(a-b)^2</mrow>
                      </md>
                      by the rules of exponents.
                    </p>
                  </li>

                  <li permid="eOe">
                    <p permid="ghS">
                      False, as <m>(a+b)^2=a^2+2ab+b^2</m>, we have
                      <md permid="Geq">
                        <mrow>2(a+b)^2\amp=2(a^2+2ab+b^2)</mrow>
                        <mrow>\amp=2a^2+4ab+2b^2</mrow>
                      </md>
                    </p>
                  </li>

                  <li permid="KVn">
                    <p permid="Mpb">
                      True, as
                      <md permid="mlz">
                        <mrow>2(a+b)(a-b)\amp=2(a^2-b^2)</mrow>
                        <mrow>\amp=2a^2-2b^2</mrow>
                      </md>
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="pun">
      <title>Perfect Square Trinomial Formula</title>
      <exercise permid="Wlq">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication190.pg" />
      </exercise>

      <exercise permid="Csz">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication190.pg" />
      </exercise>

      <exercise permid="izI">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication195.pg" />
      </exercise>

      <exercise permid="OGR">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication195.pg" />
      </exercise>

      <exercise permid="uOa">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication200.pg" />
      </exercise>

      <exercise permid="aVj">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication200.pg" />
      </exercise>

      <exercise permid="Hcs">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication205.pg" />
      </exercise>

      <exercise permid="njB">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication205.pg" />
      </exercise>

      <exercise permid="TqK">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication210.pg" />
      </exercise>

      <exercise permid="zxT">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication210.pg" />
      </exercise>

      <exercise permid="fFc">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication215.pg" />
      </exercise>

      <exercise permid="LMl">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication215.pg" />
      </exercise>

      <exercise permid="rTu">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar100.pg" />
      </exercise>

      <exercise permid="YaD">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar100.pg" />
      </exercise>

      <exercise permid="EhM">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar105.pg" />
      </exercise>

      <exercise permid="koV">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar105.pg" />
      </exercise>

      <exercise permid="Qwe">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar110.pg" />
      </exercise>

      <exercise permid="wDn">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar110.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="VBw">
      <title>Difference of Squares Formula</title>
      <exercise permid="cKw">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication160.pg" />
      </exercise>

      <exercise permid="IRF">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication160.pg" />
      </exercise>

      <exercise permid="oYO">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication165.pg" />
      </exercise>

      <exercise permid="VfX">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication165.pg" />
      </exercise>

      <exercise permid="Bng">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication170.pg" />
      </exercise>

      <exercise permid="hup">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication170.pg" />
      </exercise>

      <exercise permid="NBy">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication175.pg" />
      </exercise>

      <exercise permid="tIH">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication175.pg" />
      </exercise>

      <exercise permid="ZPQ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication180.pg" />
      </exercise>

      <exercise permid="FWZ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication180.pg" />
      </exercise>

      <exercise permid="mei">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication185.pg" />
      </exercise>

      <exercise permid="Slr">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication185.pg" />
      </exercise>

      <exercise permid="ysA">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar115.pg" />
      </exercise>

      <exercise permid="ezJ">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar115.pg" />
      </exercise>

      <exercise permid="KGS">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar120.pg" />
      </exercise>

      <exercise permid="qOb">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar120.pg" />
      </exercise>

      <exercise permid="WVk">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication161.pg" />
      </exercise>

      <exercise permid="Dct">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication161.pg" />
      </exercise>

      <exercise permid="jjC">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication166.pg" />
      </exercise>

      <exercise permid="PqL">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication166.pg" />
      </exercise>

      <exercise permid="vxU">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication191.pg" />
      </exercise>

      <exercise permid="bFd">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication191.pg" />
      </exercise>

      <exercise permid="HMm">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication196.pg" />
      </exercise>

      <exercise permid="nTv">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication196.pg" />
      </exercise>

      <exercise permid="UaE">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar125.pg" />
      </exercise>

      <exercise permid="AhN">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar125.pg" />
      </exercise>

      <exercise permid="goW">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar130.pg" />
      </exercise>

      <exercise permid="Mwf">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar130.pg" />
      </exercise>

      <exercise permid="sDo">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar135.pg" />
      </exercise>

      <exercise permid="YKx">
        <webwork source="BasicAlgebra/PolynomialMultiplication/polyMultVar135.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3" permid="BIF">
      <title>Binomials Raised to Other Powers</title>
      <exercise permid="ERG">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication230.pg" />
      </exercise>

      <exercise permid="kYP">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication230.pg" />
      </exercise>

      <exercise permid="RfY">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication235.pg" />
      </exercise>

      <exercise permid="xnh">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication235.pg" />
      </exercise>

      <exercise permid="duq">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication240.pg" />
      </exercise>

      <exercise permid="JBz">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication240.pg" />
      </exercise>

      <exercise permid="pII">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication245.pg" />
      </exercise>

      <exercise permid="VPR">
        <webwork source="BasicAlgebra/PolynomialMultiplication/PolynomialMultiplication245.pg" />
      </exercise>

    </exercisegroup>
  </exercises>
</section>

